//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Package-scope variables */
var exports, _;

(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                       //
// packages/underscore/pre.js                                                                            //
//                                                                                                       //
///////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                         //
// Define an object named exports. This will cause underscore.js to put `_` as a                         // 1
// field on it, instead of in the global namespace.  See also post.js.                                   // 2
exports = {};                                                                                            // 3
                                                                                                         // 4
///////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                       //
// packages/underscore/underscore.js                                                                     //
//                                                                                                       //
///////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                         //
//     Underscore.js 1.5.2                                                                               // 1
//     http://underscorejs.org                                                                           // 2
//     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                // 3
//     Underscore may be freely distributed under the MIT license.                                       // 4
                                                                                                         // 5
(function() {                                                                                            // 6
                                                                                                         // 7
  // Baseline setup                                                                                      // 8
  // --------------                                                                                      // 9
                                                                                                         // 10
  // Establish the root object, `window` in the browser, or `exports` on the server.                     // 11
  var root = this;                                                                                       // 12
                                                                                                         // 13
  // Save the previous value of the `_` variable.                                                        // 14
  var previousUnderscore = root._;                                                                       // 15
                                                                                                         // 16
  // Establish the object that gets returned to break out of a loop iteration.                           // 17
  var breaker = {};                                                                                      // 18
                                                                                                         // 19
  // Save bytes in the minified (but not gzipped) version:                                               // 20
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;         // 21
                                                                                                         // 22
  // Create quick reference variables for speed access to core prototypes.                               // 23
  var                                                                                                    // 24
    push             = ArrayProto.push,                                                                  // 25
    slice            = ArrayProto.slice,                                                                 // 26
    concat           = ArrayProto.concat,                                                                // 27
    toString         = ObjProto.toString,                                                                // 28
    hasOwnProperty   = ObjProto.hasOwnProperty;                                                          // 29
                                                                                                         // 30
  // All **ECMAScript 5** native function implementations that we hope to use                            // 31
  // are declared here.                                                                                  // 32
  var                                                                                                    // 33
    nativeForEach      = ArrayProto.forEach,                                                             // 34
    nativeMap          = ArrayProto.map,                                                                 // 35
    nativeReduce       = ArrayProto.reduce,                                                              // 36
    nativeReduceRight  = ArrayProto.reduceRight,                                                         // 37
    nativeFilter       = ArrayProto.filter,                                                              // 38
    nativeEvery        = ArrayProto.every,                                                               // 39
    nativeSome         = ArrayProto.some,                                                                // 40
    nativeIndexOf      = ArrayProto.indexOf,                                                             // 41
    nativeLastIndexOf  = ArrayProto.lastIndexOf,                                                         // 42
    nativeIsArray      = Array.isArray,                                                                  // 43
    nativeKeys         = Object.keys,                                                                    // 44
    nativeBind         = FuncProto.bind;                                                                 // 45
                                                                                                         // 46
  // Create a safe reference to the Underscore object for use below.                                     // 47
  var _ = function(obj) {                                                                                // 48
    if (obj instanceof _) return obj;                                                                    // 49
    if (!(this instanceof _)) return new _(obj);                                                         // 50
    this._wrapped = obj;                                                                                 // 51
  };                                                                                                     // 52
                                                                                                         // 53
  // Export the Underscore object for **Node.js**, with                                                  // 54
  // backwards-compatibility for the old `require()` API. If we're in                                    // 55
  // the browser, add `_` as a global object via a string identifier,                                    // 56
  // for Closure Compiler "advanced" mode.                                                               // 57
  if (typeof exports !== 'undefined') {                                                                  // 58
    if (typeof module !== 'undefined' && module.exports) {                                               // 59
      exports = module.exports = _;                                                                      // 60
    }                                                                                                    // 61
    exports._ = _;                                                                                       // 62
  } else {                                                                                               // 63
    root._ = _;                                                                                          // 64
  }                                                                                                      // 65
                                                                                                         // 66
  // Current version.                                                                                    // 67
  _.VERSION = '1.5.2';                                                                                   // 68
                                                                                                         // 69
  // Collection Functions                                                                                // 70
  // --------------------                                                                                // 71
                                                                                                         // 72
  // METEOR CHANGE: Define _isArguments instead of depending on                                          // 73
  // _.isArguments which is defined using each. In looksLikeArray                                        // 74
  // (which each depends on), we then use _isArguments instead of                                        // 75
  // _.isArguments.                                                                                      // 76
  var _isArguments = function (obj) {                                                                    // 77
    return toString.call(obj) === '[object Arguments]';                                                  // 78
  };                                                                                                     // 79
  // Define a fallback version of the method in browsers (ahem, IE), where                               // 80
  // there isn't any inspectable "Arguments" type.                                                       // 81
  if (!_isArguments(arguments)) {                                                                        // 82
    _isArguments = function (obj) {                                                                      // 83
      return !!(obj && hasOwnProperty.call(obj, 'callee') && typeof obj.callee === 'function');          // 84
    };                                                                                                   // 85
  }                                                                                                      // 86
                                                                                                         // 87
  // METEOR CHANGE: _.each({length: 5}) should be treated like an object, not an                         // 88
  // array. This looksLikeArray function is introduced by Meteor, and replaces                           // 89
  // all instances of `obj.length === +obj.length`.                                                      // 90
  // https://github.com/meteor/meteor/issues/594                                                         // 91
  // https://github.com/jashkenas/underscore/issues/770                                                  // 92
  var looksLikeArray = function (obj) {                                                                  // 93
    return (obj.length === +obj.length                                                                   // 94
            // _.isArguments not yet necessarily defined here                                            // 95
            && (_isArguments(obj) || obj.constructor !== Object));                                       // 96
  };                                                                                                     // 97
                                                                                                         // 98
  // The cornerstone, an `each` implementation, aka `forEach`.                                           // 99
  // Handles objects with the built-in `forEach`, arrays, and raw objects.                               // 100
  // Delegates to **ECMAScript 5**'s native `forEach` if available.                                      // 101
  var each = _.each = _.forEach = function(obj, iterator, context) {                                     // 102
    if (obj == null) return;                                                                             // 103
    if (nativeForEach && obj.forEach === nativeForEach) {                                                // 104
      obj.forEach(iterator, context);                                                                    // 105
    } else if (looksLikeArray(obj)) {                                                                    // 106
      for (var i = 0, length = obj.length; i < length; i++) {                                            // 107
        if (iterator.call(context, obj[i], i, obj) === breaker) return;                                  // 108
      }                                                                                                  // 109
    } else {                                                                                             // 110
      var keys = _.keys(obj);                                                                            // 111
      for (var i = 0, length = keys.length; i < length; i++) {                                           // 112
        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;                      // 113
      }                                                                                                  // 114
    }                                                                                                    // 115
  };                                                                                                     // 116
                                                                                                         // 117
  // Return the results of applying the iterator to each element.                                        // 118
  // Delegates to **ECMAScript 5**'s native `map` if available.                                          // 119
  _.map = _.collect = function(obj, iterator, context) {                                                 // 120
    var results = [];                                                                                    // 121
    if (obj == null) return results;                                                                     // 122
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);                           // 123
    each(obj, function(value, index, list) {                                                             // 124
      results.push(iterator.call(context, value, index, list));                                          // 125
    });                                                                                                  // 126
    return results;                                                                                      // 127
  };                                                                                                     // 128
                                                                                                         // 129
  var reduceError = 'Reduce of empty array with no initial value';                                       // 130
                                                                                                         // 131
  // **Reduce** builds up a single result from a list of values, aka `inject`,                           // 132
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.                           // 133
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {                               // 134
    var initial = arguments.length > 2;                                                                  // 135
    if (obj == null) obj = [];                                                                           // 136
    if (nativeReduce && obj.reduce === nativeReduce) {                                                   // 137
      if (context) iterator = _.bind(iterator, context);                                                 // 138
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);                                // 139
    }                                                                                                    // 140
    each(obj, function(value, index, list) {                                                             // 141
      if (!initial) {                                                                                    // 142
        memo = value;                                                                                    // 143
        initial = true;                                                                                  // 144
      } else {                                                                                           // 145
        memo = iterator.call(context, memo, value, index, list);                                         // 146
      }                                                                                                  // 147
    });                                                                                                  // 148
    if (!initial) throw new TypeError(reduceError);                                                      // 149
    return memo;                                                                                         // 150
  };                                                                                                     // 151
                                                                                                         // 152
  // The right-associative version of reduce, also known as `foldr`.                                     // 153
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.                                  // 154
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {                                     // 155
    var initial = arguments.length > 2;                                                                  // 156
    if (obj == null) obj = [];                                                                           // 157
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {                                    // 158
      if (context) iterator = _.bind(iterator, context);                                                 // 159
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);                      // 160
    }                                                                                                    // 161
    var length = obj.length;                                                                             // 162
    if (!looksLikeArray(obj)) {                                                                          // 163
      var keys = _.keys(obj);                                                                            // 164
      length = keys.length;                                                                              // 165
    }                                                                                                    // 166
    each(obj, function(value, index, list) {                                                             // 167
      index = keys ? keys[--length] : --length;                                                          // 168
      if (!initial) {                                                                                    // 169
        memo = obj[index];                                                                               // 170
        initial = true;                                                                                  // 171
      } else {                                                                                           // 172
        memo = iterator.call(context, memo, obj[index], index, list);                                    // 173
      }                                                                                                  // 174
    });                                                                                                  // 175
    if (!initial) throw new TypeError(reduceError);                                                      // 176
    return memo;                                                                                         // 177
  };                                                                                                     // 178
                                                                                                         // 179
  // Return the first value which passes a truth test. Aliased as `detect`.                              // 180
  _.find = _.detect = function(obj, iterator, context) {                                                 // 181
    var result;                                                                                          // 182
    any(obj, function(value, index, list) {                                                              // 183
      if (iterator.call(context, value, index, list)) {                                                  // 184
        result = value;                                                                                  // 185
        return true;                                                                                     // 186
      }                                                                                                  // 187
    });                                                                                                  // 188
    return result;                                                                                       // 189
  };                                                                                                     // 190
                                                                                                         // 191
  // Return all the elements that pass a truth test.                                                     // 192
  // Delegates to **ECMAScript 5**'s native `filter` if available.                                       // 193
  // Aliased as `select`.                                                                                // 194
  _.filter = _.select = function(obj, iterator, context) {                                               // 195
    var results = [];                                                                                    // 196
    if (obj == null) return results;                                                                     // 197
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);               // 198
    each(obj, function(value, index, list) {                                                             // 199
      if (iterator.call(context, value, index, list)) results.push(value);                               // 200
    });                                                                                                  // 201
    return results;                                                                                      // 202
  };                                                                                                     // 203
                                                                                                         // 204
  // Return all the elements for which a truth test fails.                                               // 205
  _.reject = function(obj, iterator, context) {                                                          // 206
    return _.filter(obj, function(value, index, list) {                                                  // 207
      return !iterator.call(context, value, index, list);                                                // 208
    }, context);                                                                                         // 209
  };                                                                                                     // 210
                                                                                                         // 211
  // Determine whether all of the elements match a truth test.                                           // 212
  // Delegates to **ECMAScript 5**'s native `every` if available.                                        // 213
  // Aliased as `all`.                                                                                   // 214
  _.every = _.all = function(obj, iterator, context) {                                                   // 215
    iterator || (iterator = _.identity);                                                                 // 216
    var result = true;                                                                                   // 217
    if (obj == null) return result;                                                                      // 218
    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);                   // 219
    each(obj, function(value, index, list) {                                                             // 220
      if (!(result = result && iterator.call(context, value, index, list))) return breaker;              // 221
    });                                                                                                  // 222
    return !!result;                                                                                     // 223
  };                                                                                                     // 224
                                                                                                         // 225
  // Determine if at least one element in the object matches a truth test.                               // 226
  // Delegates to **ECMAScript 5**'s native `some` if available.                                         // 227
  // Aliased as `any`.                                                                                   // 228
  var any = _.some = _.any = function(obj, iterator, context) {                                          // 229
    iterator || (iterator = _.identity);                                                                 // 230
    var result = false;                                                                                  // 231
    if (obj == null) return result;                                                                      // 232
    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);                       // 233
    each(obj, function(value, index, list) {                                                             // 234
      if (result || (result = iterator.call(context, value, index, list))) return breaker;               // 235
    });                                                                                                  // 236
    return !!result;                                                                                     // 237
  };                                                                                                     // 238
                                                                                                         // 239
  // Determine if the array or object contains a given value (using `===`).                              // 240
  // Aliased as `include`.                                                                               // 241
  _.contains = _.include = function(obj, target) {                                                       // 242
    if (obj == null) return false;                                                                       // 243
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;                // 244
    return any(obj, function(value) {                                                                    // 245
      return value === target;                                                                           // 246
    });                                                                                                  // 247
  };                                                                                                     // 248
                                                                                                         // 249
  // Invoke a method (with arguments) on every item in a collection.                                     // 250
  _.invoke = function(obj, method) {                                                                     // 251
    var args = slice.call(arguments, 2);                                                                 // 252
    var isFunc = _.isFunction(method);                                                                   // 253
    return _.map(obj, function(value) {                                                                  // 254
      return (isFunc ? method : value[method]).apply(value, args);                                       // 255
    });                                                                                                  // 256
  };                                                                                                     // 257
                                                                                                         // 258
  // Convenience version of a common use case of `map`: fetching a property.                             // 259
  _.pluck = function(obj, key) {                                                                         // 260
    return _.map(obj, function(value){ return value[key]; });                                            // 261
  };                                                                                                     // 262
                                                                                                         // 263
  // Convenience version of a common use case of `filter`: selecting only objects                        // 264
  // containing specific `key:value` pairs.                                                              // 265
  _.where = function(obj, attrs, first) {                                                                // 266
    if (_.isEmpty(attrs)) return first ? void 0 : [];                                                    // 267
    return _[first ? 'find' : 'filter'](obj, function(value) {                                           // 268
      for (var key in attrs) {                                                                           // 269
        if (attrs[key] !== value[key]) return false;                                                     // 270
      }                                                                                                  // 271
      return true;                                                                                       // 272
    });                                                                                                  // 273
  };                                                                                                     // 274
                                                                                                         // 275
  // Convenience version of a common use case of `find`: getting the first object                        // 276
  // containing specific `key:value` pairs.                                                              // 277
  _.findWhere = function(obj, attrs) {                                                                   // 278
    return _.where(obj, attrs, true);                                                                    // 279
  };                                                                                                     // 280
                                                                                                         // 281
  // Return the maximum element or (element-based computation).                                          // 282
  // Can't optimize arrays of integers longer than 65,535 elements.                                      // 283
  // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)                               // 284
  _.max = function(obj, iterator, context) {                                                             // 285
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {                       // 286
      return Math.max.apply(Math, obj);                                                                  // 287
    }                                                                                                    // 288
    if (!iterator && _.isEmpty(obj)) return -Infinity;                                                   // 289
    var result = {computed : -Infinity, value: -Infinity};                                               // 290
    each(obj, function(value, index, list) {                                                             // 291
      var computed = iterator ? iterator.call(context, value, index, list) : value;                      // 292
      computed > result.computed && (result = {value : value, computed : computed});                     // 293
    });                                                                                                  // 294
    return result.value;                                                                                 // 295
  };                                                                                                     // 296
                                                                                                         // 297
  // Return the minimum element (or element-based computation).                                          // 298
  _.min = function(obj, iterator, context) {                                                             // 299
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {                       // 300
      return Math.min.apply(Math, obj);                                                                  // 301
    }                                                                                                    // 302
    if (!iterator && _.isEmpty(obj)) return Infinity;                                                    // 303
    var result = {computed : Infinity, value: Infinity};                                                 // 304
    each(obj, function(value, index, list) {                                                             // 305
      var computed = iterator ? iterator.call(context, value, index, list) : value;                      // 306
      computed < result.computed && (result = {value : value, computed : computed});                     // 307
    });                                                                                                  // 308
    return result.value;                                                                                 // 309
  };                                                                                                     // 310
                                                                                                         // 311
  // Shuffle an array, using the modern version of the                                                   // 312
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).                          // 313
  _.shuffle = function(obj) {                                                                            // 314
    var rand;                                                                                            // 315
    var index = 0;                                                                                       // 316
    var shuffled = [];                                                                                   // 317
    each(obj, function(value) {                                                                          // 318
      rand = _.random(index++);                                                                          // 319
      shuffled[index - 1] = shuffled[rand];                                                              // 320
      shuffled[rand] = value;                                                                            // 321
    });                                                                                                  // 322
    return shuffled;                                                                                     // 323
  };                                                                                                     // 324
                                                                                                         // 325
  // Sample **n** random values from an array.                                                           // 326
  // If **n** is not specified, returns a single random element from the array.                          // 327
  // The internal `guard` argument allows it to work with `map`.                                         // 328
  _.sample = function(obj, n, guard) {                                                                   // 329
    if (arguments.length < 2 || guard) {                                                                 // 330
      return obj[_.random(obj.length - 1)];                                                              // 331
    }                                                                                                    // 332
    return _.shuffle(obj).slice(0, Math.max(0, n));                                                      // 333
  };                                                                                                     // 334
                                                                                                         // 335
  // An internal function to generate lookup iterators.                                                  // 336
  var lookupIterator = function(value) {                                                                 // 337
    return _.isFunction(value) ? value : function(obj){ return obj[value]; };                            // 338
  };                                                                                                     // 339
                                                                                                         // 340
  // Sort the object's values by a criterion produced by an iterator.                                    // 341
  _.sortBy = function(obj, value, context) {                                                             // 342
    var iterator = lookupIterator(value);                                                                // 343
    return _.pluck(_.map(obj, function(value, index, list) {                                             // 344
      return {                                                                                           // 345
        value: value,                                                                                    // 346
        index: index,                                                                                    // 347
        criteria: iterator.call(context, value, index, list)                                             // 348
      };                                                                                                 // 349
    }).sort(function(left, right) {                                                                      // 350
      var a = left.criteria;                                                                             // 351
      var b = right.criteria;                                                                            // 352
      if (a !== b) {                                                                                     // 353
        if (a > b || a === void 0) return 1;                                                             // 354
        if (a < b || b === void 0) return -1;                                                            // 355
      }                                                                                                  // 356
      return left.index - right.index;                                                                   // 357
    }), 'value');                                                                                        // 358
  };                                                                                                     // 359
                                                                                                         // 360
  // An internal function used for aggregate "group by" operations.                                      // 361
  var group = function(behavior) {                                                                       // 362
    return function(obj, value, context) {                                                               // 363
      var result = {};                                                                                   // 364
      var iterator = value == null ? _.identity : lookupIterator(value);                                 // 365
      each(obj, function(value, index) {                                                                 // 366
        var key = iterator.call(context, value, index, obj);                                             // 367
        behavior(result, key, value);                                                                    // 368
      });                                                                                                // 369
      return result;                                                                                     // 370
    };                                                                                                   // 371
  };                                                                                                     // 372
                                                                                                         // 373
  // Groups the object's values by a criterion. Pass either a string attribute                           // 374
  // to group by, or a function that returns the criterion.                                              // 375
  _.groupBy = group(function(result, key, value) {                                                       // 376
    (_.has(result, key) ? result[key] : (result[key] = [])).push(value);                                 // 377
  });                                                                                                    // 378
                                                                                                         // 379
  // Indexes the object's values by a criterion, similar to `groupBy`, but for                           // 380
  // when you know that your index values will be unique.                                                // 381
  _.indexBy = group(function(result, key, value) {                                                       // 382
    result[key] = value;                                                                                 // 383
  });                                                                                                    // 384
                                                                                                         // 385
  // Counts instances of an object that group by a certain criterion. Pass                               // 386
  // either a string attribute to count by, or a function that returns the                               // 387
  // criterion.                                                                                          // 388
  _.countBy = group(function(result, key) {                                                              // 389
    _.has(result, key) ? result[key]++ : result[key] = 1;                                                // 390
  });                                                                                                    // 391
                                                                                                         // 392
  // Use a comparator function to figure out the smallest index at which                                 // 393
  // an object should be inserted so as to maintain order. Uses binary search.                           // 394
  _.sortedIndex = function(array, obj, iterator, context) {                                              // 395
    iterator = iterator == null ? _.identity : lookupIterator(iterator);                                 // 396
    var value = iterator.call(context, obj);                                                             // 397
    var low = 0, high = array.length;                                                                    // 398
    while (low < high) {                                                                                 // 399
      var mid = (low + high) >>> 1;                                                                      // 400
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;                           // 401
    }                                                                                                    // 402
    return low;                                                                                          // 403
  };                                                                                                     // 404
                                                                                                         // 405
  // Safely create a real, live array from anything iterable.                                            // 406
  _.toArray = function(obj) {                                                                            // 407
    if (!obj) return [];                                                                                 // 408
    if (_.isArray(obj)) return slice.call(obj);                                                          // 409
    if (looksLikeArray(obj)) return _.map(obj, _.identity);                                              // 410
    return _.values(obj);                                                                                // 411
  };                                                                                                     // 412
                                                                                                         // 413
  // Return the number of elements in an object.                                                         // 414
  _.size = function(obj) {                                                                               // 415
    if (obj == null) return 0;                                                                           // 416
    return (looksLikeArray(obj)) ? obj.length : _.keys(obj).length;                                      // 417
  };                                                                                                     // 418
                                                                                                         // 419
  // Array Functions                                                                                     // 420
  // ---------------                                                                                     // 421
                                                                                                         // 422
  // Get the first element of an array. Passing **n** will return the first N                            // 423
  // values in the array. Aliased as `head` and `take`. The **guard** check                              // 424
  // allows it to work with `_.map`.                                                                     // 425
  _.first = _.head = _.take = function(array, n, guard) {                                                // 426
    if (array == null) return void 0;                                                                    // 427
    return (n == null) || guard ? array[0] : slice.call(array, 0, n);                                    // 428
  };                                                                                                     // 429
                                                                                                         // 430
  // Returns everything but the last entry of the array. Especially useful on                            // 431
  // the arguments object. Passing **n** will return all the values in                                   // 432
  // the array, excluding the last N. The **guard** check allows it to work with                         // 433
  // `_.map`.                                                                                            // 434
  _.initial = function(array, n, guard) {                                                                // 435
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));                          // 436
  };                                                                                                     // 437
                                                                                                         // 438
  // Get the last element of an array. Passing **n** will return the last N                              // 439
  // values in the array. The **guard** check allows it to work with `_.map`.                            // 440
  _.last = function(array, n, guard) {                                                                   // 441
    if (array == null) return void 0;                                                                    // 442
    if ((n == null) || guard) {                                                                          // 443
      return array[array.length - 1];                                                                    // 444
    } else {                                                                                             // 445
      return slice.call(array, Math.max(array.length - n, 0));                                           // 446
    }                                                                                                    // 447
  };                                                                                                     // 448
                                                                                                         // 449
  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.                  // 450
  // Especially useful on the arguments object. Passing an **n** will return                             // 451
  // the rest N values in the array. The **guard**                                                       // 452
  // check allows it to work with `_.map`.                                                               // 453
  _.rest = _.tail = _.drop = function(array, n, guard) {                                                 // 454
    return slice.call(array, (n == null) || guard ? 1 : n);                                              // 455
  };                                                                                                     // 456
                                                                                                         // 457
  // Trim out all falsy values from an array.                                                            // 458
  _.compact = function(array) {                                                                          // 459
    return _.filter(array, _.identity);                                                                  // 460
  };                                                                                                     // 461
                                                                                                         // 462
  // Internal implementation of a recursive `flatten` function.                                          // 463
  var flatten = function(input, shallow, output) {                                                       // 464
    if (shallow && _.every(input, _.isArray)) {                                                          // 465
      return concat.apply(output, input);                                                                // 466
    }                                                                                                    // 467
    each(input, function(value) {                                                                        // 468
      if (_.isArray(value) || _.isArguments(value)) {                                                    // 469
        shallow ? push.apply(output, value) : flatten(value, shallow, output);                           // 470
      } else {                                                                                           // 471
        output.push(value);                                                                              // 472
      }                                                                                                  // 473
    });                                                                                                  // 474
    return output;                                                                                       // 475
  };                                                                                                     // 476
                                                                                                         // 477
  // Flatten out an array, either recursively (by default), or just one level.                           // 478
  _.flatten = function(array, shallow) {                                                                 // 479
    return flatten(array, shallow, []);                                                                  // 480
  };                                                                                                     // 481
                                                                                                         // 482
  // Return a version of the array that does not contain the specified value(s).                         // 483
  _.without = function(array) {                                                                          // 484
    return _.difference(array, slice.call(arguments, 1));                                                // 485
  };                                                                                                     // 486
                                                                                                         // 487
  // Produce a duplicate-free version of the array. If the array has already                             // 488
  // been sorted, you have the option of using a faster algorithm.                                       // 489
  // Aliased as `unique`.                                                                                // 490
  _.uniq = _.unique = function(array, isSorted, iterator, context) {                                     // 491
    if (_.isFunction(isSorted)) {                                                                        // 492
      context = iterator;                                                                                // 493
      iterator = isSorted;                                                                               // 494
      isSorted = false;                                                                                  // 495
    }                                                                                                    // 496
    var initial = iterator ? _.map(array, iterator, context) : array;                                    // 497
    var results = [];                                                                                    // 498
    var seen = [];                                                                                       // 499
    each(initial, function(value, index) {                                                               // 500
      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {           // 501
        seen.push(value);                                                                                // 502
        results.push(array[index]);                                                                      // 503
      }                                                                                                  // 504
    });                                                                                                  // 505
    return results;                                                                                      // 506
  };                                                                                                     // 507
                                                                                                         // 508
  // Produce an array that contains the union: each distinct element from all of                         // 509
  // the passed-in arrays.                                                                               // 510
  _.union = function() {                                                                                 // 511
    return _.uniq(_.flatten(arguments, true));                                                           // 512
  };                                                                                                     // 513
                                                                                                         // 514
  // Produce an array that contains every item shared between all the                                    // 515
  // passed-in arrays.                                                                                   // 516
  _.intersection = function(array) {                                                                     // 517
    var rest = slice.call(arguments, 1);                                                                 // 518
    return _.filter(_.uniq(array), function(item) {                                                      // 519
      return _.every(rest, function(other) {                                                             // 520
        return _.indexOf(other, item) >= 0;                                                              // 521
      });                                                                                                // 522
    });                                                                                                  // 523
  };                                                                                                     // 524
                                                                                                         // 525
  // Take the difference between one array and a number of other arrays.                                 // 526
  // Only the elements present in just the first array will remain.                                      // 527
  _.difference = function(array) {                                                                       // 528
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));                                       // 529
    return _.filter(array, function(value){ return !_.contains(rest, value); });                         // 530
  };                                                                                                     // 531
                                                                                                         // 532
  // Zip together multiple lists into a single array -- elements that share                              // 533
  // an index go together.                                                                               // 534
  _.zip = function() {                                                                                   // 535
    var length = _.max(_.pluck(arguments, "length").concat(0));                                          // 536
    var results = new Array(length);                                                                     // 537
    for (var i = 0; i < length; i++) {                                                                   // 538
      results[i] = _.pluck(arguments, '' + i);                                                           // 539
    }                                                                                                    // 540
    return results;                                                                                      // 541
  };                                                                                                     // 542
                                                                                                         // 543
  // Converts lists into objects. Pass either a single array of `[key, value]`                           // 544
  // pairs, or two parallel arrays of the same length -- one of keys, and one of                         // 545
  // the corresponding values.                                                                           // 546
  _.object = function(list, values) {                                                                    // 547
    if (list == null) return {};                                                                         // 548
    var result = {};                                                                                     // 549
    for (var i = 0, length = list.length; i < length; i++) {                                             // 550
      if (values) {                                                                                      // 551
        result[list[i]] = values[i];                                                                     // 552
      } else {                                                                                           // 553
        result[list[i][0]] = list[i][1];                                                                 // 554
      }                                                                                                  // 555
    }                                                                                                    // 556
    return result;                                                                                       // 557
  };                                                                                                     // 558
                                                                                                         // 559
  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),                       // 560
  // we need this function. Return the position of the first occurrence of an                            // 561
  // item in an array, or -1 if the item is not included in the array.                                   // 562
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.                                      // 563
  // If the array is large and already in sort order, pass `true`                                        // 564
  // for **isSorted** to use binary search.                                                              // 565
  _.indexOf = function(array, item, isSorted) {                                                          // 566
    if (array == null) return -1;                                                                        // 567
    var i = 0, length = array.length;                                                                    // 568
    if (isSorted) {                                                                                      // 569
      if (typeof isSorted == 'number') {                                                                 // 570
        i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);                                  // 571
      } else {                                                                                           // 572
        i = _.sortedIndex(array, item);                                                                  // 573
        return array[i] === item ? i : -1;                                                               // 574
      }                                                                                                  // 575
    }                                                                                                    // 576
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);          // 577
    for (; i < length; i++) if (array[i] === item) return i;                                             // 578
    return -1;                                                                                           // 579
  };                                                                                                     // 580
                                                                                                         // 581
  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.                                  // 582
  _.lastIndexOf = function(array, item, from) {                                                          // 583
    if (array == null) return -1;                                                                        // 584
    var hasIndex = from != null;                                                                         // 585
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {                                  // 586
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);                         // 587
    }                                                                                                    // 588
    var i = (hasIndex ? from : array.length);                                                            // 589
    while (i--) if (array[i] === item) return i;                                                         // 590
    return -1;                                                                                           // 591
  };                                                                                                     // 592
                                                                                                         // 593
  // Generate an integer Array containing an arithmetic progression. A port of                           // 594
  // the native Python `range()` function. See                                                           // 595
  // [the Python documentation](http://docs.python.org/library/functions.html#range).                    // 596
  _.range = function(start, stop, step) {                                                                // 597
    if (arguments.length <= 1) {                                                                         // 598
      stop = start || 0;                                                                                 // 599
      start = 0;                                                                                         // 600
    }                                                                                                    // 601
    step = arguments[2] || 1;                                                                            // 602
                                                                                                         // 603
    var length = Math.max(Math.ceil((stop - start) / step), 0);                                          // 604
    var idx = 0;                                                                                         // 605
    var range = new Array(length);                                                                       // 606
                                                                                                         // 607
    while(idx < length) {                                                                                // 608
      range[idx++] = start;                                                                              // 609
      start += step;                                                                                     // 610
    }                                                                                                    // 611
                                                                                                         // 612
    return range;                                                                                        // 613
  };                                                                                                     // 614
                                                                                                         // 615
  // Function (ahem) Functions                                                                           // 616
  // ------------------                                                                                  // 617
                                                                                                         // 618
  // Reusable constructor function for prototype setting.                                                // 619
  var ctor = function(){};                                                                               // 620
                                                                                                         // 621
  // Create a function bound to a given object (assigning `this`, and arguments,                         // 622
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if                              // 623
  // available.                                                                                          // 624
  _.bind = function(func, context) {                                                                     // 625
    var args, bound;                                                                                     // 626
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError;                                                        // 628
    args = slice.call(arguments, 2);                                                                     // 629
    return bound = function() {                                                                          // 630
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));      // 631
      ctor.prototype = func.prototype;                                                                   // 632
      var self = new ctor;                                                                               // 633
      ctor.prototype = null;                                                                             // 634
      var result = func.apply(self, args.concat(slice.call(arguments)));                                 // 635
      if (Object(result) === result) return result;                                                      // 636
      return self;                                                                                       // 637
    };                                                                                                   // 638
  };                                                                                                     // 639
                                                                                                         // 640
  // Partially apply a function by creating a version that has had some of its                           // 641
  // arguments pre-filled, without changing its dynamic `this` context.                                  // 642
  _.partial = function(func) {                                                                           // 643
    var args = slice.call(arguments, 1);                                                                 // 644
    return function() {                                                                                  // 645
      return func.apply(this, args.concat(slice.call(arguments)));                                       // 646
    };                                                                                                   // 647
  };                                                                                                     // 648
                                                                                                         // 649
  // Bind all of an object's methods to that object. Useful for ensuring that                            // 650
  // all callbacks defined on an object belong to it.                                                    // 651
  _.bindAll = function(obj) {                                                                            // 652
    var funcs = slice.call(arguments, 1);                                                                // 653
    if (funcs.length === 0) throw new Error("bindAll must be passed function names");                    // 654
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });                                          // 655
    return obj;                                                                                          // 656
  };                                                                                                     // 657
                                                                                                         // 658
  // Memoize an expensive function by storing its results.                                               // 659
  _.memoize = function(func, hasher) {                                                                   // 660
    var memo = {};                                                                                       // 661
    hasher || (hasher = _.identity);                                                                     // 662
    return function() {                                                                                  // 663
      var key = hasher.apply(this, arguments);                                                           // 664
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));                   // 665
    };                                                                                                   // 666
  };                                                                                                     // 667
                                                                                                         // 668
  // Delays a function for the given number of milliseconds, and then calls                              // 669
  // it with the arguments supplied.                                                                     // 670
  _.delay = function(func, wait) {                                                                       // 671
    var args = slice.call(arguments, 2);                                                                 // 672
    return setTimeout(function(){ return func.apply(null, args); }, wait);                               // 673
  };                                                                                                     // 674
                                                                                                         // 675
  // Defers a function, scheduling it to run after the current call stack has                            // 676
  // cleared.                                                                                            // 677
  _.defer = function(func) {                                                                             // 678
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));                                 // 679
  };                                                                                                     // 680
                                                                                                         // 681
  // Returns a function, that, when invoked, will only be triggered at most once                         // 682
  // during a given window of time. Normally, the throttled function will run                            // 683
  // as much as it can, without ever going more than once per `wait` duration;                           // 684
  // but if you'd like to disable the execution on the leading edge, pass                                // 685
  // `{leading: false}`. To disable execution on the trailing edge, ditto.                               // 686
  _.throttle = function(func, wait, options) {                                                           // 687
    var context, args, result;                                                                           // 688
    var timeout = null;                                                                                  // 689
    var previous = 0;                                                                                    // 690
    options || (options = {});                                                                           // 691
    var later = function() {                                                                             // 692
      previous = options.leading === false ? 0 : new Date;                                               // 693
      timeout = null;                                                                                    // 694
      result = func.apply(context, args);                                                                // 695
    };                                                                                                   // 696
    return function() {                                                                                  // 697
      var now = new Date;                                                                                // 698
      if (!previous && options.leading === false) previous = now;                                        // 699
      var remaining = wait - (now - previous);                                                           // 700
      context = this;                                                                                    // 701
      args = arguments;                                                                                  // 702
      if (remaining <= 0) {                                                                              // 703
        clearTimeout(timeout);                                                                           // 704
        timeout = null;                                                                                  // 705
        previous = now;                                                                                  // 706
        result = func.apply(context, args);                                                              // 707
      } else if (!timeout && options.trailing !== false) {                                               // 708
        timeout = setTimeout(later, remaining);                                                          // 709
      }                                                                                                  // 710
      return result;                                                                                     // 711
    };                                                                                                   // 712
  };                                                                                                     // 713
                                                                                                         // 714
  // Returns a function, that, as long as it continues to be invoked, will not                           // 715
  // be triggered. The function will be called after it stops being called for                           // 716
  // N milliseconds. If `immediate` is passed, trigger the function on the                               // 717
  // leading edge, instead of the trailing.                                                              // 718
  _.debounce = function(func, wait, immediate) {                                                         // 719
    var timeout, args, context, timestamp, result;                                                       // 720
    return function() {                                                                                  // 721
      context = this;                                                                                    // 722
      args = arguments;                                                                                  // 723
      timestamp = new Date();                                                                            // 724
      var later = function() {                                                                           // 725
        var last = (new Date()) - timestamp;                                                             // 726
        if (last < wait) {                                                                               // 727
          timeout = setTimeout(later, wait - last);                                                      // 728
        } else {                                                                                         // 729
          timeout = null;                                                                                // 730
          if (!immediate) result = func.apply(context, args);                                            // 731
        }                                                                                                // 732
      };                                                                                                 // 733
      var callNow = immediate && !timeout;                                                               // 734
      if (!timeout) {                                                                                    // 735
        timeout = setTimeout(later, wait);                                                               // 736
      }                                                                                                  // 737
      if (callNow) result = func.apply(context, args);                                                   // 738
      return result;                                                                                     // 739
    };                                                                                                   // 740
  };                                                                                                     // 741
                                                                                                         // 742
  // Returns a function that will be executed at most one time, no matter how                            // 743
  // often you call it. Useful for lazy initialization.                                                  // 744
  _.once = function(func) {                                                                              // 745
    var ran = false, memo;                                                                               // 746
    return function() {                                                                                  // 747
      if (ran) return memo;                                                                              // 748
      ran = true;                                                                                        // 749
      memo = func.apply(this, arguments);                                                                // 750
      func = null;                                                                                       // 751
      return memo;                                                                                       // 752
    };                                                                                                   // 753
  };                                                                                                     // 754
                                                                                                         // 755
  // Returns the first function passed as an argument to the second,                                     // 756
  // allowing you to adjust arguments, run code before and after, and                                    // 757
  // conditionally execute the original function.                                                        // 758
  _.wrap = function(func, wrapper) {                                                                     // 759
    return function() {                                                                                  // 760
      var args = [func];                                                                                 // 761
      push.apply(args, arguments);                                                                       // 762
      return wrapper.apply(this, args);                                                                  // 763
    };                                                                                                   // 764
  };                                                                                                     // 765
                                                                                                         // 766
  // Returns a function that is the composition of a list of functions, each                             // 767
  // consuming the return value of the function that follows.                                            // 768
  _.compose = function() {                                                                               // 769
    var funcs = arguments;                                                                               // 770
    return function() {                                                                                  // 771
      var args = arguments;                                                                              // 772
      for (var i = funcs.length - 1; i >= 0; i--) {                                                      // 773
        args = [funcs[i].apply(this, args)];                                                             // 774
      }                                                                                                  // 775
      return args[0];                                                                                    // 776
    };                                                                                                   // 777
  };                                                                                                     // 778
                                                                                                         // 779
  // Returns a function that will only be executed after being called N times.                           // 780
  _.after = function(times, func) {                                                                      // 781
    return function() {                                                                                  // 782
      if (--times < 1) {                                                                                 // 783
        return func.apply(this, arguments);                                                              // 784
      }                                                                                                  // 785
    };                                                                                                   // 786
  };                                                                                                     // 787
                                                                                                         // 788
  // Object Functions                                                                                    // 789
  // ----------------                                                                                    // 790
                                                                                                         // 791
  // Retrieve the names of an object's properties.                                                       // 792
  // Delegates to **ECMAScript 5**'s native `Object.keys`                                                // 793
  _.keys = nativeKeys || function(obj) {                                                                 // 794
    if (obj !== Object(obj)) throw new TypeError('Invalid object');                                      // 795
    var keys = [];                                                                                       // 796
    for (var key in obj) if (_.has(obj, key)) keys.push(key);                                            // 797
    return keys;                                                                                         // 798
  };                                                                                                     // 799
                                                                                                         // 800
  // Retrieve the values of an object's properties.                                                      // 801
  _.values = function(obj) {                                                                             // 802
    var keys = _.keys(obj);                                                                              // 803
    var length = keys.length;                                                                            // 804
    var values = new Array(length);                                                                      // 805
    for (var i = 0; i < length; i++) {                                                                   // 806
      values[i] = obj[keys[i]];                                                                          // 807
    }                                                                                                    // 808
    return values;                                                                                       // 809
  };                                                                                                     // 810
                                                                                                         // 811
  // Convert an object into a list of `[key, value]` pairs.                                              // 812
  _.pairs = function(obj) {                                                                              // 813
    var keys = _.keys(obj);                                                                              // 814
    var length = keys.length;                                                                            // 815
    var pairs = new Array(length);                                                                       // 816
    for (var i = 0; i < length; i++) {                                                                   // 817
      pairs[i] = [keys[i], obj[keys[i]]];                                                                // 818
    }                                                                                                    // 819
    return pairs;                                                                                        // 820
  };                                                                                                     // 821
                                                                                                         // 822
  // Invert the keys and values of an object. The values must be serializable.                           // 823
  _.invert = function(obj) {                                                                             // 824
    var result = {};                                                                                     // 825
    var keys = _.keys(obj);                                                                              // 826
    for (var i = 0, length = keys.length; i < length; i++) {                                             // 827
      result[obj[keys[i]]] = keys[i];                                                                    // 828
    }                                                                                                    // 829
    return result;                                                                                       // 830
  };                                                                                                     // 831
                                                                                                         // 832
  // Return a sorted list of the function names available on the object.                                 // 833
  // Aliased as `methods`                                                                                // 834
  _.functions = _.methods = function(obj) {                                                              // 835
    var names = [];                                                                                      // 836
    for (var key in obj) {                                                                               // 837
      if (_.isFunction(obj[key])) names.push(key);                                                       // 838
    }                                                                                                    // 839
    return names.sort();                                                                                 // 840
  };                                                                                                     // 841
                                                                                                         // 842
  // Extend a given object with all the properties in passed-in object(s).                               // 843
  _.extend = function(obj) {                                                                             // 844
    each(slice.call(arguments, 1), function(source) {                                                    // 845
      if (source) {                                                                                      // 846
        for (var prop in source) {                                                                       // 847
          obj[prop] = source[prop];                                                                      // 848
        }                                                                                                // 849
      }                                                                                                  // 850
    });                                                                                                  // 851
    return obj;                                                                                          // 852
  };                                                                                                     // 853
                                                                                                         // 854
  // Return a copy of the object only containing the whitelisted properties.                             // 855
  _.pick = function(obj) {                                                                               // 856
    var copy = {};                                                                                       // 857
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));                                       // 858
    each(keys, function(key) {                                                                           // 859
      if (key in obj) copy[key] = obj[key];                                                              // 860
    });                                                                                                  // 861
    return copy;                                                                                         // 862
  };                                                                                                     // 863
                                                                                                         // 864
   // Return a copy of the object without the blacklisted properties.                                    // 865
  _.omit = function(obj) {                                                                               // 866
    var copy = {};                                                                                       // 867
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));                                       // 868
    for (var key in obj) {                                                                               // 869
      if (!_.contains(keys, key)) copy[key] = obj[key];                                                  // 870
    }                                                                                                    // 871
    return copy;                                                                                         // 872
  };                                                                                                     // 873
                                                                                                         // 874
  // Fill in a given object with default properties.                                                     // 875
  _.defaults = function(obj) {                                                                           // 876
    each(slice.call(arguments, 1), function(source) {                                                    // 877
      if (source) {                                                                                      // 878
        for (var prop in source) {                                                                       // 879
          if (obj[prop] === void 0) obj[prop] = source[prop];                                            // 880
        }                                                                                                // 881
      }                                                                                                  // 882
    });                                                                                                  // 883
    return obj;                                                                                          // 884
  };                                                                                                     // 885
                                                                                                         // 886
  // Create a (shallow-cloned) duplicate of an object.                                                   // 887
  _.clone = function(obj) {                                                                              // 888
    if (!_.isObject(obj)) return obj;                                                                    // 889
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);                                             // 890
  };                                                                                                     // 891
                                                                                                         // 892
  // Invokes interceptor with the obj, and then returns obj.                                             // 893
  // The primary purpose of this method is to "tap into" a method chain, in                              // 894
  // order to perform operations on intermediate results within the chain.                               // 895
  _.tap = function(obj, interceptor) {                                                                   // 896
    interceptor(obj);                                                                                    // 897
    return obj;                                                                                          // 898
  };                                                                                                     // 899
                                                                                                         // 900
  // Internal recursive comparison function for `isEqual`.                                               // 901
  var eq = function(a, b, aStack, bStack) {                                                              // 902
    // Identical objects are equal. `0 === -0`, but they aren't identical.                               // 903
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).           // 904
    if (a === b) return a !== 0 || 1 / a == 1 / b;                                                       // 905
    // A strict comparison is necessary because `null == undefined`.                                     // 906
    if (a == null || b == null) return a === b;                                                          // 907
    // Unwrap any wrapped objects.                                                                       // 908
    if (a instanceof _) a = a._wrapped;                                                                  // 909
    if (b instanceof _) b = b._wrapped;                                                                  // 910
    // Compare `[[Class]]` names.                                                                        // 911
    var className = toString.call(a);                                                                    // 912
    if (className != toString.call(b)) return false;                                                     // 913
    switch (className) {                                                                                 // 914
      // Strings, numbers, dates, and booleans are compared by value.                                    // 915
      case '[object String]':                                                                            // 916
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is             // 917
        // equivalent to `new String("5")`.                                                              // 918
        return a == String(b);                                                                           // 919
      case '[object Number]':                                                                            // 920
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for               // 921
        // other numeric values.                                                                         // 922
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);                                  // 923
      case '[object Date]':                                                                              // 924
      case '[object Boolean]':                                                                           // 925
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their            // 926
        // millisecond representations. Note that invalid dates with millisecond representations         // 927
        // of `NaN` are not equivalent.                                                                  // 928
        return +a == +b;                                                                                 // 929
      // RegExps are compared by their source patterns and flags.                                        // 930
      case '[object RegExp]':                                                                            // 931
        return a.source == b.source &&                                                                   // 932
               a.global == b.global &&                                                                   // 933
               a.multiline == b.multiline &&                                                             // 934
               a.ignoreCase == b.ignoreCase;                                                             // 935
    }                                                                                                    // 936
    if (typeof a != 'object' || typeof b != 'object') return false;                                      // 937
    // Assume equality for cyclic structures. The algorithm for detecting cyclic                         // 938
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.                       // 939
    var length = aStack.length;                                                                          // 940
    while (length--) {                                                                                   // 941
      // Linear search. Performance is inversely proportional to the number of                           // 942
      // unique nested structures.                                                                       // 943
      if (aStack[length] == a) return bStack[length] == b;                                               // 944
    }                                                                                                    // 945
    // Objects with different constructors are not equivalent, but `Object`s                             // 946
    // from different frames are.                                                                        // 947
    var aCtor = a.constructor, bCtor = b.constructor;                                                    // 948
    if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&                          // 949
                             _.isFunction(bCtor) && (bCtor instanceof bCtor))) {                         // 950
      return false;                                                                                      // 951
    }                                                                                                    // 952
    // Add the first object to the stack of traversed objects.                                           // 953
    aStack.push(a);                                                                                      // 954
    bStack.push(b);                                                                                      // 955
    var size = 0, result = true;                                                                         // 956
    // Recursively compare objects and arrays.                                                           // 957
    if (className == '[object Array]') {                                                                 // 958
      // Compare array lengths to determine if a deep comparison is necessary.                           // 959
      size = a.length;                                                                                   // 960
      result = size == b.length;                                                                         // 961
      if (result) {                                                                                      // 962
        // Deep compare the contents, ignoring non-numeric properties.                                   // 963
        while (size--) {                                                                                 // 964
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;                                   // 965
        }                                                                                                // 966
      }                                                                                                  // 967
    } else {                                                                                             // 968
      // Deep compare objects.                                                                           // 969
      for (var key in a) {                                                                               // 970
        if (_.has(a, key)) {                                                                             // 971
          // Count the expected number of properties.                                                    // 972
          size++;                                                                                        // 973
          // Deep compare each member.                                                                   // 974
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;                    // 975
        }                                                                                                // 976
      }                                                                                                  // 977
      // Ensure that both objects contain the same number of properties.                                 // 978
      if (result) {                                                                                      // 979
        for (key in b) {                                                                                 // 980
          if (_.has(b, key) && !(size--)) break;                                                         // 981
        }                                                                                                // 982
        result = !size;                                                                                  // 983
      }                                                                                                  // 984
    }                                                                                                    // 985
    // Remove the first object from the stack of traversed objects.                                      // 986
    aStack.pop();                                                                                        // 987
    bStack.pop();                                                                                        // 988
    return result;                                                                                       // 989
  };                                                                                                     // 990
                                                                                                         // 991
  // Perform a deep comparison to check if two objects are equal.                                        // 992
  _.isEqual = function(a, b) {                                                                           // 993
    return eq(a, b, [], []);                                                                             // 994
  };                                                                                                     // 995
                                                                                                         // 996
  // Is a given array, string, or object empty?                                                          // 997
  // An "empty" object has no enumerable own-properties.                                                 // 998
  _.isEmpty = function(obj) {                                                                            // 999
    if (obj == null) return true;                                                                        // 1000
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;                                      // 1001
    for (var key in obj) if (_.has(obj, key)) return false;                                              // 1002
    return true;                                                                                         // 1003
  };                                                                                                     // 1004
                                                                                                         // 1005
  // Is a given value a DOM element?                                                                     // 1006
  _.isElement = function(obj) {                                                                          // 1007
    return !!(obj && obj.nodeType === 1);                                                                // 1008
  };                                                                                                     // 1009
                                                                                                         // 1010
  // Is a given value an array?                                                                          // 1011
  // Delegates to ECMA5's native Array.isArray                                                           // 1012
  _.isArray = nativeIsArray || function(obj) {                                                           // 1013
    return toString.call(obj) == '[object Array]';                                                       // 1014
  };                                                                                                     // 1015
                                                                                                         // 1016
  // Is a given variable an object?                                                                      // 1017
  _.isObject = function(obj) {                                                                           // 1018
    return obj === Object(obj);                                                                          // 1019
  };                                                                                                     // 1020
                                                                                                         // 1021
  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.             // 1022
  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {                 // 1023
    _['is' + name] = function(obj) {                                                                     // 1024
      return toString.call(obj) == '[object ' + name + ']';                                              // 1025
    };                                                                                                   // 1026
  });                                                                                                    // 1027
                                                                                                         // 1028
  // Define a fallback version of the method in browsers (ahem, IE), where                               // 1029
  // there isn't any inspectable "Arguments" type.                                                       // 1030
  if (!_.isArguments(arguments)) {                                                                       // 1031
    _.isArguments = function(obj) {                                                                      // 1032
      return !!(obj && _.has(obj, 'callee'));                                                            // 1033
    };                                                                                                   // 1034
  }                                                                                                      // 1035
                                                                                                         // 1036
  // Optimize `isFunction` if appropriate.                                                               // 1037
  if (typeof (/./) !== 'function') {                                                                     // 1038
    _.isFunction = function(obj) {                                                                       // 1039
      return typeof obj === 'function';                                                                  // 1040
    };                                                                                                   // 1041
  }                                                                                                      // 1042
                                                                                                         // 1043
  // Is a given object a finite number?                                                                  // 1044
  _.isFinite = function(obj) {                                                                           // 1045
    return isFinite(obj) && !isNaN(parseFloat(obj));                                                     // 1046
  };                                                                                                     // 1047
                                                                                                         // 1048
  // Is the given value `NaN`? (NaN is the only number which does not equal itself).                     // 1049
  _.isNaN = function(obj) {                                                                              // 1050
    return _.isNumber(obj) && obj != +obj;                                                               // 1051
  };                                                                                                     // 1052
                                                                                                         // 1053
  // Is a given value a boolean?                                                                         // 1054
  _.isBoolean = function(obj) {                                                                          // 1055
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';                    // 1056
  };                                                                                                     // 1057
                                                                                                         // 1058
  // Is a given value equal to null?                                                                     // 1059
  _.isNull = function(obj) {                                                                             // 1060
    return obj === null;                                                                                 // 1061
  };                                                                                                     // 1062
                                                                                                         // 1063
  // Is a given variable undefined?                                                                      // 1064
  _.isUndefined = function(obj) {                                                                        // 1065
    return obj === void 0;                                                                               // 1066
  };                                                                                                     // 1067
                                                                                                         // 1068
  // Shortcut function for checking if an object has a given property directly                           // 1069
  // on itself (in other words, not on a prototype).                                                     // 1070
  _.has = function(obj, key) {                                                                           // 1071
    return hasOwnProperty.call(obj, key);                                                                // 1072
  };                                                                                                     // 1073
                                                                                                         // 1074
  // Utility Functions                                                                                   // 1075
  // -----------------                                                                                   // 1076
                                                                                                         // 1077
  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its                           // 1078
  // previous owner. Returns a reference to the Underscore object.                                       // 1079
  _.noConflict = function() {                                                                            // 1080
    root._ = previousUnderscore;                                                                         // 1081
    return this;                                                                                         // 1082
  };                                                                                                     // 1083
                                                                                                         // 1084
  // Keep the identity function around for default iterators.                                            // 1085
  _.identity = function(value) {                                                                         // 1086
    return value;                                                                                        // 1087
  };                                                                                                     // 1088
                                                                                                         // 1089
  // Run a function **n** times.                                                                         // 1090
  _.times = function(n, iterator, context) {                                                             // 1091
    var accum = Array(Math.max(0, n));                                                                   // 1092
    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);                                    // 1093
    return accum;                                                                                        // 1094
  };                                                                                                     // 1095
                                                                                                         // 1096
  // Return a random integer between min and max (inclusive).                                            // 1097
  _.random = function(min, max) {                                                                        // 1098
    if (max == null) {                                                                                   // 1099
      max = min;                                                                                         // 1100
      min = 0;                                                                                           // 1101
    }                                                                                                    // 1102
    return min + Math.floor(Math.random() * (max - min + 1));                                            // 1103
  };                                                                                                     // 1104
                                                                                                         // 1105
  // List of HTML entities for escaping.                                                                 // 1106
  var entityMap = {                                                                                      // 1107
    escape: {                                                                                            // 1108
      '&': '&amp;',                                                                                      // 1109
      '<': '&lt;',                                                                                       // 1110
      '>': '&gt;',                                                                                       // 1111
      '"': '&quot;',                                                                                     // 1112
      "'": '&#x27;'                                                                                      // 1113
    }                                                                                                    // 1114
  };                                                                                                     // 1115
  entityMap.unescape = _.invert(entityMap.escape);                                                       // 1116
                                                                                                         // 1117
  // Regexes containing the keys and values listed immediately above.                                    // 1118
  var entityRegexes = {                                                                                  // 1119
    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),                            // 1120
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')                          // 1121
  };                                                                                                     // 1122
                                                                                                         // 1123
  // Functions for escaping and unescaping strings to/from HTML interpolation.                           // 1124
  _.each(['escape', 'unescape'], function(method) {                                                      // 1125
    _[method] = function(string) {                                                                       // 1126
      if (string == null) return '';                                                                     // 1127
      return ('' + string).replace(entityRegexes[method], function(match) {                              // 1128
        return entityMap[method][match];                                                                 // 1129
      });                                                                                                // 1130
    };                                                                                                   // 1131
  });                                                                                                    // 1132
                                                                                                         // 1133
  // If the value of the named `property` is a function then invoke it with the                          // 1134
  // `object` as context; otherwise, return it.                                                          // 1135
  _.result = function(object, property) {                                                                // 1136
    if (object == null) return void 0;                                                                   // 1137
    var value = object[property];                                                                        // 1138
    return _.isFunction(value) ? value.call(object) : value;                                             // 1139
  };                                                                                                     // 1140
                                                                                                         // 1141
  // Add your own custom functions to the Underscore object.                                             // 1142
  _.mixin = function(obj) {                                                                              // 1143
    each(_.functions(obj), function(name) {                                                              // 1144
      var func = _[name] = obj[name];                                                                    // 1145
      _.prototype[name] = function() {                                                                   // 1146
        var args = [this._wrapped];                                                                      // 1147
        push.apply(args, arguments);                                                                     // 1148
        return result.call(this, func.apply(_, args));                                                   // 1149
      };                                                                                                 // 1150
    });                                                                                                  // 1151
  };                                                                                                     // 1152
                                                                                                         // 1153
  // Generate a unique integer id (unique within the entire client session).                             // 1154
  // Useful for temporary DOM ids.                                                                       // 1155
  var idCounter = 0;                                                                                     // 1156
  _.uniqueId = function(prefix) {                                                                        // 1157
    var id = ++idCounter + '';                                                                           // 1158
    return prefix ? prefix + id : id;                                                                    // 1159
  };                                                                                                     // 1160
                                                                                                         // 1161
  // By default, Underscore uses ERB-style template delimiters, change the                               // 1162
  // following template settings to use alternative delimiters.                                          // 1163
  _.templateSettings = {                                                                                 // 1164
    evaluate    : /<%([\s\S]+?)%>/g,                                                                     // 1165
    interpolate : /<%=([\s\S]+?)%>/g,                                                                    // 1166
    escape      : /<%-([\s\S]+?)%>/g                                                                     // 1167
  };                                                                                                     // 1168
                                                                                                         // 1169
  // When customizing `templateSettings`, if you don't want to define an                                 // 1170
  // interpolation, evaluation or escaping regex, we need one that is                                    // 1171
  // guaranteed not to match.                                                                            // 1172
  var noMatch = /(.)^/;                                                                                  // 1173
                                                                                                         // 1174
  // Certain characters need to be escaped so that they can be put into a                                // 1175
  // string literal.                                                                                     // 1176
  var escapes = {                                                                                        // 1177
    "'":      "'",                                                                                       // 1178
    '\\':     '\\',                                                                                      // 1179
    '\r':     'r',                                                                                       // 1180
    '\n':     'n',                                                                                       // 1181
    '\t':     't',                                                                                       // 1182
    '\u2028': 'u2028',                                                                                   // 1183
    '\u2029': 'u2029'                                                                                    // 1184
  };                                                                                                     // 1185
                                                                                                         // 1186
  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;                                                          // 1187
                                                                                                         // 1188
  // JavaScript micro-templating, similar to John Resig's implementation.                                // 1189
  // Underscore templating handles arbitrary delimiters, preserves whitespace,                           // 1190
  // and correctly escapes quotes within interpolated code.                                              // 1191
  _.template = function(text, data, settings) {                                                          // 1192
    var render;                                                                                          // 1193
    settings = _.defaults({}, settings, _.templateSettings);                                             // 1194
                                                                                                         // 1195
    // Combine delimiters into one regular expression via alternation.                                   // 1196
    var matcher = new RegExp([                                                                           // 1197
      (settings.escape || noMatch).source,                                                               // 1198
      (settings.interpolate || noMatch).source,                                                          // 1199
      (settings.evaluate || noMatch).source                                                              // 1200
    ].join('|') + '|$', 'g');                                                                            // 1201
                                                                                                         // 1202
    // Compile the template source, escaping string literals appropriately.                              // 1203
    var index = 0;                                                                                       // 1204
    var source = "__p+='";                                                                               // 1205
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {                       // 1206
      source += text.slice(index, offset)                                                                // 1207
        .replace(escaper, function(match) { return '\\' + escapes[match]; });                            // 1208
                                                                                                         // 1209
      if (escape) {                                                                                      // 1210
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";                             // 1211
      }                                                                                                  // 1212
      if (interpolate) {                                                                                 // 1213
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";                                  // 1214
      }                                                                                                  // 1215
      if (evaluate) {                                                                                    // 1216
        source += "';\n" + evaluate + "\n__p+='";                                                        // 1217
      }                                                                                                  // 1218
      index = offset + match.length;                                                                     // 1219
      return match;                                                                                      // 1220
    });                                                                                                  // 1221
    source += "';\n";                                                                                    // 1222
                                                                                                         // 1223
    // If a variable is not specified, place data values in local scope.                                 // 1224
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';                                // 1225
                                                                                                         // 1226
    source = "var __t,__p='',__j=Array.prototype.join," +                                                // 1227
      "print=function(){__p+=__j.call(arguments,'');};\n" +                                              // 1228
      source + "return __p;\n";                                                                          // 1229
                                                                                                         // 1230
    try {                                                                                                // 1231
      render = new Function(settings.variable || 'obj', '_', source);                                    // 1232
    } catch (e) {                                                                                        // 1233
      e.source = source;                                                                                 // 1234
      throw e;                                                                                           // 1235
    }                                                                                                    // 1236
                                                                                                         // 1237
    if (data) return render(data, _);                                                                    // 1238
    var template = function(data) {                                                                      // 1239
      return render.call(this, data, _);                                                                 // 1240
    };                                                                                                   // 1241
                                                                                                         // 1242
    // Provide the compiled function source as a convenience for precompilation.                         // 1243
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';                // 1244
                                                                                                         // 1245
    return template;                                                                                     // 1246
  };                                                                                                     // 1247
                                                                                                         // 1248
  // Add a "chain" function, which will delegate to the wrapper.                                         // 1249
  _.chain = function(obj) {                                                                              // 1250
    return _(obj).chain();                                                                               // 1251
  };                                                                                                     // 1252
                                                                                                         // 1253
  // OOP                                                                                                 // 1254
  // ---------------                                                                                     // 1255
  // If Underscore is called as a function, it returns a wrapped object that                             // 1256
  // can be used OO-style. This wrapper holds altered versions of all the                                // 1257
  // underscore functions. Wrapped objects may be chained.                                               // 1258
                                                                                                         // 1259
  // Helper function to continue chaining intermediate results.                                          // 1260
  var result = function(obj) {                                                                           // 1261
    return this._chain ? _(obj).chain() : obj;                                                           // 1262
  };                                                                                                     // 1263
                                                                                                         // 1264
  // Add all of the Underscore functions to the wrapper object.                                          // 1265
  _.mixin(_);                                                                                            // 1266
                                                                                                         // 1267
  // Add all mutator Array functions to the wrapper.                                                     // 1268
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {                // 1269
    var method = ArrayProto[name];                                                                       // 1270
    _.prototype[name] = function() {                                                                     // 1271
      var obj = this._wrapped;                                                                           // 1272
      method.apply(obj, arguments);                                                                      // 1273
      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];                      // 1274
      return result.call(this, obj);                                                                     // 1275
    };                                                                                                   // 1276
  });                                                                                                    // 1277
                                                                                                         // 1278
  // Add all accessor Array functions to the wrapper.                                                    // 1279
  each(['concat', 'join', 'slice'], function(name) {                                                     // 1280
    var method = ArrayProto[name];                                                                       // 1281
    _.prototype[name] = function() {                                                                     // 1282
      return result.call(this, method.apply(this._wrapped, arguments));                                  // 1283
    };                                                                                                   // 1284
  });                                                                                                    // 1285
                                                                                                         // 1286
  _.extend(_.prototype, {                                                                                // 1287
                                                                                                         // 1288
    // Start chaining a wrapped Underscore object.                                                       // 1289
    chain: function() {                                                                                  // 1290
      this._chain = true;                                                                                // 1291
      return this;                                                                                       // 1292
    },                                                                                                   // 1293
                                                                                                         // 1294
    // Extracts the result from a wrapped and chained object.                                            // 1295
    value: function() {                                                                                  // 1296
      return this._wrapped;                                                                              // 1297
    }                                                                                                    // 1298
                                                                                                         // 1299
  });                                                                                                    // 1300
                                                                                                         // 1301
}).call(this);                                                                                           // 1302
                                                                                                         // 1303
///////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                       //
// packages/underscore/post.js                                                                           //
//                                                                                                       //
///////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                         //
// This exports object was created in pre.js.  Now copy the `_` object from it                           // 1
// into the package-scope variable `_`, which will get exported.                                         // 2
_ = exports._;                                                                                           // 3
                                                                                                         // 4
///////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.underscore = {
  _: _
};

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var _ = Package.underscore._;

/* Package-scope variables */
var Meteor;

(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/meteor/client_environment.js                                                                  //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
/**                                                                                                       // 1
 * @summary The Meteor namespace                                                                          // 2
 * @namespace Meteor                                                                                      // 3
 */                                                                                                       // 4
Meteor = {                                                                                                // 5
                                                                                                          // 6
  /**                                                                                                     // 7
   * @summary Boolean variable.  True if running in client environment.                                   // 8
   * @locus Anywhere                                                                                      // 9
   * @static                                                                                              // 10
   * @type {Boolean}                                                                                      // 11
   */                                                                                                     // 12
  isClient: true,                                                                                         // 13
                                                                                                          // 14
  /**                                                                                                     // 15
   * @summary Boolean variable.  True if running in server environment.                                   // 16
   * @locus Anywhere                                                                                      // 17
   * @static                                                                                              // 18
   * @type {Boolean}                                                                                      // 19
   */                                                                                                     // 20
  isServer: false,                                                                                        // 21
  isCordova: false                                                                                        // 22
};                                                                                                        // 23
                                                                                                          // 24
if (typeof __meteor_runtime_config__ === 'object' &&                                                      // 25
    __meteor_runtime_config__.PUBLIC_SETTINGS) {                                                          // 26
  /**                                                                                                     // 27
   * @summary `Meteor.settings` contains deployment-specific configuration options. You can initialize settings by passing the `--settings` option (which takes the name of a file containing JSON data) to `meteor run` or `meteor deploy`. When running your server directly (e.g. from a bundle), you instead specify settings by putting the JSON directly into the `METEOR_SETTINGS` environment variable. If the settings object contains a key named `public`, then `Meteor.settings.public` will be available on the client as well as the server.  All other properties of `Meteor.settings` are only defined on the server.  You can rely on `Meteor.settings` and `Meteor.settings.public` being defined objects (not undefined) on both client and server even if there are no settings specified.  Changes to `Meteor.settings.public` at runtime will be picked up by new client connections.
   * @locus Anywhere                                                                                      // 29
   * @type {Object}                                                                                       // 30
   */                                                                                                     // 31
  Meteor.settings = { 'public': __meteor_runtime_config__.PUBLIC_SETTINGS };                              // 32
}                                                                                                         // 33
                                                                                                          // 34
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/meteor/helpers.js                                                                             //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
if (Meteor.isServer)                                                                                      // 1
  var Future = Npm.require('fibers/future');                                                              // 2
                                                                                                          // 3
if (typeof __meteor_runtime_config__ === 'object' &&                                                      // 4
    __meteor_runtime_config__.meteorRelease) {                                                            // 5
  /**                                                                                                     // 6
   * @summary `Meteor.release` is a string containing the name of the [release](#meteorupdate) with which the project was built (for example, `"1.2.3"`). It is `undefined` if the project was built using a git checkout of Meteor.
   * @locus Anywhere                                                                                      // 8
   * @type {String}                                                                                       // 9
   */                                                                                                     // 10
  Meteor.release = __meteor_runtime_config__.meteorRelease;                                               // 11
}                                                                                                         // 12
                                                                                                          // 13
// XXX find a better home for these? Ideally they would be _.get,                                         // 14
// _.ensure, _.delete..                                                                                   // 15
                                                                                                          // 16
_.extend(Meteor, {                                                                                        // 17
  // _get(a,b,c,d) returns a[b][c][d], or else undefined if a[b] or                                       // 18
  // a[b][c] doesn't exist.                                                                               // 19
  //                                                                                                      // 20
  _get: function (obj /*, arguments */) {                                                                 // 21
    for (var i = 1; i < arguments.length; i++) {                                                          // 22
      if (!(arguments[i] in obj))                                                                         // 23
        return undefined;                                                                                 // 24
      obj = obj[arguments[i]];                                                                            // 25
    }                                                                                                     // 26
    return obj;                                                                                           // 27
  },                                                                                                      // 28
                                                                                                          // 29
  // _ensure(a,b,c,d) ensures that a[b][c][d] exists. If it does not,                                     // 30
  // it is created and set to {}. Either way, it is returned.                                             // 31
  //                                                                                                      // 32
  _ensure: function (obj /*, arguments */) {                                                              // 33
    for (var i = 1; i < arguments.length; i++) {                                                          // 34
      var key = arguments[i];                                                                             // 35
      if (!(key in obj))                                                                                  // 36
        obj[key] = {};                                                                                    // 37
      obj = obj[key];                                                                                     // 38
    }                                                                                                     // 39
                                                                                                          // 40
    return obj;                                                                                           // 41
  },                                                                                                      // 42
                                                                                                          // 43
  // _delete(a, b, c, d) deletes a[b][c][d], then a[b][c] unless it                                       // 44
  // isn't empty, then a[b] unless it isn't empty.                                                        // 45
  //                                                                                                      // 46
  _delete: function (obj /*, arguments */) {                                                              // 47
    var stack = [obj];                                                                                    // 48
    var leaf = true;                                                                                      // 49
    for (var i = 1; i < arguments.length - 1; i++) {                                                      // 50
      var key = arguments[i];                                                                             // 51
      if (!(key in obj)) {                                                                                // 52
        leaf = false;                                                                                     // 53
        break;                                                                                            // 54
      }                                                                                                   // 55
      obj = obj[key];                                                                                     // 56
      if (typeof obj !== "object")                                                                        // 57
        break;                                                                                            // 58
      stack.push(obj);                                                                                    // 59
    }                                                                                                     // 60
                                                                                                          // 61
    for (var i = stack.length - 1; i >= 0; i--) {                                                         // 62
      var key = arguments[i+1];                                                                           // 63
                                                                                                          // 64
      if (leaf)                                                                                           // 65
        leaf = false;                                                                                     // 66
      else                                                                                                // 67
        for (var other in stack[i][key])                                                                  // 68
          return; // not empty -- we're done                                                              // 69
                                                                                                          // 70
      delete stack[i][key];                                                                               // 71
    }                                                                                                     // 72
  },                                                                                                      // 73
                                                                                                          // 74
  // wrapAsync can wrap any function that takes some number of arguments that                             // 75
  // can't be undefined, followed by some optional arguments, where the callback                          // 76
  // is the last optional argument.                                                                       // 77
  // e.g. fs.readFile(pathname, [callback]),                                                              // 78
  // fs.open(pathname, flags, [mode], [callback])                                                         // 79
  // For maximum effectiveness and least confusion, wrapAsync should be used on                           // 80
  // functions where the callback is the only argument of type Function.                                  // 81
                                                                                                          // 82
  /**                                                                                                     // 83
   * @memberOf Meteor                                                                                     // 84
   * @summary Wrap a function that takes a callback function as its final parameter. The signature of the callback of the wrapped function should be `function(error, result){}`. On the server, the wrapped function can be used either synchronously (without passing a callback) or asynchronously (when a callback is passed). On the client, a callback is always required; errors will be logged if there is no callback. If a callback is provided, the environment captured when the original function was called will be restored in the callback.
   * @locus Anywhere                                                                                      // 86
   * @param {Function} func A function that takes a callback as its final parameter                       // 87
   * @param {Object} [context] Optional `this` object against which the original function will be invoked
   */                                                                                                     // 89
  wrapAsync: function (fn, context) {                                                                     // 90
    return function (/* arguments */) {                                                                   // 91
      var self = context || this;                                                                         // 92
      var newArgs = _.toArray(arguments);                                                                 // 93
      var callback;                                                                                       // 94
                                                                                                          // 95
      for (var i = newArgs.length - 1; i >= 0; --i) {                                                     // 96
        var arg = newArgs[i];                                                                             // 97
        var type = typeof arg;                                                                            // 98
        if (type !== "undefined") {                                                                       // 99
          if (type === "function") {                                                                      // 100
            callback = arg;                                                                               // 101
          }                                                                                               // 102
          break;                                                                                          // 103
        }                                                                                                 // 104
      }                                                                                                   // 105
                                                                                                          // 106
      if (! callback) {                                                                                   // 107
        if (Meteor.isClient) {                                                                            // 108
          callback = logErr;                                                                              // 109
        } else {                                                                                          // 110
          var fut = new Future();                                                                         // 111
          callback = fut.resolver();                                                                      // 112
        }                                                                                                 // 113
        ++i; // Insert the callback just after arg.                                                       // 114
      }                                                                                                   // 115
                                                                                                          // 116
      newArgs[i] = Meteor.bindEnvironment(callback);                                                      // 117
      var result = fn.apply(self, newArgs);                                                               // 118
      return fut ? fut.wait() : result;                                                                   // 119
    };                                                                                                    // 120
  },                                                                                                      // 121
                                                                                                          // 122
  // Sets child's prototype to a new object whose prototype is parent's                                   // 123
  // prototype. Used as:                                                                                  // 124
  //   Meteor._inherits(ClassB, ClassA).                                                                  // 125
  //   _.extend(ClassB.prototype, { ... })                                                                // 126
  // Inspired by CoffeeScript's `extend` and Google Closure's `goog.inherits`.                            // 127
  _inherits: function (Child, Parent) {                                                                   // 128
    // copy Parent static properties                                                                      // 129
    for (var key in Parent) {                                                                             // 130
      // make sure we only copy hasOwnProperty properties vs. prototype                                   // 131
      // properties                                                                                       // 132
      if (_.has(Parent, key))                                                                             // 133
        Child[key] = Parent[key];                                                                         // 134
    }                                                                                                     // 135
                                                                                                          // 136
    // a middle member of prototype chain: takes the prototype from the Parent                            // 137
    var Middle = function () {                                                                            // 138
      this.constructor = Child;                                                                           // 139
    };                                                                                                    // 140
    Middle.prototype = Parent.prototype;                                                                  // 141
    Child.prototype = new Middle();                                                                       // 142
    Child.__super__ = Parent.prototype;                                                                   // 143
    return Child;                                                                                         // 144
  }                                                                                                       // 145
});                                                                                                       // 146
                                                                                                          // 147
var warnedAboutWrapAsync = false;                                                                         // 148
                                                                                                          // 149
/**                                                                                                       // 150
 * @deprecated in 0.9.3                                                                                   // 151
 */                                                                                                       // 152
Meteor._wrapAsync = function(fn, context) {                                                               // 153
  if (! warnedAboutWrapAsync) {                                                                           // 154
    Meteor._debug("Meteor._wrapAsync has been renamed to Meteor.wrapAsync");                              // 155
    warnedAboutWrapAsync = true;                                                                          // 156
  }                                                                                                       // 157
  return Meteor.wrapAsync.apply(Meteor, arguments);                                                       // 158
};                                                                                                        // 159
                                                                                                          // 160
function logErr(err) {                                                                                    // 161
  if (err) {                                                                                              // 162
    return Meteor._debug(                                                                                 // 163
      "Exception in callback of async function",                                                          // 164
      err.stack ? err.stack : err                                                                         // 165
    );                                                                                                    // 166
  }                                                                                                       // 167
}                                                                                                         // 168
                                                                                                          // 169
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/meteor/setimmediate.js                                                                        //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
// Chooses one of three setImmediate implementations:                                                     // 1
//                                                                                                        // 2
// * Native setImmediate (IE 10, Node 0.9+)                                                               // 3
//                                                                                                        // 4
// * postMessage (many browsers)                                                                          // 5
//                                                                                                        // 6
// * setTimeout  (fallback)                                                                               // 7
//                                                                                                        // 8
// The postMessage implementation is based on                                                             // 9
// https://github.com/NobleJS/setImmediate/tree/1.0.1                                                     // 10
//                                                                                                        // 11
// Don't use `nextTick` for Node since it runs its callbacks before                                       // 12
// I/O, which is stricter than we're looking for.                                                         // 13
//                                                                                                        // 14
// Not installed as a polyfill, as our public API is `Meteor.defer`.                                      // 15
// Since we're not trying to be a polyfill, we have some                                                  // 16
// simplifications:                                                                                       // 17
//                                                                                                        // 18
// If one invocation of a setImmediate callback pauses itself by a                                        // 19
// call to alert/prompt/showModelDialog, the NobleJS polyfill                                             // 20
// implementation ensured that no setImmedate callback would run until                                    // 21
// the first invocation completed.  While correct per the spec, what it                                   // 22
// would mean for us in practice is that any reactive updates relying                                     // 23
// on Meteor.defer would be hung in the main window until the modal                                       // 24
// dialog was dismissed.  Thus we only ensure that a setImmediate                                         // 25
// function is called in a later event loop.                                                              // 26
//                                                                                                        // 27
// We don't need to support using a string to be eval'ed for the                                          // 28
// callback, arguments to the function, or clearImmediate.                                                // 29
                                                                                                          // 30
"use strict";                                                                                             // 31
                                                                                                          // 32
var global = this;                                                                                        // 33
                                                                                                          // 34
                                                                                                          // 35
// IE 10, Node >= 9.1                                                                                     // 36
                                                                                                          // 37
function useSetImmediate() {                                                                              // 38
  if (! global.setImmediate)                                                                              // 39
    return null;                                                                                          // 40
  else {                                                                                                  // 41
    var setImmediate = function (fn) {                                                                    // 42
      global.setImmediate(fn);                                                                            // 43
    };                                                                                                    // 44
    setImmediate.implementation = 'setImmediate';                                                         // 45
    return setImmediate;                                                                                  // 46
  }                                                                                                       // 47
}                                                                                                         // 48
                                                                                                          // 49
                                                                                                          // 50
// Android 2.3.6, Chrome 26, Firefox 20, IE 8-9, iOS 5.1.1 Safari                                         // 51
                                                                                                          // 52
function usePostMessage() {                                                                               // 53
  // The test against `importScripts` prevents this implementation                                        // 54
  // from being installed inside a web worker, where                                                      // 55
  // `global.postMessage` means something completely different and                                        // 56
  // can't be used for this purpose.                                                                      // 57
                                                                                                          // 58
  if (!global.postMessage || global.importScripts) {                                                      // 59
    return null;                                                                                          // 60
  }                                                                                                       // 61
                                                                                                          // 62
  // Avoid synchronous post message implementations.                                                      // 63
                                                                                                          // 64
  var postMessageIsAsynchronous = true;                                                                   // 65
  var oldOnMessage = global.onmessage;                                                                    // 66
  global.onmessage = function () {                                                                        // 67
      postMessageIsAsynchronous = false;                                                                  // 68
  };                                                                                                      // 69
  global.postMessage("", "*");                                                                            // 70
  global.onmessage = oldOnMessage;                                                                        // 71
                                                                                                          // 72
  if (! postMessageIsAsynchronous)                                                                        // 73
    return null;                                                                                          // 74
                                                                                                          // 75
  var funcIndex = 0;                                                                                      // 76
  var funcs = {};                                                                                         // 77
                                                                                                          // 78
  // Installs an event handler on `global` for the `message` event: see                                   // 79
  // * https://developer.mozilla.org/en/DOM/window.postMessage                                            // 80
  // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages       // 81
                                                                                                          // 82
  // XXX use Random.id() here?                                                                            // 83
  var MESSAGE_PREFIX = "Meteor._setImmediate." + Math.random() + '.';                                     // 84
                                                                                                          // 85
  function isStringAndStartsWith(string, putativeStart) {                                                 // 86
    return (typeof string === "string" &&                                                                 // 87
            string.substring(0, putativeStart.length) === putativeStart);                                 // 88
  }                                                                                                       // 89
                                                                                                          // 90
  function onGlobalMessage(event) {                                                                       // 91
    // This will catch all incoming messages (even from other                                             // 92
    // windows!), so we need to try reasonably hard to avoid letting                                      // 93
    // anyone else trick us into firing off. We test the origin is                                        // 94
    // still this window, and that a (randomly generated)                                                 // 95
    // unpredictable identifying prefix is present.                                                       // 96
    if (event.source === global &&                                                                        // 97
        isStringAndStartsWith(event.data, MESSAGE_PREFIX)) {                                              // 98
      var index = event.data.substring(MESSAGE_PREFIX.length);                                            // 99
      try {                                                                                               // 100
        if (funcs[index])                                                                                 // 101
          funcs[index]();                                                                                 // 102
      }                                                                                                   // 103
      finally {                                                                                           // 104
        delete funcs[index];                                                                              // 105
      }                                                                                                   // 106
    }                                                                                                     // 107
  }                                                                                                       // 108
                                                                                                          // 109
  if (global.addEventListener) {                                                                          // 110
    global.addEventListener("message", onGlobalMessage, false);                                           // 111
  } else {                                                                                                // 112
    global.attachEvent("onmessage", onGlobalMessage);                                                     // 113
  }                                                                                                       // 114
                                                                                                          // 115
  var setImmediate = function (fn) {                                                                      // 116
    // Make `global` post a message to itself with the handle and                                         // 117
    // identifying prefix, thus asynchronously invoking our                                               // 118
    // onGlobalMessage listener above.                                                                    // 119
    ++funcIndex;                                                                                          // 120
    funcs[funcIndex] = fn;                                                                                // 121
    global.postMessage(MESSAGE_PREFIX + funcIndex, "*");                                                  // 122
  };                                                                                                      // 123
  setImmediate.implementation = 'postMessage';                                                            // 124
  return setImmediate;                                                                                    // 125
}                                                                                                         // 126
                                                                                                          // 127
                                                                                                          // 128
function useTimeout() {                                                                                   // 129
  var setImmediate = function (fn) {                                                                      // 130
    global.setTimeout(fn, 0);                                                                             // 131
  };                                                                                                      // 132
  setImmediate.implementation = 'setTimeout';                                                             // 133
  return setImmediate;                                                                                    // 134
}                                                                                                         // 135
                                                                                                          // 136
                                                                                                          // 137
Meteor._setImmediate =                                                                                    // 138
  useSetImmediate() ||                                                                                    // 139
  usePostMessage() ||                                                                                     // 140
  useTimeout();                                                                                           // 141
                                                                                                          // 142
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/meteor/timers.js                                                                              //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
var withoutInvocation = function (f) {                                                                    // 1
  if (Package.ddp) {                                                                                      // 2
    var _CurrentInvocation = Package.ddp.DDP._CurrentInvocation;                                          // 3
    if (_CurrentInvocation.get() && _CurrentInvocation.get().isSimulation)                                // 4
      throw new Error("Can't set timers inside simulations");                                             // 5
    return function () { _CurrentInvocation.withValue(null, f); };                                        // 6
  }                                                                                                       // 7
  else                                                                                                    // 8
    return f;                                                                                             // 9
};                                                                                                        // 10
                                                                                                          // 11
var bindAndCatch = function (context, f) {                                                                // 12
  return Meteor.bindEnvironment(withoutInvocation(f), context);                                           // 13
};                                                                                                        // 14
                                                                                                          // 15
_.extend(Meteor, {                                                                                        // 16
  // Meteor.setTimeout and Meteor.setInterval callbacks scheduled                                         // 17
  // inside a server method are not part of the method invocation and                                     // 18
  // should clear out the CurrentInvocation environment variable.                                         // 19
                                                                                                          // 20
  /**                                                                                                     // 21
   * @memberOf Meteor                                                                                     // 22
   * @summary Call a function in the future after waiting for a specified delay.                          // 23
   * @locus Anywhere                                                                                      // 24
   * @param {Function} func The function to run                                                           // 25
   * @param {Number} delay Number of milliseconds to wait before calling function                         // 26
   */                                                                                                     // 27
  setTimeout: function (f, duration) {                                                                    // 28
    return setTimeout(bindAndCatch("setTimeout callback", f), duration);                                  // 29
  },                                                                                                      // 30
                                                                                                          // 31
  /**                                                                                                     // 32
   * @memberOf Meteor                                                                                     // 33
   * @summary Call a function repeatedly, with a time delay between calls.                                // 34
   * @locus Anywhere                                                                                      // 35
   * @param {Function} func The function to run                                                           // 36
   * @param {Number} delay Number of milliseconds to wait between each function call.                     // 37
   */                                                                                                     // 38
  setInterval: function (f, duration) {                                                                   // 39
    return setInterval(bindAndCatch("setInterval callback", f), duration);                                // 40
  },                                                                                                      // 41
                                                                                                          // 42
  /**                                                                                                     // 43
   * @memberOf Meteor                                                                                     // 44
   * @summary Cancel a repeating function call scheduled by `Meteor.setInterval`.                         // 45
   * @locus Anywhere                                                                                      // 46
   * @param {Number} id The handle returned by `Meteor.setInterval`                                       // 47
   */                                                                                                     // 48
  clearInterval: function(x) {                                                                            // 49
    return clearInterval(x);                                                                              // 50
  },                                                                                                      // 51
                                                                                                          // 52
  /**                                                                                                     // 53
   * @memberOf Meteor                                                                                     // 54
   * @summary Cancel a function call scheduled by `Meteor.setTimeout`.                                    // 55
   * @locus Anywhere                                                                                      // 56
   * @param {Number} id The handle returned by `Meteor.setTimeout`                                        // 57
   */                                                                                                     // 58
  clearTimeout: function(x) {                                                                             // 59
    return clearTimeout(x);                                                                               // 60
  },                                                                                                      // 61
                                                                                                          // 62
  // XXX consider making this guarantee ordering of defer'd callbacks, like                               // 63
  // Tracker.afterFlush or Node's nextTick (in practice). Then tests can do:                              // 64
  //    callSomethingThatDefersSomeWork();                                                                // 65
  //    Meteor.defer(expect(somethingThatValidatesThatTheWorkHappened));                                  // 66
  defer: function (f) {                                                                                   // 67
    Meteor._setImmediate(bindAndCatch("defer callback", f));                                              // 68
  }                                                                                                       // 69
});                                                                                                       // 70
                                                                                                          // 71
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/meteor/errors.js                                                                              //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
// Makes an error subclass which properly contains a stack trace in most                                  // 1
// environments. constructor can set fields on `this` (and should probably set                            // 2
// `message`, which is what gets displayed at the top of a stack trace).                                  // 3
//                                                                                                        // 4
Meteor.makeErrorType = function (name, constructor) {                                                     // 5
  var errorClass = function (/*arguments*/) {                                                             // 6
    var self = this;                                                                                      // 7
                                                                                                          // 8
    // Ensure we get a proper stack trace in most Javascript environments                                 // 9
    if (Error.captureStackTrace) {                                                                        // 10
      // V8 environments (Chrome and Node.js)                                                             // 11
      Error.captureStackTrace(self, errorClass);                                                          // 12
    } else {                                                                                              // 13
      // Firefox                                                                                          // 14
      var e = new Error;                                                                                  // 15
      e.__proto__ = errorClass.prototype;                                                                 // 16
      if (e instanceof errorClass)                                                                        // 17
        self = e;                                                                                         // 18
    }                                                                                                     // 19
    // Safari magically works.                                                                            // 20
                                                                                                          // 21
    constructor.apply(self, arguments);                                                                   // 22
                                                                                                          // 23
    self.errorType = name;                                                                                // 24
                                                                                                          // 25
    return self;                                                                                          // 26
  };                                                                                                      // 27
                                                                                                          // 28
  Meteor._inherits(errorClass, Error);                                                                    // 29
                                                                                                          // 30
  return errorClass;                                                                                      // 31
};                                                                                                        // 32
                                                                                                          // 33
// This should probably be in the livedata package, but we don't want                                     // 34
// to require you to use the livedata package to get it. Eventually we                                    // 35
// should probably rename it to DDP.Error and put it back in the                                          // 36
// 'livedata' package (which we should rename to 'ddp' also.)                                             // 37
//                                                                                                        // 38
// Note: The DDP server assumes that Meteor.Error EJSON-serializes as an object                           // 39
// containing 'error' and optionally 'reason' and 'details'.                                              // 40
// The DDP client manually puts these into Meteor.Error objects. (We don't use                            // 41
// EJSON.addType here because the type is determined by location in the                                   // 42
// protocol, not text on the wire.)                                                                       // 43
                                                                                                          // 44
/**                                                                                                       // 45
 * @summary This class represents a symbolic error thrown by a method.                                    // 46
 * @locus Anywhere                                                                                        // 47
 * @class                                                                                                 // 48
 * @param {String} error A string code uniquely identifying this kind of error.                           // 49
 * This string should be used by callers of the method to determine the                                   // 50
 * appropriate action to take, instead of attempting to parse the reason                                  // 51
 * or details fields. For example:                                                                        // 52
 *                                                                                                        // 53
 * ```                                                                                                    // 54
 * // on the server, pick a code unique to this error                                                     // 55
 * // the reason field should be a useful debug message                                                   // 56
 * throw new Meteor.Error("logged-out",                                                                   // 57
 *   "The user must be logged in to post a comment.");                                                    // 58
 *                                                                                                        // 59
 * // on the client                                                                                       // 60
 * Meteor.call("methodName", function (error) {                                                           // 61
 *   // identify the error                                                                                // 62
 *   if (error && error.error === "logged-out") {                                                         // 63
 *     // show a nice error message                                                                       // 64
 *     Session.set("errorMessage", "Please log in to post a comment.");                                   // 65
 *   }                                                                                                    // 66
 * });                                                                                                    // 67
 * ```                                                                                                    // 68
 *                                                                                                        // 69
 * For legacy reasons, some built-in Meteor functions such as `check` throw                               // 70
 * errors with a number in this field.                                                                    // 71
 *                                                                                                        // 72
 * @param {String} [reason] Optional.  A short human-readable summary of the                              // 73
 * error, like 'Not Found'.                                                                               // 74
 * @param {String} [details] Optional.  Additional information about the error,                           // 75
 * like a textual stack trace.                                                                            // 76
 */                                                                                                       // 77
Meteor.Error = Meteor.makeErrorType(                                                                      // 78
  "Meteor.Error",                                                                                         // 79
  function (error, reason, details) {                                                                     // 80
    var self = this;                                                                                      // 81
                                                                                                          // 82
    // String code uniquely identifying this kind of error.                                               // 83
    self.error = error;                                                                                   // 84
                                                                                                          // 85
    // Optional: A short human-readable summary of the error. Not                                         // 86
    // intended to be shown to end users, just developers. ("Not Found",                                  // 87
    // "Internal Server Error")                                                                           // 88
    self.reason = reason;                                                                                 // 89
                                                                                                          // 90
    // Optional: Additional information about the error, say for                                          // 91
    // debugging. It might be a (textual) stack trace if the server is                                    // 92
    // willing to provide one. The corresponding thing in HTTP would be                                   // 93
    // the body of a 404 or 500 response. (The difference is that we                                      // 94
    // never expect this to be shown to end users, only developers, so                                    // 95
    // it doesn't need to be pretty.)                                                                     // 96
    self.details = details;                                                                               // 97
                                                                                                          // 98
    // This is what gets displayed at the top of a stack trace. Current                                   // 99
    // format is "[404]" (if no reason is set) or "File not found [404]"                                  // 100
    if (self.reason)                                                                                      // 101
      self.message = self.reason + ' [' + self.error + ']';                                               // 102
    else                                                                                                  // 103
      self.message = '[' + self.error + ']';                                                              // 104
  });                                                                                                     // 105
                                                                                                          // 106
// Meteor.Error is basically data and is sent over DDP, so you should be able to                          // 107
// properly EJSON-clone it. This is especially important because if a                                     // 108
// Meteor.Error is thrown through a Future, the error, reason, and details                                // 109
// properties become non-enumerable so a standard Object clone won't preserve                             // 110
// them and they will be lost from DDP.                                                                   // 111
Meteor.Error.prototype.clone = function () {                                                              // 112
  var self = this;                                                                                        // 113
  return new Meteor.Error(self.error, self.reason, self.details);                                         // 114
};                                                                                                        // 115
                                                                                                          // 116
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/meteor/fiber_stubs_client.js                                                                  //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
// This file is a partial analogue to fiber_helpers.js, which allows the client                           // 1
// to use a queue too, and also to call noYieldsAllowed.                                                  // 2
                                                                                                          // 3
// The client has no ability to yield, so noYieldsAllowed is a noop.                                      // 4
//                                                                                                        // 5
Meteor._noYieldsAllowed = function (f) {                                                                  // 6
  return f();                                                                                             // 7
};                                                                                                        // 8
                                                                                                          // 9
// An even simpler queue of tasks than the fiber-enabled one.  This one just                              // 10
// runs all the tasks when you call runTask or flush, synchronously.                                      // 11
//                                                                                                        // 12
Meteor._SynchronousQueue = function () {                                                                  // 13
  var self = this;                                                                                        // 14
  self._tasks = [];                                                                                       // 15
  self._running = false;                                                                                  // 16
  self._runTimeout = null;                                                                                // 17
};                                                                                                        // 18
                                                                                                          // 19
_.extend(Meteor._SynchronousQueue.prototype, {                                                            // 20
  runTask: function (task) {                                                                              // 21
    var self = this;                                                                                      // 22
    if (!self.safeToRunTask())                                                                            // 23
      throw new Error("Could not synchronously run a task from a running task");                          // 24
    self._tasks.push(task);                                                                               // 25
    var tasks = self._tasks;                                                                              // 26
    self._tasks = [];                                                                                     // 27
    self._running = true;                                                                                 // 28
                                                                                                          // 29
    if (self._runTimeout) {                                                                               // 30
      // Since we're going to drain the queue, we can forget about the timeout                            // 31
      // which tries to run it.  (But if one of our tasks queues something else,                          // 32
      // the timeout will be correctly re-created.)                                                       // 33
      clearTimeout(self._runTimeout);                                                                     // 34
      self._runTimeout = null;                                                                            // 35
    }                                                                                                     // 36
                                                                                                          // 37
    try {                                                                                                 // 38
      while (!_.isEmpty(tasks)) {                                                                         // 39
        var t = tasks.shift();                                                                            // 40
        try {                                                                                             // 41
          t();                                                                                            // 42
        } catch (e) {                                                                                     // 43
          if (_.isEmpty(tasks)) {                                                                         // 44
            // this was the last task, that is, the one we're calling runTask                             // 45
            // for.                                                                                       // 46
            throw e;                                                                                      // 47
          } else {                                                                                        // 48
            Meteor._debug("Exception in queued task: " + (e.stack || e));                                 // 49
          }                                                                                               // 50
        }                                                                                                 // 51
      }                                                                                                   // 52
    } finally {                                                                                           // 53
      self._running = false;                                                                              // 54
    }                                                                                                     // 55
  },                                                                                                      // 56
                                                                                                          // 57
  queueTask: function (task) {                                                                            // 58
    var self = this;                                                                                      // 59
    self._tasks.push(task);                                                                               // 60
    // Intentionally not using Meteor.setTimeout, because it doesn't like runing                          // 61
    // in stubs for now.                                                                                  // 62
    if (!self._runTimeout) {                                                                              // 63
      self._runTimeout = setTimeout(_.bind(self.flush, self), 0);                                         // 64
    }                                                                                                     // 65
  },                                                                                                      // 66
                                                                                                          // 67
  flush: function () {                                                                                    // 68
    var self = this;                                                                                      // 69
    self.runTask(function () {});                                                                         // 70
  },                                                                                                      // 71
                                                                                                          // 72
  drain: function () {                                                                                    // 73
    var self = this;                                                                                      // 74
    if (!self.safeToRunTask())                                                                            // 75
      return;                                                                                             // 76
    while (!_.isEmpty(self._tasks)) {                                                                     // 77
      self.flush();                                                                                       // 78
    }                                                                                                     // 79
  },                                                                                                      // 80
                                                                                                          // 81
  safeToRunTask: function () {                                                                            // 82
    var self = this;                                                                                      // 83
    return !self._running;                                                                                // 84
  }                                                                                                       // 85
});                                                                                                       // 86
                                                                                                          // 87
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/meteor/startup_client.js                                                                      //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
var queue = [];                                                                                           // 1
var loaded = !Meteor.isCordova &&                                                                         // 2
  (document.readyState === "loaded" || document.readyState == "complete");                                // 3
                                                                                                          // 4
var awaitingEventsCount = 1;                                                                              // 5
var ready = function() {                                                                                  // 6
  awaitingEventsCount--;                                                                                  // 7
  if (awaitingEventsCount > 0)                                                                            // 8
    return;                                                                                               // 9
                                                                                                          // 10
  loaded = true;                                                                                          // 11
  var runStartupCallbacks = function () {                                                                 // 12
    if (Meteor.isCordova) {                                                                               // 13
      if (! cordova.plugins || ! cordova.plugins.CordovaUpdate) {                                         // 14
        // XXX This timeout should not be necessary.                                                      // 15
        // Cordova indicates that all the cordova plugins files have been loaded                          // 16
        // and plugins are ready to be used when the "deviceready" callback                               // 17
        // fires. Even though we wait for the "deviceready" event, plugins                                // 18
        // have been observed to still not be ready (likely a Cordova bug).                               // 19
        // We check the availability of the Cordova-Update plugin (the only                               // 20
        // plugin that we always include for sure) and retry a bit later if it                            // 21
        // is nowhere to be found. Experiments have found that either all                                 // 22
        // plugins are attached or none.                                                                  // 23
        Meteor.setTimeout(runStartupCallbacks, 20);                                                       // 24
        return;                                                                                           // 25
      }                                                                                                   // 26
    }                                                                                                     // 27
                                                                                                          // 28
    while (queue.length)                                                                                  // 29
      (queue.shift())();                                                                                  // 30
  };                                                                                                      // 31
  runStartupCallbacks();                                                                                  // 32
};                                                                                                        // 33
                                                                                                          // 34
if (document.addEventListener) {                                                                          // 35
  document.addEventListener('DOMContentLoaded', ready, false);                                            // 36
                                                                                                          // 37
  if (Meteor.isCordova) {                                                                                 // 38
    awaitingEventsCount++;                                                                                // 39
    document.addEventListener('deviceready', ready, false);                                               // 40
  }                                                                                                       // 41
                                                                                                          // 42
  window.addEventListener('load', ready, false);                                                          // 43
} else {                                                                                                  // 44
  document.attachEvent('onreadystatechange', function () {                                                // 45
    if (document.readyState === "complete")                                                               // 46
      ready();                                                                                            // 47
  });                                                                                                     // 48
  window.attachEvent('load', ready);                                                                      // 49
}                                                                                                         // 50
                                                                                                          // 51
/**                                                                                                       // 52
 * @summary Run code when a client or a server starts.                                                    // 53
 * @locus Anywhere                                                                                        // 54
 * @param {Function} func A function to run on startup.                                                   // 55
 */                                                                                                       // 56
Meteor.startup = function (cb) {                                                                          // 57
  var doScroll = !document.addEventListener &&                                                            // 58
    document.documentElement.doScroll;                                                                    // 59
                                                                                                          // 60
  if (!doScroll || window !== top) {                                                                      // 61
    if (loaded)                                                                                           // 62
      cb();                                                                                               // 63
    else                                                                                                  // 64
      queue.push(cb);                                                                                     // 65
  } else {                                                                                                // 66
    try { doScroll('left'); }                                                                             // 67
    catch (e) {                                                                                           // 68
      setTimeout(function() { Meteor.startup(cb); }, 50);                                                 // 69
      return;                                                                                             // 70
    };                                                                                                    // 71
    cb();                                                                                                 // 72
  }                                                                                                       // 73
};                                                                                                        // 74
                                                                                                          // 75
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/meteor/debug.js                                                                               //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
var suppress = 0;                                                                                         // 1
                                                                                                          // 2
// replacement for console.log. This is a temporary API. We should                                        // 3
// provide a real logging API soon (possibly just a polyfill for                                          // 4
// console?)                                                                                              // 5
//                                                                                                        // 6
// NOTE: this is used on the server to print the warning about                                            // 7
// having autopublish enabled when you probably meant to turn it                                          // 8
// off. it's not really the proper use of something called                                                // 9
// _debug. the intent is for this message to go to the terminal and                                       // 10
// be very visible. if you change _debug to go someplace else, etc,                                       // 11
// please fix the autopublish code to do something reasonable.                                            // 12
//                                                                                                        // 13
Meteor._debug = function (/* arguments */) {                                                              // 14
  if (suppress) {                                                                                         // 15
    suppress--;                                                                                           // 16
    return;                                                                                               // 17
  }                                                                                                       // 18
  if (typeof console !== 'undefined' &&                                                                   // 19
      typeof console.log !== 'undefined') {                                                               // 20
    if (arguments.length == 0) { // IE Companion breaks otherwise                                         // 21
      // IE10 PP4 requires at least one argument                                                          // 22
      console.log('');                                                                                    // 23
    } else {                                                                                              // 24
      // IE doesn't have console.log.apply, it's not a real Object.                                       // 25
      // http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9                  // 26
      // http://patik.com/blog/complete-cross-browser-console-log/                                        // 27
      if (typeof console.log.apply === "function") {                                                      // 28
        // Most browsers                                                                                  // 29
                                                                                                          // 30
        // Chrome and Safari only hyperlink URLs to source files in first argument of                     // 31
        // console.log, so try to call it with one argument if possible.                                  // 32
        // Approach taken here: If all arguments are strings, join them on space.                         // 33
        // See https://github.com/meteor/meteor/pull/732#issuecomment-13975991                            // 34
        var allArgumentsOfTypeString = true;                                                              // 35
        for (var i = 0; i < arguments.length; i++)                                                        // 36
          if (typeof arguments[i] !== "string")                                                           // 37
            allArgumentsOfTypeString = false;                                                             // 38
                                                                                                          // 39
        if (allArgumentsOfTypeString)                                                                     // 40
          console.log.apply(console, [Array.prototype.join.call(arguments, " ")]);                        // 41
        else                                                                                              // 42
          console.log.apply(console, arguments);                                                          // 43
                                                                                                          // 44
      } else if (typeof Function.prototype.bind === "function") {                                         // 45
        // IE9                                                                                            // 46
        var log = Function.prototype.bind.call(console.log, console);                                     // 47
        log.apply(console, arguments);                                                                    // 48
      } else {                                                                                            // 49
        // IE8                                                                                            // 50
        Function.prototype.call.call(console.log, console, Array.prototype.slice.call(arguments));        // 51
      }                                                                                                   // 52
    }                                                                                                     // 53
  }                                                                                                       // 54
};                                                                                                        // 55
                                                                                                          // 56
// Suppress the next 'count' Meteor._debug messsages. Use this to                                         // 57
// stop tests from spamming the console.                                                                  // 58
//                                                                                                        // 59
Meteor._suppress_log = function (count) {                                                                 // 60
  suppress += count;                                                                                      // 61
};                                                                                                        // 62
                                                                                                          // 63
Meteor._suppressed_log_expected = function () {                                                           // 64
  return suppress !== 0;                                                                                  // 65
};                                                                                                        // 66
                                                                                                          // 67
                                                                                                          // 68
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/meteor/string_utils.js                                                                        //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
// Like Perl's quotemeta: quotes all regexp metacharacters.                                               // 1
// Code taken from                                                                                        // 2
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions                      // 3
Meteor._escapeRegExp = function (string) {                                                                // 4
    return String(string).replace(/[.*+?^${}()|[\]\\]/g, "\\$&");                                         // 5
};                                                                                                        // 6
                                                                                                          // 7
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/meteor/dynamics_browser.js                                                                    //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
// Simple implementation of dynamic scoping, for use in browsers                                          // 1
                                                                                                          // 2
var nextSlot = 0;                                                                                         // 3
var currentValues = [];                                                                                   // 4
                                                                                                          // 5
Meteor.EnvironmentVariable = function () {                                                                // 6
  this.slot = nextSlot++;                                                                                 // 7
};                                                                                                        // 8
                                                                                                          // 9
_.extend(Meteor.EnvironmentVariable.prototype, {                                                          // 10
  get: function () {                                                                                      // 11
    return currentValues[this.slot];                                                                      // 12
  },                                                                                                      // 13
                                                                                                          // 14
  getOrNullIfOutsideFiber: function () {                                                                  // 15
    return this.get();                                                                                    // 16
  },                                                                                                      // 17
                                                                                                          // 18
  withValue: function (value, func) {                                                                     // 19
    var saved = currentValues[this.slot];                                                                 // 20
    try {                                                                                                 // 21
      currentValues[this.slot] = value;                                                                   // 22
      var ret = func();                                                                                   // 23
    } finally {                                                                                           // 24
      currentValues[this.slot] = saved;                                                                   // 25
    }                                                                                                     // 26
    return ret;                                                                                           // 27
  }                                                                                                       // 28
});                                                                                                       // 29
                                                                                                          // 30
Meteor.bindEnvironment = function (func, onException, _this) {                                            // 31
  // needed in order to be able to create closures inside func and                                        // 32
  // have the closed variables not change back to their original                                          // 33
  // values                                                                                               // 34
  var boundValues = _.clone(currentValues);                                                               // 35
                                                                                                          // 36
  if (!onException || typeof(onException) === 'string') {                                                 // 37
    var description = onException || "callback of async function";                                        // 38
    onException = function (error) {                                                                      // 39
      Meteor._debug(                                                                                      // 40
        "Exception in " + description + ":",                                                              // 41
        error && error.stack || error                                                                     // 42
      );                                                                                                  // 43
    };                                                                                                    // 44
  }                                                                                                       // 45
                                                                                                          // 46
  return function (/* arguments */) {                                                                     // 47
    var savedValues = currentValues;                                                                      // 48
    try {                                                                                                 // 49
      currentValues = boundValues;                                                                        // 50
      var ret = func.apply(_this, _.toArray(arguments));                                                  // 51
    } catch (e) {                                                                                         // 52
      // note: callback-hook currently relies on the fact that if onException                             // 53
      // throws in the browser, the wrapped call throws.                                                  // 54
      onException(e);                                                                                     // 55
    } finally {                                                                                           // 56
      currentValues = savedValues;                                                                        // 57
    }                                                                                                     // 58
    return ret;                                                                                           // 59
  };                                                                                                      // 60
};                                                                                                        // 61
                                                                                                          // 62
Meteor._nodeCodeMustBeInFiber = function () {                                                             // 63
  // no-op on browser                                                                                     // 64
};                                                                                                        // 65
                                                                                                          // 66
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/meteor/url_common.js                                                                          //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
/**                                                                                                       // 1
 * @summary Generate an absolute URL pointing to the application. The server reads from the `ROOT_URL` environment variable to determine where it is running. This is taken care of automatically for apps deployed with `meteor deploy`, but must be provided when using `meteor build`.
 * @locus Anywhere                                                                                        // 3
 * @param {String} [path] A path to append to the root URL. Do not include a leading "`/`".               // 4
 * @param {Object} [options]                                                                              // 5
 * @param {Boolean} options.secure Create an HTTPS URL.                                                   // 6
 * @param {Boolean} options.replaceLocalhost Replace localhost with 127.0.0.1. Useful for services that don't recognize localhost as a domain name.
 * @param {String} options.rootUrl Override the default ROOT_URL from the server environment. For example: "`http://foo.example.com`"
 */                                                                                                       // 9
Meteor.absoluteUrl = function (path, options) {                                                           // 10
  // path is optional                                                                                     // 11
  if (!options && typeof path === 'object') {                                                             // 12
    options = path;                                                                                       // 13
    path = undefined;                                                                                     // 14
  }                                                                                                       // 15
  // merge options with defaults                                                                          // 16
  options = _.extend({}, Meteor.absoluteUrl.defaultOptions, options || {});                               // 17
                                                                                                          // 18
  var url = options.rootUrl;                                                                              // 19
  if (!url)                                                                                               // 20
    throw new Error("Must pass options.rootUrl or set ROOT_URL in the server environment");               // 21
                                                                                                          // 22
  if (!/^http[s]?:\/\//i.test(url)) // url starts with 'http://' or 'https://'                            // 23
    url = 'http://' + url; // we will later fix to https if options.secure is set                         // 24
                                                                                                          // 25
  if (!/\/$/.test(url)) // url ends with '/'                                                              // 26
    url += '/';                                                                                           // 27
                                                                                                          // 28
  if (path)                                                                                               // 29
    url += path;                                                                                          // 30
                                                                                                          // 31
  // turn http to https if secure option is set, and we're not talking                                    // 32
  // to localhost.                                                                                        // 33
  if (options.secure &&                                                                                   // 34
      /^http:/.test(url) && // url starts with 'http:'                                                    // 35
      !/http:\/\/localhost[:\/]/.test(url) && // doesn't match localhost                                  // 36
      !/http:\/\/127\.0\.0\.1[:\/]/.test(url)) // or 127.0.0.1                                            // 37
    url = url.replace(/^http:/, 'https:');                                                                // 38
                                                                                                          // 39
  if (options.replaceLocalhost)                                                                           // 40
    url = url.replace(/^http:\/\/localhost([:\/].*)/, 'http://127.0.0.1$1');                              // 41
                                                                                                          // 42
  return url;                                                                                             // 43
};                                                                                                        // 44
                                                                                                          // 45
// allow later packages to override default options                                                       // 46
Meteor.absoluteUrl.defaultOptions = { };                                                                  // 47
if (typeof __meteor_runtime_config__ === "object" &&                                                      // 48
    __meteor_runtime_config__.ROOT_URL)                                                                   // 49
  Meteor.absoluteUrl.defaultOptions.rootUrl = __meteor_runtime_config__.ROOT_URL;                         // 50
                                                                                                          // 51
                                                                                                          // 52
Meteor._relativeToSiteRootUrl = function (link) {                                                         // 53
  if (typeof __meteor_runtime_config__ === "object" &&                                                    // 54
      link.substr(0, 1) === "/")                                                                          // 55
    link = (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || "") + link;                                 // 56
  return link;                                                                                            // 57
};                                                                                                        // 58
                                                                                                          // 59
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.meteor = {
  Meteor: Meteor
};

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

/* Package-scope variables */
var babelHelpers;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                         //
// packages/babel-runtime/babel-runtime.js                                                                 //
//                                                                                                         //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                           //
var hasOwn = Object.prototype.hasOwnProperty;                                                              // 1
                                                                                                           // 2
function canDefineNonEnumerableProperties() {                                                              // 3
  var testObj = {};                                                                                        // 4
  var testPropName = "t";                                                                                  // 5
                                                                                                           // 6
  try {                                                                                                    // 7
    Object.defineProperty(testObj, testPropName, {                                                         // 8
      enumerable: false,                                                                                   // 9
      value: testObj                                                                                       // 10
    });                                                                                                    // 11
                                                                                                           // 12
    for (var k in testObj) {                                                                               // 13
      if (k === testPropName) {                                                                            // 14
        return false;                                                                                      // 15
      }                                                                                                    // 16
    }                                                                                                      // 17
  } catch (e) {                                                                                            // 18
    return false;                                                                                          // 19
  }                                                                                                        // 20
                                                                                                           // 21
  return testObj[testPropName] === testObj;                                                                // 22
}                                                                                                          // 23
                                                                                                           // 24
// The name `babelHelpers` is hard-coded in Babel.  Otherwise we would make it                             // 25
// something capitalized and more descriptive, like `BabelRuntime`.                                        // 26
babelHelpers = {                                                                                           // 27
  // Meteor-specific runtime helper for wrapping the object of for-in                                      // 28
  // loops, so that inherited Array methods defined by es5-shim can be                                     // 29
  // ignored in browsers where they cannot be defined as non-enumerable.                                   // 30
  sanitizeForInObject: canDefineNonEnumerableProperties()                                                  // 31
    ? function (value) { return value; }                                                                   // 32
    : function (obj) {                                                                                     // 33
      if (Array.isArray(obj)) {                                                                            // 34
        var newObj = {};                                                                                   // 35
        var keys = Object.keys(obj);                                                                       // 36
        var keyCount = keys.length;                                                                        // 37
        for (var i = 0; i < keyCount; ++i) {                                                               // 38
          var key = keys[i];                                                                               // 39
          newObj[key] = obj[key];                                                                          // 40
        }                                                                                                  // 41
        return newObj;                                                                                     // 42
      }                                                                                                    // 43
                                                                                                           // 44
      return obj;                                                                                          // 45
    },                                                                                                     // 46
                                                                                                           // 47
  // es6.templateLiterals                                                                                  // 48
  // Constructs the object passed to the tag function in a tagged                                          // 49
  // template literal.                                                                                     // 50
  taggedTemplateLiteralLoose: function (strings, raw) {                                                    // 51
    // Babel's own version of this calls Object.freeze on `strings` and                                    // 52
    // `strings.raw`, but it doesn't seem worth the compatibility and                                      // 53
    // performance concerns.  If you're writing code against this helper,                                  // 54
    // don't add properties to these objects.                                                              // 55
    strings.raw = raw;                                                                                     // 56
    return strings;                                                                                        // 57
  },                                                                                                       // 58
                                                                                                           // 59
  // es6.classes                                                                                           // 60
  // Checks that a class constructor is being called with `new`, and throws                                // 61
  // an error if it is not.                                                                                // 62
  classCallCheck: function (instance, Constructor) {                                                       // 63
    if (!(instance instanceof Constructor)) {                                                              // 64
      throw new TypeError("Cannot call a class as a function");                                            // 65
    }                                                                                                      // 66
  },                                                                                                       // 67
                                                                                                           // 68
  // es6.classes                                                                                           // 69
  inherits: function (subClass, superClass) {                                                              // 70
    if (typeof superClass !== "function" && superClass !== null) {                                         // 71
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }                                                                                                      // 73
                                                                                                           // 74
    if (superClass) {                                                                                      // 75
      if (Object.create) {                                                                                 // 76
        // All but IE 8                                                                                    // 77
        subClass.prototype = Object.create(superClass.prototype, {                                         // 78
          constructor: {                                                                                   // 79
            value: subClass,                                                                               // 80
            enumerable: false,                                                                             // 81
            writable: true,                                                                                // 82
            configurable: true                                                                             // 83
          }                                                                                                // 84
        });                                                                                                // 85
      } else {                                                                                             // 86
        // IE 8 path.  Slightly worse for modern browsers, because `constructor`                           // 87
        // is enumerable and shows up in the inspector unnecessarily.                                      // 88
        // It's not an "own" property of any instance though.                                              // 89
        //                                                                                                 // 90
        // For correctness when writing code,                                                              // 91
        // don't enumerate all the own-and-inherited properties of an instance                             // 92
        // of a class and expect not to find `constructor` (but who does that?).                           // 93
        var F = function () {                                                                              // 94
          this.constructor = subClass;                                                                     // 95
        };                                                                                                 // 96
        F.prototype = superClass.prototype;                                                                // 97
        subClass.prototype = new F();                                                                      // 98
      }                                                                                                    // 99
                                                                                                           // 100
      // For modern browsers, this would be `subClass.__proto__ = superClass`,                             // 101
      // but IE <=10 don't support `__proto__`, and in this case the difference                            // 102
      // would be detectable; code that works in modern browsers could easily                              // 103
      // fail on IE 8 if we ever used the `__proto__` trick.                                               // 104
      //                                                                                                   // 105
      // There's no perfect way to make static methods inherited if they are                               // 106
      // assigned after declaration of the classes.  The best we can do is                                 // 107
      // to copy them.  In other words, when you write `class Foo                                          // 108
      // extends Bar`, we copy the static methods from Bar onto Foo, but future                            // 109
      // ones are not copied.                                                                              // 110
      //                                                                                                   // 111
      // For correctness when writing code, don't add static methods to a class                            // 112
      // after you subclass it.                                                                            // 113
      for (var k in superClass) {                                                                          // 114
        if (hasOwn.call(superClass, k)) {                                                                  // 115
          subClass[k] = superClass[k];                                                                     // 116
        }                                                                                                  // 117
      }                                                                                                    // 118
    }                                                                                                      // 119
  },                                                                                                       // 120
                                                                                                           // 121
  createClass: (function () {                                                                              // 122
    var hasDefineProperty = false;                                                                         // 123
    try {                                                                                                  // 124
      // IE 8 has a broken Object.defineProperty, so feature-test by                                       // 125
      // trying to call it.                                                                                // 126
      Object.defineProperty({}, 'x', {});                                                                  // 127
      hasDefineProperty = true;                                                                            // 128
    } catch (e) {}                                                                                         // 129
                                                                                                           // 130
    function defineProperties(target, props) {                                                             // 131
      for (var i = 0; i < props.length; i++) {                                                             // 132
        var descriptor = props[i];                                                                         // 133
        descriptor.enumerable = descriptor.enumerable || false;                                            // 134
        descriptor.configurable = true;                                                                    // 135
        if ("value" in descriptor) descriptor.writable = true;                                             // 136
        Object.defineProperty(target, descriptor.key, descriptor);                                         // 137
      }                                                                                                    // 138
    }                                                                                                      // 139
                                                                                                           // 140
    return function (Constructor, protoProps, staticProps) {                                               // 141
      if (! hasDefineProperty) {                                                                           // 142
        // e.g. `class Foo { get bar() {} }`.  If you try to use getters and                               // 143
        // setters in IE 8, you will get a big nasty error, with or without                                // 144
        // Babel.  I don't know of any other syntax features besides getters                               // 145
        // and setters that will trigger this error.                                                       // 146
        throw new Error(                                                                                   // 147
          "Your browser does not support this type of class property.  " +                                 // 148
            "For example, Internet Explorer 8 does not support getters and " +                             // 149
            "setters.");                                                                                   // 150
      }                                                                                                    // 151
                                                                                                           // 152
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                 // 153
      if (staticProps) defineProperties(Constructor, staticProps);                                         // 154
      return Constructor;                                                                                  // 155
    };                                                                                                     // 156
  })(),                                                                                                    // 157
                                                                                                           // 158
  // es7.objectRestSpread and react (JSX)                                                                  // 159
  _extends: Object.assign || (function (target) {                                                          // 160
    for (var i = 1; i < arguments.length; i++) {                                                           // 161
      var source = arguments[i];                                                                           // 162
      for (var key in source) {                                                                            // 163
        if (hasOwn.call(source, key)) {                                                                    // 164
          target[key] = source[key];                                                                       // 165
        }                                                                                                  // 166
      }                                                                                                    // 167
    }                                                                                                      // 168
    return target;                                                                                         // 169
  }),                                                                                                      // 170
                                                                                                           // 171
  // es6.destructuring                                                                                     // 172
  objectWithoutProperties: function (obj, keys) {                                                          // 173
    var target = {};                                                                                       // 174
    outer: for (var i in obj) {                                                                            // 175
      if (! hasOwn.call(obj, i)) continue;                                                                 // 176
      for (var j = 0; j < keys.length; j++) {                                                              // 177
        if (keys[j] === i) continue outer;                                                                 // 178
      }                                                                                                    // 179
      target[i] = obj[i];                                                                                  // 180
    }                                                                                                      // 181
    return target;                                                                                         // 182
  },                                                                                                       // 183
                                                                                                           // 184
  // es6.destructuring                                                                                     // 185
  objectDestructuringEmpty: function (obj) {                                                               // 186
    if (obj == null) throw new TypeError("Cannot destructure undefined");                                  // 187
  },                                                                                                       // 188
                                                                                                           // 189
  // es6.spread                                                                                            // 190
  bind: Function.prototype.bind || (function () {                                                          // 191
    var isCallable = function (value) { return typeof value === 'function'; };                             // 192
    var $Object = Object;                                                                                  // 193
    var to_string = Object.prototype.toString;                                                             // 194
    var array_slice = Array.prototype.slice;                                                               // 195
    var array_concat = Array.prototype.concat;                                                             // 196
    var array_push = Array.prototype.push;                                                                 // 197
    var max = Math.max;                                                                                    // 198
    var Empty = function Empty() {};                                                                       // 199
                                                                                                           // 200
    // Copied from es5-shim.js (3ac7942).  See original for more comments.                                 // 201
    return function bind(that) {                                                                           // 202
      var target = this;                                                                                   // 203
      if (!isCallable(target)) {                                                                           // 204
        throw new TypeError('Function.prototype.bind called on incompatible ' + target);                   // 205
      }                                                                                                    // 206
                                                                                                           // 207
      var args = array_slice.call(arguments, 1);                                                           // 208
                                                                                                           // 209
      var bound;                                                                                           // 210
      var binder = function () {                                                                           // 211
                                                                                                           // 212
        if (this instanceof bound) {                                                                       // 213
          var result = target.apply(                                                                       // 214
            this,                                                                                          // 215
            array_concat.call(args, array_slice.call(arguments))                                           // 216
          );                                                                                               // 217
          if ($Object(result) === result) {                                                                // 218
            return result;                                                                                 // 219
          }                                                                                                // 220
          return this;                                                                                     // 221
        } else {                                                                                           // 222
          return target.apply(                                                                             // 223
            that,                                                                                          // 224
            array_concat.call(args, array_slice.call(arguments))                                           // 225
          );                                                                                               // 226
        }                                                                                                  // 227
      };                                                                                                   // 228
                                                                                                           // 229
      var boundLength = max(0, target.length - args.length);                                               // 230
                                                                                                           // 231
      var boundArgs = [];                                                                                  // 232
      for (var i = 0; i < boundLength; i++) {                                                              // 233
        array_push.call(boundArgs, '$' + i);                                                               // 234
      }                                                                                                    // 235
                                                                                                           // 236
      // Create a Function from source code so that it has the right `.length`.                            // 237
      // Probably not important for Babel.  This code violates CSPs that ban                               // 238
      // `eval`, but the browsers that need this polyfill don't have CSP!                                  // 239
      bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);
                                                                                                           // 241
      if (target.prototype) {                                                                              // 242
        Empty.prototype = target.prototype;                                                                // 243
        bound.prototype = new Empty();                                                                     // 244
        Empty.prototype = null;                                                                            // 245
      }                                                                                                    // 246
                                                                                                           // 247
      return bound;                                                                                        // 248
    };                                                                                                     // 249
                                                                                                           // 250
  })(),                                                                                                    // 251
                                                                                                           // 252
  slice: Array.prototype.slice                                                                             // 253
};                                                                                                         // 254
                                                                                                           // 255
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['babel-runtime'] = {
  babelHelpers: babelHelpers
};

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

/* Package-scope variables */
var Symbol, Map, Set, __g, __e;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                            //
// packages/ecmascript-runtime/.npm/package/node_modules/meteor-ecmascript-runtime/client.js                  //
// This file is in bare mode and is not in its own closure.                                                   //
//                                                                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                              //
/******/ (function(modules) { // webpackBootstrap                                                             // 1
/******/ 	// The module cache                                                                                 // 2
/******/ 	var installedModules = {};                                                                          // 3
                                                                                                              // 4
/******/ 	// The require function                                                                             // 5
/******/ 	function __webpack_require__(moduleId) {                                                            // 6
                                                                                                              // 7
/******/ 		// Check if module is in cache                                                                     // 8
/******/ 		if(installedModules[moduleId])                                                                     // 9
/******/ 			return installedModules[moduleId].exports;                                                        // 10
                                                                                                              // 11
/******/ 		// Create a new module (and put it into the cache)                                                 // 12
/******/ 		var module = installedModules[moduleId] = {                                                        // 13
/******/ 			exports: {},                                                                                      // 14
/******/ 			id: moduleId,                                                                                     // 15
/******/ 			loaded: false                                                                                     // 16
/******/ 		};                                                                                                 // 17
                                                                                                              // 18
/******/ 		// Execute the module function                                                                     // 19
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);               // 20
                                                                                                              // 21
/******/ 		// Flag the module as loaded                                                                       // 22
/******/ 		module.loaded = true;                                                                              // 23
                                                                                                              // 24
/******/ 		// Return the exports of the module                                                                // 25
/******/ 		return module.exports;                                                                             // 26
/******/ 	}                                                                                                   // 27
                                                                                                              // 28
                                                                                                              // 29
/******/ 	// expose the modules object (__webpack_modules__)                                                  // 30
/******/ 	__webpack_require__.m = modules;                                                                    // 31
                                                                                                              // 32
/******/ 	// expose the module cache                                                                          // 33
/******/ 	__webpack_require__.c = installedModules;                                                           // 34
                                                                                                              // 35
/******/ 	// __webpack_public_path__                                                                          // 36
/******/ 	__webpack_require__.p = "";                                                                         // 37
                                                                                                              // 38
/******/ 	// Load entry module and return exports                                                             // 39
/******/ 	return __webpack_require__(0);                                                                      // 40
/******/ })                                                                                                   // 41
/************************************************************************/                                    // 42
/******/ ([                                                                                                   // 43
/* 0 */                                                                                                       // 44
/***/ function(module, exports, __webpack_require__) {                                                        // 45
                                                                                                              // 46
	__webpack_require__(1);                                                                                      // 47
	__webpack_require__(50);                                                                                     // 48
	__webpack_require__(77);                                                                                     // 49
	__webpack_require__(96);                                                                                     // 50
                                                                                                              // 51
	Symbol = exports.Symbol = __webpack_require__(99);                                                           // 52
	Map = exports.Map = __webpack_require__(100);                                                                // 53
	Set = exports.Set = __webpack_require__(108);                                                                // 54
                                                                                                              // 55
                                                                                                              // 56
/***/ },                                                                                                      // 57
/* 1 */                                                                                                       // 58
/***/ function(module, exports, __webpack_require__) {                                                        // 59
                                                                                                              // 60
	__webpack_require__(2);                                                                                      // 61
	__webpack_require__(28);                                                                                     // 62
	__webpack_require__(31);                                                                                     // 63
	__webpack_require__(33);                                                                                     // 64
	__webpack_require__(37);                                                                                     // 65
	__webpack_require__(39);                                                                                     // 66
	__webpack_require__(41);                                                                                     // 67
	__webpack_require__(42);                                                                                     // 68
	__webpack_require__(43);                                                                                     // 69
	__webpack_require__(44);                                                                                     // 70
	__webpack_require__(45);                                                                                     // 71
	__webpack_require__(46);                                                                                     // 72
	__webpack_require__(47);                                                                                     // 73
	__webpack_require__(48);                                                                                     // 74
	__webpack_require__(49);                                                                                     // 75
                                                                                                              // 76
	module.exports = __webpack_require__(9).Object;                                                              // 77
                                                                                                              // 78
/***/ },                                                                                                      // 79
/* 2 */                                                                                                       // 80
/***/ function(module, exports, __webpack_require__) {                                                        // 81
                                                                                                              // 82
	'use strict';                                                                                                // 83
	// ECMAScript 6 symbols shim                                                                                 // 84
	var $              = __webpack_require__(3)                                                                  // 85
	  , global         = __webpack_require__(4)                                                                  // 86
	  , has            = __webpack_require__(5)                                                                  // 87
	  , SUPPORT_DESC   = __webpack_require__(6)                                                                  // 88
	  , $def           = __webpack_require__(8)                                                                  // 89
	  , $redef         = __webpack_require__(12)                                                                 // 90
	  , $fails         = __webpack_require__(7)                                                                  // 91
	  , shared         = __webpack_require__(14)                                                                 // 92
	  , setTag         = __webpack_require__(15)                                                                 // 93
	  , uid            = __webpack_require__(13)                                                                 // 94
	  , wks            = __webpack_require__(16)                                                                 // 95
	  , keyOf          = __webpack_require__(17)                                                                 // 96
	  , $names         = __webpack_require__(22)                                                                 // 97
	  , enumKeys       = __webpack_require__(23)                                                                 // 98
	  , isArray        = __webpack_require__(24)                                                                 // 99
	  , isObject       = __webpack_require__(25)                                                                 // 100
	  , anObject       = __webpack_require__(26)                                                                 // 101
	  , toIObject      = __webpack_require__(18)                                                                 // 102
	  , createDesc     = __webpack_require__(11)                                                                 // 103
	  , getDesc        = $.getDesc                                                                               // 104
	  , setDesc        = $.setDesc                                                                               // 105
	  , _create        = $.create                                                                                // 106
	  , getNames       = $names.get                                                                              // 107
	  , $Symbol        = global.Symbol                                                                           // 108
	  , $JSON          = global.JSON                                                                             // 109
	  , _stringify     = $JSON && $JSON.stringify                                                                // 110
	  , setter         = false                                                                                   // 111
	  , HIDDEN         = wks('_hidden')                                                                          // 112
	  , isEnum         = $.isEnum                                                                                // 113
	  , SymbolRegistry = shared('symbol-registry')                                                               // 114
	  , AllSymbols     = shared('symbols')                                                                       // 115
	  , useNative      = typeof $Symbol == 'function'                                                            // 116
	  , ObjectProto    = Object.prototype;                                                                       // 117
                                                                                                              // 118
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687                               // 119
	var setSymbolDesc = SUPPORT_DESC && $fails(function(){                                                       // 120
	  return _create(setDesc({}, 'a', {                                                                          // 121
	    get: function(){ return setDesc(this, 'a', {value: 7}).a; }                                              // 122
	  })).a != 7;                                                                                                // 123
	}) ? function(it, key, D){                                                                                   // 124
	  var protoDesc = getDesc(ObjectProto, key);                                                                 // 125
	  if(protoDesc)delete ObjectProto[key];                                                                      // 126
	  setDesc(it, key, D);                                                                                       // 127
	  if(protoDesc && it !== ObjectProto)setDesc(ObjectProto, key, protoDesc);                                   // 128
	} : setDesc;                                                                                                 // 129
                                                                                                              // 130
	var wrap = function(tag){                                                                                    // 131
	  var sym = AllSymbols[tag] = _create($Symbol.prototype);                                                    // 132
	  sym._k = tag;                                                                                              // 133
	  SUPPORT_DESC && setter && setSymbolDesc(ObjectProto, tag, {                                                // 134
	    configurable: true,                                                                                      // 135
	    set: function(value){                                                                                    // 136
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;                              // 137
	      setSymbolDesc(this, tag, createDesc(1, value));                                                        // 138
	    }                                                                                                        // 139
	  });                                                                                                        // 140
	  return sym;                                                                                                // 141
	};                                                                                                           // 142
                                                                                                              // 143
	var isSymbol = function(it){                                                                                 // 144
	  return typeof it == 'symbol';                                                                              // 145
	};                                                                                                           // 146
                                                                                                              // 147
	var $defineProperty = function defineProperty(it, key, D){                                                   // 148
	  if(D && has(AllSymbols, key)){                                                                             // 149
	    if(!D.enumerable){                                                                                       // 150
	      if(!has(it, HIDDEN))setDesc(it, HIDDEN, createDesc(1, {}));                                            // 151
	      it[HIDDEN][key] = true;                                                                                // 152
	    } else {                                                                                                 // 153
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;                                         // 154
	      D = _create(D, {enumerable: createDesc(0, false)});                                                    // 155
	    } return setSymbolDesc(it, key, D);                                                                      // 156
	  } return setDesc(it, key, D);                                                                              // 157
	};                                                                                                           // 158
	var $defineProperties = function defineProperties(it, P){                                                    // 159
	  anObject(it);                                                                                              // 160
	  var keys = enumKeys(P = toIObject(P))                                                                      // 161
	    , i    = 0                                                                                               // 162
	    , l = keys.length                                                                                        // 163
	    , key;                                                                                                   // 164
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);                                                  // 165
	  return it;                                                                                                 // 166
	};                                                                                                           // 167
	var $create = function create(it, P){                                                                        // 168
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);                                  // 169
	};                                                                                                           // 170
	var $propertyIsEnumerable = function propertyIsEnumerable(key){                                              // 171
	  var E = isEnum.call(this, key);                                                                            // 172
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key]             // 173
	    ? E : true;                                                                                              // 174
	};                                                                                                           // 175
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){                                  // 176
	  var D = getDesc(it = toIObject(it), key);                                                                  // 177
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;                 // 178
	  return D;                                                                                                  // 179
	};                                                                                                           // 180
	var $getOwnPropertyNames = function getOwnPropertyNames(it){                                                 // 181
	  var names  = getNames(toIObject(it))                                                                       // 182
	    , result = []                                                                                            // 183
	    , i      = 0                                                                                             // 184
	    , key;                                                                                                   // 185
	  while(names.length > i)if(!has(AllSymbols, key = names[i++]) && key != HIDDEN)result.push(key);            // 186
	  return result;                                                                                             // 187
	};                                                                                                           // 188
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){                                             // 189
	  var names  = getNames(toIObject(it))                                                                       // 190
	    , result = []                                                                                            // 191
	    , i      = 0                                                                                             // 192
	    , key;                                                                                                   // 193
	  while(names.length > i)if(has(AllSymbols, key = names[i++]))result.push(AllSymbols[key]);                  // 194
	  return result;                                                                                             // 195
	};                                                                                                           // 196
	var $stringify = function stringify(it){                                                                     // 197
	  var args = [it]                                                                                            // 198
	    , i    = 1                                                                                               // 199
	    , replacer, $replacer;                                                                                   // 200
	  while(arguments.length > i)args.push(arguments[i++]);                                                      // 201
	  replacer = args[1];                                                                                        // 202
	  if(typeof replacer == 'function')$replacer = replacer;                                                     // 203
	  if($replacer || !isArray(replacer))replacer = function(key, value){                                        // 204
	    if($replacer)value = $replacer.call(this, key, value);                                                   // 205
	    if(!isSymbol(value))return value;                                                                        // 206
	  };                                                                                                         // 207
	  args[1] = replacer;                                                                                        // 208
	  return _stringify.apply($JSON, args);                                                                      // 209
	};                                                                                                           // 210
	var buggyJSON = $fails(function(){                                                                           // 211
	  var S = $Symbol();                                                                                         // 212
	  // MS Edge converts symbol values to JSON as {}                                                            // 213
	  // WebKit converts symbol values to JSON as null                                                           // 214
	  // V8 throws on boxed symbols                                                                              // 215
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';         // 216
	});                                                                                                          // 217
                                                                                                              // 218
	// 19.4.1.1 Symbol([description])                                                                            // 219
	if(!useNative){                                                                                              // 220
	  $Symbol = function Symbol(){                                                                               // 221
	    if(isSymbol(this))throw TypeError('Symbol is not a constructor');                                        // 222
	    return wrap(uid(arguments[0]));                                                                          // 223
	  };                                                                                                         // 224
	  $redef($Symbol.prototype, 'toString', function toString(){                                                 // 225
	    return this._k;                                                                                          // 226
	  });                                                                                                        // 227
                                                                                                              // 228
	  isSymbol = function(it){                                                                                   // 229
	    return it instanceof $Symbol;                                                                            // 230
	  };                                                                                                         // 231
                                                                                                              // 232
	  $.create     = $create;                                                                                    // 233
	  $.isEnum     = $propertyIsEnumerable;                                                                      // 234
	  $.getDesc    = $getOwnPropertyDescriptor;                                                                  // 235
	  $.setDesc    = $defineProperty;                                                                            // 236
	  $.setDescs   = $defineProperties;                                                                          // 237
	  $.getNames   = $names.get = $getOwnPropertyNames;                                                          // 238
	  $.getSymbols = $getOwnPropertySymbols;                                                                     // 239
                                                                                                              // 240
	  if(SUPPORT_DESC && !__webpack_require__(27)){                                                              // 241
	    $redef(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);                                // 242
	  }                                                                                                          // 243
	}                                                                                                            // 244
                                                                                                              // 245
	var symbolStatics = {                                                                                        // 246
	  // 19.4.2.1 Symbol.for(key)                                                                                // 247
	  'for': function(key){                                                                                      // 248
	    return has(SymbolRegistry, key += '')                                                                    // 249
	      ? SymbolRegistry[key]                                                                                  // 250
	      : SymbolRegistry[key] = $Symbol(key);                                                                  // 251
	  },                                                                                                         // 252
	  // 19.4.2.5 Symbol.keyFor(sym)                                                                             // 253
	  keyFor: function keyFor(key){                                                                              // 254
	    return keyOf(SymbolRegistry, key);                                                                       // 255
	  },                                                                                                         // 256
	  useSetter: function(){ setter = true; },                                                                   // 257
	  useSimple: function(){ setter = false; }                                                                   // 258
	};                                                                                                           // 259
	// 19.4.2.2 Symbol.hasInstance                                                                               // 260
	// 19.4.2.3 Symbol.isConcatSpreadable                                                                        // 261
	// 19.4.2.4 Symbol.iterator                                                                                  // 262
	// 19.4.2.6 Symbol.match                                                                                     // 263
	// 19.4.2.8 Symbol.replace                                                                                   // 264
	// 19.4.2.9 Symbol.search                                                                                    // 265
	// 19.4.2.10 Symbol.species                                                                                  // 266
	// 19.4.2.11 Symbol.split                                                                                    // 267
	// 19.4.2.12 Symbol.toPrimitive                                                                              // 268
	// 19.4.2.13 Symbol.toStringTag                                                                              // 269
	// 19.4.2.14 Symbol.unscopables                                                                              // 270
	$.each.call((                                                                                                // 271
	    'hasInstance,isConcatSpreadable,iterator,match,replace,search,' +                                        // 272
	    'species,split,toPrimitive,toStringTag,unscopables'                                                      // 273
	  ).split(','), function(it){                                                                                // 274
	    var sym = wks(it);                                                                                       // 275
	    symbolStatics[it] = useNative ? sym : wrap(sym);                                                         // 276
	  }                                                                                                          // 277
	);                                                                                                           // 278
                                                                                                              // 279
	setter = true;                                                                                               // 280
                                                                                                              // 281
	$def($def.G + $def.W, {Symbol: $Symbol});                                                                    // 282
                                                                                                              // 283
	$def($def.S, 'Symbol', symbolStatics);                                                                       // 284
                                                                                                              // 285
	$def($def.S + $def.F * !useNative, 'Object', {                                                               // 286
	  // 19.1.2.2 Object.create(O [, Properties])                                                                // 287
	  create: $create,                                                                                           // 288
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)                                                        // 289
	  defineProperty: $defineProperty,                                                                           // 290
	  // 19.1.2.3 Object.defineProperties(O, Properties)                                                         // 291
	  defineProperties: $defineProperties,                                                                       // 292
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)                                                          // 293
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,                                                       // 294
	  // 19.1.2.7 Object.getOwnPropertyNames(O)                                                                  // 295
	  getOwnPropertyNames: $getOwnPropertyNames,                                                                 // 296
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)                                                                // 297
	  getOwnPropertySymbols: $getOwnPropertySymbols                                                              // 298
	});                                                                                                          // 299
                                                                                                              // 300
	// 24.3.2 JSON.stringify(value [, replacer [, space]])                                                       // 301
	$JSON && $def($def.S + $def.F * (!useNative || buggyJSON), 'JSON', {stringify: $stringify});                 // 302
                                                                                                              // 303
	// 19.4.3.5 Symbol.prototype[@@toStringTag]                                                                  // 304
	setTag($Symbol, 'Symbol');                                                                                   // 305
	// 20.2.1.9 Math[@@toStringTag]                                                                              // 306
	setTag(Math, 'Math', true);                                                                                  // 307
	// 24.3.3 JSON[@@toStringTag]                                                                                // 308
	setTag(global.JSON, 'JSON', true);                                                                           // 309
                                                                                                              // 310
/***/ },                                                                                                      // 311
/* 3 */                                                                                                       // 312
/***/ function(module, exports) {                                                                             // 313
                                                                                                              // 314
	var $Object = Object;                                                                                        // 315
	module.exports = {                                                                                           // 316
	  create:     $Object.create,                                                                                // 317
	  getProto:   $Object.getPrototypeOf,                                                                        // 318
	  isEnum:     {}.propertyIsEnumerable,                                                                       // 319
	  getDesc:    $Object.getOwnPropertyDescriptor,                                                              // 320
	  setDesc:    $Object.defineProperty,                                                                        // 321
	  setDescs:   $Object.defineProperties,                                                                      // 322
	  getKeys:    $Object.keys,                                                                                  // 323
	  getNames:   $Object.getOwnPropertyNames,                                                                   // 324
	  getSymbols: $Object.getOwnPropertySymbols,                                                                 // 325
	  each:       [].forEach                                                                                     // 326
	};                                                                                                           // 327
                                                                                                              // 328
/***/ },                                                                                                      // 329
/* 4 */                                                                                                       // 330
/***/ function(module, exports) {                                                                             // 331
                                                                                                              // 332
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028                                      // 333
	var UNDEFINED = 'undefined';                                                                                 // 334
	var global = module.exports = typeof window != UNDEFINED && window.Math == Math                              // 335
	  ? window : typeof self != UNDEFINED && self.Math == Math ? self : Function('return this')();               // 336
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef                                      // 337
                                                                                                              // 338
/***/ },                                                                                                      // 339
/* 5 */                                                                                                       // 340
/***/ function(module, exports) {                                                                             // 341
                                                                                                              // 342
	var hasOwnProperty = {}.hasOwnProperty;                                                                      // 343
	module.exports = function(it, key){                                                                          // 344
	  return hasOwnProperty.call(it, key);                                                                       // 345
	};                                                                                                           // 346
                                                                                                              // 347
/***/ },                                                                                                      // 348
/* 6 */                                                                                                       // 349
/***/ function(module, exports, __webpack_require__) {                                                        // 350
                                                                                                              // 351
	// Thank's IE8 for his funny defineProperty                                                                  // 352
	module.exports = !__webpack_require__(7)(function(){                                                         // 353
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;                              // 354
	});                                                                                                          // 355
                                                                                                              // 356
/***/ },                                                                                                      // 357
/* 7 */                                                                                                       // 358
/***/ function(module, exports) {                                                                             // 359
                                                                                                              // 360
	module.exports = function(exec){                                                                             // 361
	  try {                                                                                                      // 362
	    return !!exec();                                                                                         // 363
	  } catch(e){                                                                                                // 364
	    return true;                                                                                             // 365
	  }                                                                                                          // 366
	};                                                                                                           // 367
                                                                                                              // 368
/***/ },                                                                                                      // 369
/* 8 */                                                                                                       // 370
/***/ function(module, exports, __webpack_require__) {                                                        // 371
                                                                                                              // 372
	var global     = __webpack_require__(4)                                                                      // 373
	  , core       = __webpack_require__(9)                                                                      // 374
	  , hide       = __webpack_require__(10)                                                                     // 375
	  , $redef     = __webpack_require__(12)                                                                     // 376
	  , PROTOTYPE  = 'prototype';                                                                                // 377
	var ctx = function(fn, that){                                                                                // 378
	  return function(){                                                                                         // 379
	    return fn.apply(that, arguments);                                                                        // 380
	  };                                                                                                         // 381
	};                                                                                                           // 382
	var $def = function(type, name, source){                                                                     // 383
	  var key, own, out, exp                                                                                     // 384
	    , isGlobal = type & $def.G                                                                               // 385
	    , isProto  = type & $def.P                                                                               // 386
	    , target   = isGlobal ? global : type & $def.S                                                           // 387
	        ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]                              // 388
	    , exports  = isGlobal ? core : core[name] || (core[name] = {});                                          // 389
	  if(isGlobal)source = name;                                                                                 // 390
	  for(key in source){                                                                                        // 391
	    // contains in native                                                                                    // 392
	    own = !(type & $def.F) && target && key in target;                                                       // 393
	    // export native or passed                                                                               // 394
	    out = (own ? target : source)[key];                                                                      // 395
	    // bind timers to global for call from export context                                                    // 396
	    if(type & $def.B && own)exp = ctx(out, global);                                                          // 397
	    else exp = isProto && typeof out == 'function' ? ctx(Function.call, out) : out;                          // 398
	    // extend global                                                                                         // 399
	    if(target && !own)$redef(target, key, out);                                                              // 400
	    // export                                                                                                // 401
	    if(exports[key] != out)hide(exports, key, exp);                                                          // 402
	    if(isProto)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;                                 // 403
	  }                                                                                                          // 404
	};                                                                                                           // 405
	global.core = core;                                                                                          // 406
	// type bitmap                                                                                               // 407
	$def.F = 1;  // forced                                                                                       // 408
	$def.G = 2;  // global                                                                                       // 409
	$def.S = 4;  // static                                                                                       // 410
	$def.P = 8;  // proto                                                                                        // 411
	$def.B = 16; // bind                                                                                         // 412
	$def.W = 32; // wrap                                                                                         // 413
	module.exports = $def;                                                                                       // 414
                                                                                                              // 415
/***/ },                                                                                                      // 416
/* 9 */                                                                                                       // 417
/***/ function(module, exports) {                                                                             // 418
                                                                                                              // 419
	var core = module.exports = {version: '1.2.1'};                                                              // 420
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef                                        // 421
                                                                                                              // 422
/***/ },                                                                                                      // 423
/* 10 */                                                                                                      // 424
/***/ function(module, exports, __webpack_require__) {                                                        // 425
                                                                                                              // 426
	var $          = __webpack_require__(3)                                                                      // 427
	  , createDesc = __webpack_require__(11);                                                                    // 428
	module.exports = __webpack_require__(6) ? function(object, key, value){                                      // 429
	  return $.setDesc(object, key, createDesc(1, value));                                                       // 430
	} : function(object, key, value){                                                                            // 431
	  object[key] = value;                                                                                       // 432
	  return object;                                                                                             // 433
	};                                                                                                           // 434
                                                                                                              // 435
/***/ },                                                                                                      // 436
/* 11 */                                                                                                      // 437
/***/ function(module, exports) {                                                                             // 438
                                                                                                              // 439
	module.exports = function(bitmap, value){                                                                    // 440
	  return {                                                                                                   // 441
	    enumerable  : !(bitmap & 1),                                                                             // 442
	    configurable: !(bitmap & 2),                                                                             // 443
	    writable    : !(bitmap & 4),                                                                             // 444
	    value       : value                                                                                      // 445
	  };                                                                                                         // 446
	};                                                                                                           // 447
                                                                                                              // 448
/***/ },                                                                                                      // 449
/* 12 */                                                                                                      // 450
/***/ function(module, exports, __webpack_require__) {                                                        // 451
                                                                                                              // 452
	// add fake Function#toString                                                                                // 453
	// for correct work wrapped methods / constructors with methods like LoDash isNative                         // 454
	var global    = __webpack_require__(4)                                                                       // 455
	  , hide      = __webpack_require__(10)                                                                      // 456
	  , SRC       = __webpack_require__(13)('src')                                                               // 457
	  , TO_STRING = 'toString'                                                                                   // 458
	  , $toString = Function[TO_STRING]                                                                          // 459
	  , TPL       = ('' + $toString).split(TO_STRING);                                                           // 460
                                                                                                              // 461
	__webpack_require__(9).inspectSource = function(it){                                                         // 462
	  return $toString.call(it);                                                                                 // 463
	};                                                                                                           // 464
                                                                                                              // 465
	(module.exports = function(O, key, val, safe){                                                               // 466
	  if(typeof val == 'function'){                                                                              // 467
	    hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));                                            // 468
	    if(!('name' in val))val.name = key;                                                                      // 469
	  }                                                                                                          // 470
	  if(O === global){                                                                                          // 471
	    O[key] = val;                                                                                            // 472
	  } else {                                                                                                   // 473
	    if(!safe)delete O[key];                                                                                  // 474
	    hide(O, key, val);                                                                                       // 475
	  }                                                                                                          // 476
	})(Function.prototype, TO_STRING, function toString(){                                                       // 477
	  return typeof this == 'function' && this[SRC] || $toString.call(this);                                     // 478
	});                                                                                                          // 479
                                                                                                              // 480
/***/ },                                                                                                      // 481
/* 13 */                                                                                                      // 482
/***/ function(module, exports) {                                                                             // 483
                                                                                                              // 484
	var id = 0                                                                                                   // 485
	  , px = Math.random();                                                                                      // 486
	module.exports = function(key){                                                                              // 487
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));                     // 488
	};                                                                                                           // 489
                                                                                                              // 490
/***/ },                                                                                                      // 491
/* 14 */                                                                                                      // 492
/***/ function(module, exports, __webpack_require__) {                                                        // 493
                                                                                                              // 494
	var global = __webpack_require__(4)                                                                          // 495
	  , SHARED = '__core-js_shared__'                                                                            // 496
	  , store  = global[SHARED] || (global[SHARED] = {});                                                        // 497
	module.exports = function(key){                                                                              // 498
	  return store[key] || (store[key] = {});                                                                    // 499
	};                                                                                                           // 500
                                                                                                              // 501
/***/ },                                                                                                      // 502
/* 15 */                                                                                                      // 503
/***/ function(module, exports, __webpack_require__) {                                                        // 504
                                                                                                              // 505
	var has  = __webpack_require__(5)                                                                            // 506
	  , hide = __webpack_require__(10)                                                                           // 507
	  , TAG  = __webpack_require__(16)('toStringTag');                                                           // 508
                                                                                                              // 509
	module.exports = function(it, tag, stat){                                                                    // 510
	  if(it && !has(it = stat ? it : it.prototype, TAG))hide(it, TAG, tag);                                      // 511
	};                                                                                                           // 512
                                                                                                              // 513
/***/ },                                                                                                      // 514
/* 16 */                                                                                                      // 515
/***/ function(module, exports, __webpack_require__) {                                                        // 516
                                                                                                              // 517
	var store  = __webpack_require__(14)('wks')                                                                  // 518
	  , Symbol = __webpack_require__(4).Symbol;                                                                  // 519
	module.exports = function(name){                                                                             // 520
	  return store[name] || (store[name] =                                                                       // 521
	    Symbol && Symbol[name] || (Symbol || __webpack_require__(13))('Symbol.' + name));                        // 522
	};                                                                                                           // 523
                                                                                                              // 524
/***/ },                                                                                                      // 525
/* 17 */                                                                                                      // 526
/***/ function(module, exports, __webpack_require__) {                                                        // 527
                                                                                                              // 528
	var $         = __webpack_require__(3)                                                                       // 529
	  , toIObject = __webpack_require__(18);                                                                     // 530
	module.exports = function(object, el){                                                                       // 531
	  var O      = toIObject(object)                                                                             // 532
	    , keys   = $.getKeys(O)                                                                                  // 533
	    , length = keys.length                                                                                   // 534
	    , index  = 0                                                                                             // 535
	    , key;                                                                                                   // 536
	  while(length > index)if(O[key = keys[index++]] === el)return key;                                          // 537
	};                                                                                                           // 538
                                                                                                              // 539
/***/ },                                                                                                      // 540
/* 18 */                                                                                                      // 541
/***/ function(module, exports, __webpack_require__) {                                                        // 542
                                                                                                              // 543
	// to indexed object, toObject with fallback for non-array-like ES3 strings                                  // 544
	var IObject = __webpack_require__(19)                                                                        // 545
	  , defined = __webpack_require__(21);                                                                       // 546
	module.exports = function(it){                                                                               // 547
	  return IObject(defined(it));                                                                               // 548
	};                                                                                                           // 549
                                                                                                              // 550
/***/ },                                                                                                      // 551
/* 19 */                                                                                                      // 552
/***/ function(module, exports, __webpack_require__) {                                                        // 553
                                                                                                              // 554
	// indexed object, fallback for non-array-like ES3 strings                                                   // 555
	var cof = __webpack_require__(20);                                                                           // 556
	module.exports = 0 in Object('z') ? Object : function(it){                                                   // 557
	  return cof(it) == 'String' ? it.split('') : Object(it);                                                    // 558
	};                                                                                                           // 559
                                                                                                              // 560
/***/ },                                                                                                      // 561
/* 20 */                                                                                                      // 562
/***/ function(module, exports) {                                                                             // 563
                                                                                                              // 564
	var toString = {}.toString;                                                                                  // 565
                                                                                                              // 566
	module.exports = function(it){                                                                               // 567
	  return toString.call(it).slice(8, -1);                                                                     // 568
	};                                                                                                           // 569
                                                                                                              // 570
/***/ },                                                                                                      // 571
/* 21 */                                                                                                      // 572
/***/ function(module, exports) {                                                                             // 573
                                                                                                              // 574
	// 7.2.1 RequireObjectCoercible(argument)                                                                    // 575
	module.exports = function(it){                                                                               // 576
	  if(it == undefined)throw TypeError("Can't call method on  " + it);                                         // 577
	  return it;                                                                                                 // 578
	};                                                                                                           // 579
                                                                                                              // 580
/***/ },                                                                                                      // 581
/* 22 */                                                                                                      // 582
/***/ function(module, exports, __webpack_require__) {                                                        // 583
                                                                                                              // 584
	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window                                 // 585
	var toString  = {}.toString                                                                                  // 586
	  , toIObject = __webpack_require__(18)                                                                      // 587
	  , getNames  = __webpack_require__(3).getNames;                                                             // 588
                                                                                                              // 589
	var windowNames = typeof window == 'object' && Object.getOwnPropertyNames                                    // 590
	  ? Object.getOwnPropertyNames(window) : [];                                                                 // 591
                                                                                                              // 592
	var getWindowNames = function(it){                                                                           // 593
	  try {                                                                                                      // 594
	    return getNames(it);                                                                                     // 595
	  } catch(e){                                                                                                // 596
	    return windowNames.slice();                                                                              // 597
	  }                                                                                                          // 598
	};                                                                                                           // 599
                                                                                                              // 600
	module.exports.get = function getOwnPropertyNames(it){                                                       // 601
	  if(windowNames && toString.call(it) == '[object Window]')return getWindowNames(it);                        // 602
	  return getNames(toIObject(it));                                                                            // 603
	};                                                                                                           // 604
                                                                                                              // 605
/***/ },                                                                                                      // 606
/* 23 */                                                                                                      // 607
/***/ function(module, exports, __webpack_require__) {                                                        // 608
                                                                                                              // 609
	// all enumerable object keys, includes symbols                                                              // 610
	var $ = __webpack_require__(3);                                                                              // 611
	module.exports = function(it){                                                                               // 612
	  var keys       = $.getKeys(it)                                                                             // 613
	    , getSymbols = $.getSymbols;                                                                             // 614
	  if(getSymbols){                                                                                            // 615
	    var symbols = getSymbols(it)                                                                             // 616
	      , isEnum  = $.isEnum                                                                                   // 617
	      , i       = 0                                                                                          // 618
	      , key;                                                                                                 // 619
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))keys.push(key);                          // 620
	  }                                                                                                          // 621
	  return keys;                                                                                               // 622
	};                                                                                                           // 623
                                                                                                              // 624
/***/ },                                                                                                      // 625
/* 24 */                                                                                                      // 626
/***/ function(module, exports, __webpack_require__) {                                                        // 627
                                                                                                              // 628
	// 7.2.2 IsArray(argument)                                                                                   // 629
	var cof = __webpack_require__(20);                                                                           // 630
	module.exports = Array.isArray || function(arg){                                                             // 631
	  return cof(arg) == 'Array';                                                                                // 632
	};                                                                                                           // 633
                                                                                                              // 634
/***/ },                                                                                                      // 635
/* 25 */                                                                                                      // 636
/***/ function(module, exports) {                                                                             // 637
                                                                                                              // 638
	module.exports = function(it){                                                                               // 639
	  return typeof it === 'object' ? it !== null : typeof it === 'function';                                    // 640
	};                                                                                                           // 641
                                                                                                              // 642
/***/ },                                                                                                      // 643
/* 26 */                                                                                                      // 644
/***/ function(module, exports, __webpack_require__) {                                                        // 645
                                                                                                              // 646
	var isObject = __webpack_require__(25);                                                                      // 647
	module.exports = function(it){                                                                               // 648
	  if(!isObject(it))throw TypeError(it + ' is not an object!');                                               // 649
	  return it;                                                                                                 // 650
	};                                                                                                           // 651
                                                                                                              // 652
/***/ },                                                                                                      // 653
/* 27 */                                                                                                      // 654
/***/ function(module, exports) {                                                                             // 655
                                                                                                              // 656
	module.exports = false;                                                                                      // 657
                                                                                                              // 658
/***/ },                                                                                                      // 659
/* 28 */                                                                                                      // 660
/***/ function(module, exports, __webpack_require__) {                                                        // 661
                                                                                                              // 662
	// 19.1.3.1 Object.assign(target, source)                                                                    // 663
	var $def = __webpack_require__(8);                                                                           // 664
                                                                                                              // 665
	$def($def.S + $def.F, 'Object', {assign: __webpack_require__(29)});                                          // 666
                                                                                                              // 667
/***/ },                                                                                                      // 668
/* 29 */                                                                                                      // 669
/***/ function(module, exports, __webpack_require__) {                                                        // 670
                                                                                                              // 671
	// 19.1.2.1 Object.assign(target, source, ...)                                                               // 672
	var toObject = __webpack_require__(30)                                                                       // 673
	  , IObject  = __webpack_require__(19)                                                                       // 674
	  , enumKeys = __webpack_require__(23)                                                                       // 675
	  , has      = __webpack_require__(5);                                                                       // 676
                                                                                                              // 677
	// should work with symbols and should have deterministic property order (V8 bug)                            // 678
	module.exports = __webpack_require__(7)(function(){                                                          // 679
	  var a = Object.assign                                                                                      // 680
	    , A = {}                                                                                                 // 681
	    , B = {}                                                                                                 // 682
	    , S = Symbol()                                                                                           // 683
	    , K = 'abcdefghijklmnopqrst';                                                                            // 684
	  A[S] = 7;                                                                                                  // 685
	  K.split('').forEach(function(k){ B[k] = k; });                                                             // 686
	  return a({}, A)[S] != 7 || Object.keys(a({}, B)).join('') != K;                                            // 687
	}) ? function assign(target, source){   // eslint-disable-line no-unused-vars                                // 688
	  var T = toObject(target)                                                                                   // 689
	    , l = arguments.length                                                                                   // 690
	    , i = 1;                                                                                                 // 691
	  while(l > i){                                                                                              // 692
	    var S      = IObject(arguments[i++])                                                                     // 693
	      , keys   = enumKeys(S)                                                                                 // 694
	      , length = keys.length                                                                                 // 695
	      , j      = 0                                                                                           // 696
	      , key;                                                                                                 // 697
	    while(length > j)if(has(S, key = keys[j++]))T[key] = S[key];                                             // 698
	  }                                                                                                          // 699
	  return T;                                                                                                  // 700
	} : Object.assign;                                                                                           // 701
                                                                                                              // 702
/***/ },                                                                                                      // 703
/* 30 */                                                                                                      // 704
/***/ function(module, exports, __webpack_require__) {                                                        // 705
                                                                                                              // 706
	// 7.1.13 ToObject(argument)                                                                                 // 707
	var defined = __webpack_require__(21);                                                                       // 708
	module.exports = function(it){                                                                               // 709
	  return Object(defined(it));                                                                                // 710
	};                                                                                                           // 711
                                                                                                              // 712
/***/ },                                                                                                      // 713
/* 31 */                                                                                                      // 714
/***/ function(module, exports, __webpack_require__) {                                                        // 715
                                                                                                              // 716
	// 19.1.3.10 Object.is(value1, value2)                                                                       // 717
	var $def = __webpack_require__(8);                                                                           // 718
	$def($def.S, 'Object', {                                                                                     // 719
	  is: __webpack_require__(32)                                                                                // 720
	});                                                                                                          // 721
                                                                                                              // 722
/***/ },                                                                                                      // 723
/* 32 */                                                                                                      // 724
/***/ function(module, exports) {                                                                             // 725
                                                                                                              // 726
	module.exports = Object.is || function is(x, y){                                                             // 727
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;                                            // 728
	};                                                                                                           // 729
                                                                                                              // 730
/***/ },                                                                                                      // 731
/* 33 */                                                                                                      // 732
/***/ function(module, exports, __webpack_require__) {                                                        // 733
                                                                                                              // 734
	// 19.1.3.19 Object.setPrototypeOf(O, proto)                                                                 // 735
	var $def = __webpack_require__(8);                                                                           // 736
	$def($def.S, 'Object', {setPrototypeOf: __webpack_require__(34).set});                                       // 737
                                                                                                              // 738
/***/ },                                                                                                      // 739
/* 34 */                                                                                                      // 740
/***/ function(module, exports, __webpack_require__) {                                                        // 741
                                                                                                              // 742
	// Works with __proto__ only. Old v8 can't work with null proto objects.                                     // 743
	/* eslint-disable no-proto */                                                                                // 744
	var getDesc  = __webpack_require__(3).getDesc                                                                // 745
	  , isObject = __webpack_require__(25)                                                                       // 746
	  , anObject = __webpack_require__(26);                                                                      // 747
	var check = function(O, proto){                                                                              // 748
	  anObject(O);                                                                                               // 749
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");                // 750
	};                                                                                                           // 751
	module.exports = {                                                                                           // 752
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line no-proto                         // 753
	    function(test, buggy, set){                                                                              // 754
	      try {                                                                                                  // 755
	        set = __webpack_require__(35)(Function.call, getDesc(Object.prototype, '__proto__').set, 2);         // 756
	        set(test, []);                                                                                       // 757
	        buggy = !(test instanceof Array);                                                                    // 758
	      } catch(e){ buggy = true; }                                                                            // 759
	      return function setPrototypeOf(O, proto){                                                              // 760
	        check(O, proto);                                                                                     // 761
	        if(buggy)O.__proto__ = proto;                                                                        // 762
	        else set(O, proto);                                                                                  // 763
	        return O;                                                                                            // 764
	      };                                                                                                     // 765
	    }({}, false) : undefined),                                                                               // 766
	  check: check                                                                                               // 767
	};                                                                                                           // 768
                                                                                                              // 769
/***/ },                                                                                                      // 770
/* 35 */                                                                                                      // 771
/***/ function(module, exports, __webpack_require__) {                                                        // 772
                                                                                                              // 773
	// optional / simple context binding                                                                         // 774
	var aFunction = __webpack_require__(36);                                                                     // 775
	module.exports = function(fn, that, length){                                                                 // 776
	  aFunction(fn);                                                                                             // 777
	  if(that === undefined)return fn;                                                                           // 778
	  switch(length){                                                                                            // 779
	    case 1: return function(a){                                                                              // 780
	      return fn.call(that, a);                                                                               // 781
	    };                                                                                                       // 782
	    case 2: return function(a, b){                                                                           // 783
	      return fn.call(that, a, b);                                                                            // 784
	    };                                                                                                       // 785
	    case 3: return function(a, b, c){                                                                        // 786
	      return fn.call(that, a, b, c);                                                                         // 787
	    };                                                                                                       // 788
	  }                                                                                                          // 789
	  return function(/* ...args */){                                                                            // 790
	    return fn.apply(that, arguments);                                                                        // 791
	  };                                                                                                         // 792
	};                                                                                                           // 793
                                                                                                              // 794
/***/ },                                                                                                      // 795
/* 36 */                                                                                                      // 796
/***/ function(module, exports) {                                                                             // 797
                                                                                                              // 798
	module.exports = function(it){                                                                               // 799
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');                                    // 800
	  return it;                                                                                                 // 801
	};                                                                                                           // 802
                                                                                                              // 803
/***/ },                                                                                                      // 804
/* 37 */                                                                                                      // 805
/***/ function(module, exports, __webpack_require__) {                                                        // 806
                                                                                                              // 807
	'use strict';                                                                                                // 808
	// 19.1.3.6 Object.prototype.toString()                                                                      // 809
	var classof = __webpack_require__(38)                                                                        // 810
	  , test    = {};                                                                                            // 811
	test[__webpack_require__(16)('toStringTag')] = 'z';                                                          // 812
	if(test + '' != '[object z]'){                                                                               // 813
	  __webpack_require__(12)(Object.prototype, 'toString', function toString(){                                 // 814
	    return '[object ' + classof(this) + ']';                                                                 // 815
	  }, true);                                                                                                  // 816
	}                                                                                                            // 817
                                                                                                              // 818
/***/ },                                                                                                      // 819
/* 38 */                                                                                                      // 820
/***/ function(module, exports, __webpack_require__) {                                                        // 821
                                                                                                              // 822
	// getting tag from 19.1.3.6 Object.prototype.toString()                                                     // 823
	var cof = __webpack_require__(20)                                                                            // 824
	  , TAG = __webpack_require__(16)('toStringTag')                                                             // 825
	  // ES3 wrong here                                                                                          // 826
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';                                             // 827
                                                                                                              // 828
	module.exports = function(it){                                                                               // 829
	  var O, T, B;                                                                                               // 830
	  return it === undefined ? 'Undefined' : it === null ? 'Null'                                               // 831
	    // @@toStringTag case                                                                                    // 832
	    : typeof (T = (O = Object(it))[TAG]) == 'string' ? T                                                     // 833
	    // builtinTag case                                                                                       // 834
	    : ARG ? cof(O)                                                                                           // 835
	    // ES3 arguments fallback                                                                                // 836
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;                           // 837
	};                                                                                                           // 838
                                                                                                              // 839
/***/ },                                                                                                      // 840
/* 39 */                                                                                                      // 841
/***/ function(module, exports, __webpack_require__) {                                                        // 842
                                                                                                              // 843
	// 19.1.2.5 Object.freeze(O)                                                                                 // 844
	var isObject = __webpack_require__(25);                                                                      // 845
                                                                                                              // 846
	__webpack_require__(40)('freeze', function($freeze){                                                         // 847
	  return function freeze(it){                                                                                // 848
	    return $freeze && isObject(it) ? $freeze(it) : it;                                                       // 849
	  };                                                                                                         // 850
	});                                                                                                          // 851
                                                                                                              // 852
/***/ },                                                                                                      // 853
/* 40 */                                                                                                      // 854
/***/ function(module, exports, __webpack_require__) {                                                        // 855
                                                                                                              // 856
	// most Object methods by ES6 should accept primitives                                                       // 857
	module.exports = function(KEY, exec){                                                                        // 858
	  var $def = __webpack_require__(8)                                                                          // 859
	    , fn   = (__webpack_require__(9).Object || {})[KEY] || Object[KEY]                                       // 860
	    , exp  = {};                                                                                             // 861
	  exp[KEY] = exec(fn);                                                                                       // 862
	  $def($def.S + $def.F * __webpack_require__(7)(function(){ fn(1); }), 'Object', exp);                       // 863
	};                                                                                                           // 864
                                                                                                              // 865
/***/ },                                                                                                      // 866
/* 41 */                                                                                                      // 867
/***/ function(module, exports, __webpack_require__) {                                                        // 868
                                                                                                              // 869
	// 19.1.2.17 Object.seal(O)                                                                                  // 870
	var isObject = __webpack_require__(25);                                                                      // 871
                                                                                                              // 872
	__webpack_require__(40)('seal', function($seal){                                                             // 873
	  return function seal(it){                                                                                  // 874
	    return $seal && isObject(it) ? $seal(it) : it;                                                           // 875
	  };                                                                                                         // 876
	});                                                                                                          // 877
                                                                                                              // 878
/***/ },                                                                                                      // 879
/* 42 */                                                                                                      // 880
/***/ function(module, exports, __webpack_require__) {                                                        // 881
                                                                                                              // 882
	// 19.1.2.15 Object.preventExtensions(O)                                                                     // 883
	var isObject = __webpack_require__(25);                                                                      // 884
                                                                                                              // 885
	__webpack_require__(40)('preventExtensions', function($preventExtensions){                                   // 886
	  return function preventExtensions(it){                                                                     // 887
	    return $preventExtensions && isObject(it) ? $preventExtensions(it) : it;                                 // 888
	  };                                                                                                         // 889
	});                                                                                                          // 890
                                                                                                              // 891
/***/ },                                                                                                      // 892
/* 43 */                                                                                                      // 893
/***/ function(module, exports, __webpack_require__) {                                                        // 894
                                                                                                              // 895
	// 19.1.2.12 Object.isFrozen(O)                                                                              // 896
	var isObject = __webpack_require__(25);                                                                      // 897
                                                                                                              // 898
	__webpack_require__(40)('isFrozen', function($isFrozen){                                                     // 899
	  return function isFrozen(it){                                                                              // 900
	    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;                                          // 901
	  };                                                                                                         // 902
	});                                                                                                          // 903
                                                                                                              // 904
/***/ },                                                                                                      // 905
/* 44 */                                                                                                      // 906
/***/ function(module, exports, __webpack_require__) {                                                        // 907
                                                                                                              // 908
	// 19.1.2.13 Object.isSealed(O)                                                                              // 909
	var isObject = __webpack_require__(25);                                                                      // 910
                                                                                                              // 911
	__webpack_require__(40)('isSealed', function($isSealed){                                                     // 912
	  return function isSealed(it){                                                                              // 913
	    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;                                          // 914
	  };                                                                                                         // 915
	});                                                                                                          // 916
                                                                                                              // 917
/***/ },                                                                                                      // 918
/* 45 */                                                                                                      // 919
/***/ function(module, exports, __webpack_require__) {                                                        // 920
                                                                                                              // 921
	// 19.1.2.11 Object.isExtensible(O)                                                                          // 922
	var isObject = __webpack_require__(25);                                                                      // 923
                                                                                                              // 924
	__webpack_require__(40)('isExtensible', function($isExtensible){                                             // 925
	  return function isExtensible(it){                                                                          // 926
	    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;                                  // 927
	  };                                                                                                         // 928
	});                                                                                                          // 929
                                                                                                              // 930
/***/ },                                                                                                      // 931
/* 46 */                                                                                                      // 932
/***/ function(module, exports, __webpack_require__) {                                                        // 933
                                                                                                              // 934
	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)                                                            // 935
	var toIObject = __webpack_require__(18);                                                                     // 936
                                                                                                              // 937
	__webpack_require__(40)('getOwnPropertyDescriptor', function($getOwnPropertyDescriptor){                     // 938
	  return function getOwnPropertyDescriptor(it, key){                                                         // 939
	    return $getOwnPropertyDescriptor(toIObject(it), key);                                                    // 940
	  };                                                                                                         // 941
	});                                                                                                          // 942
                                                                                                              // 943
/***/ },                                                                                                      // 944
/* 47 */                                                                                                      // 945
/***/ function(module, exports, __webpack_require__) {                                                        // 946
                                                                                                              // 947
	// 19.1.2.9 Object.getPrototypeOf(O)                                                                         // 948
	var toObject = __webpack_require__(30);                                                                      // 949
                                                                                                              // 950
	__webpack_require__(40)('getPrototypeOf', function($getPrototypeOf){                                         // 951
	  return function getPrototypeOf(it){                                                                        // 952
	    return $getPrototypeOf(toObject(it));                                                                    // 953
	  };                                                                                                         // 954
	});                                                                                                          // 955
                                                                                                              // 956
/***/ },                                                                                                      // 957
/* 48 */                                                                                                      // 958
/***/ function(module, exports, __webpack_require__) {                                                        // 959
                                                                                                              // 960
	// 19.1.2.14 Object.keys(O)                                                                                  // 961
	var toObject = __webpack_require__(30);                                                                      // 962
                                                                                                              // 963
	__webpack_require__(40)('keys', function($keys){                                                             // 964
	  return function keys(it){                                                                                  // 965
	    return $keys(toObject(it));                                                                              // 966
	  };                                                                                                         // 967
	});                                                                                                          // 968
                                                                                                              // 969
/***/ },                                                                                                      // 970
/* 49 */                                                                                                      // 971
/***/ function(module, exports, __webpack_require__) {                                                        // 972
                                                                                                              // 973
	// 19.1.2.7 Object.getOwnPropertyNames(O)                                                                    // 974
	__webpack_require__(40)('getOwnPropertyNames', function(){                                                   // 975
	  return __webpack_require__(22).get;                                                                        // 976
	});                                                                                                          // 977
                                                                                                              // 978
/***/ },                                                                                                      // 979
/* 50 */                                                                                                      // 980
/***/ function(module, exports, __webpack_require__) {                                                        // 981
                                                                                                              // 982
	__webpack_require__(51);                                                                                     // 983
	__webpack_require__(57);                                                                                     // 984
	__webpack_require__(63);                                                                                     // 985
	__webpack_require__(64);                                                                                     // 986
	__webpack_require__(66);                                                                                     // 987
	__webpack_require__(69);                                                                                     // 988
	__webpack_require__(72);                                                                                     // 989
	__webpack_require__(74);                                                                                     // 990
	__webpack_require__(76);                                                                                     // 991
	module.exports = __webpack_require__(9).Array;                                                               // 992
                                                                                                              // 993
/***/ },                                                                                                      // 994
/* 51 */                                                                                                      // 995
/***/ function(module, exports, __webpack_require__) {                                                        // 996
                                                                                                              // 997
	'use strict';                                                                                                // 998
	var $at  = __webpack_require__(52)(true);                                                                    // 999
                                                                                                              // 1000
	// 21.1.3.27 String.prototype[@@iterator]()                                                                  // 1001
	__webpack_require__(54)(String, 'String', function(iterated){                                                // 1002
	  this._t = String(iterated); // target                                                                      // 1003
	  this._i = 0;                // next index                                                                  // 1004
	// 21.1.5.2.1 %StringIteratorPrototype%.next()                                                               // 1005
	}, function(){                                                                                               // 1006
	  var O     = this._t                                                                                        // 1007
	    , index = this._i                                                                                        // 1008
	    , point;                                                                                                 // 1009
	  if(index >= O.length)return {value: undefined, done: true};                                                // 1010
	  point = $at(O, index);                                                                                     // 1011
	  this._i += point.length;                                                                                   // 1012
	  return {value: point, done: false};                                                                        // 1013
	});                                                                                                          // 1014
                                                                                                              // 1015
/***/ },                                                                                                      // 1016
/* 52 */                                                                                                      // 1017
/***/ function(module, exports, __webpack_require__) {                                                        // 1018
                                                                                                              // 1019
	// true  -> String#at                                                                                        // 1020
	// false -> String#codePointAt                                                                               // 1021
	var toInteger = __webpack_require__(53)                                                                      // 1022
	  , defined   = __webpack_require__(21);                                                                     // 1023
	module.exports = function(TO_STRING){                                                                        // 1024
	  return function(that, pos){                                                                                // 1025
	    var s = String(defined(that))                                                                            // 1026
	      , i = toInteger(pos)                                                                                   // 1027
	      , l = s.length                                                                                         // 1028
	      , a, b;                                                                                                // 1029
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;                                                    // 1030
	    a = s.charCodeAt(i);                                                                                     // 1031
	    return a < 0xd800 || a > 0xdbff || i + 1 === l                                                           // 1032
	      || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff                                                    // 1033
	        ? TO_STRING ? s.charAt(i) : a                                                                        // 1034
	        : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;                       // 1035
	  };                                                                                                         // 1036
	};                                                                                                           // 1037
                                                                                                              // 1038
/***/ },                                                                                                      // 1039
/* 53 */                                                                                                      // 1040
/***/ function(module, exports) {                                                                             // 1041
                                                                                                              // 1042
	// 7.1.4 ToInteger                                                                                           // 1043
	var ceil  = Math.ceil                                                                                        // 1044
	  , floor = Math.floor;                                                                                      // 1045
	module.exports = function(it){                                                                               // 1046
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);                                                  // 1047
	};                                                                                                           // 1048
                                                                                                              // 1049
/***/ },                                                                                                      // 1050
/* 54 */                                                                                                      // 1051
/***/ function(module, exports, __webpack_require__) {                                                        // 1052
                                                                                                              // 1053
	'use strict';                                                                                                // 1054
	var LIBRARY         = __webpack_require__(27)                                                                // 1055
	  , $def            = __webpack_require__(8)                                                                 // 1056
	  , $redef          = __webpack_require__(12)                                                                // 1057
	  , hide            = __webpack_require__(10)                                                                // 1058
	  , has             = __webpack_require__(5)                                                                 // 1059
	  , SYMBOL_ITERATOR = __webpack_require__(16)('iterator')                                                    // 1060
	  , Iterators       = __webpack_require__(55)                                                                // 1061
	  , BUGGY           = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`             // 1062
	  , FF_ITERATOR     = '@@iterator'                                                                           // 1063
	  , KEYS            = 'keys'                                                                                 // 1064
	  , VALUES          = 'values';                                                                              // 1065
	var returnThis = function(){ return this; };                                                                 // 1066
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCE){                            // 1067
	  __webpack_require__(56)(Constructor, NAME, next);                                                          // 1068
	  var createMethod = function(kind){                                                                         // 1069
	    switch(kind){                                                                                            // 1070
	      case KEYS: return function keys(){ return new Constructor(this, kind); };                              // 1071
	      case VALUES: return function values(){ return new Constructor(this, kind); };                          // 1072
	    } return function entries(){ return new Constructor(this, kind); };                                      // 1073
	  };                                                                                                         // 1074
	  var TAG      = NAME + ' Iterator'                                                                          // 1075
	    , proto    = Base.prototype                                                                              // 1076
	    , _native  = proto[SYMBOL_ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]                   // 1077
	    , _default = _native || createMethod(DEFAULT)                                                            // 1078
	    , methods, key;                                                                                          // 1079
	  // Fix native                                                                                              // 1080
	  if(_native){                                                                                               // 1081
	    var IteratorPrototype = __webpack_require__(3).getProto(_default.call(new Base));                        // 1082
	    // Set @@toStringTag to native iterators                                                                 // 1083
	    __webpack_require__(15)(IteratorPrototype, TAG, true);                                                   // 1084
	    // FF fix                                                                                                // 1085
	    if(!LIBRARY && has(proto, FF_ITERATOR))hide(IteratorPrototype, SYMBOL_ITERATOR, returnThis);             // 1086
	  }                                                                                                          // 1087
	  // Define iterator                                                                                         // 1088
	  if(!LIBRARY || FORCE)hide(proto, SYMBOL_ITERATOR, _default);                                               // 1089
	  // Plug for library                                                                                        // 1090
	  Iterators[NAME] = _default;                                                                                // 1091
	  Iterators[TAG]  = returnThis;                                                                              // 1092
	  if(DEFAULT){                                                                                               // 1093
	    methods = {                                                                                              // 1094
	      keys:    IS_SET            ? _default : createMethod(KEYS),                                            // 1095
	      values:  DEFAULT == VALUES ? _default : createMethod(VALUES),                                          // 1096
	      entries: DEFAULT != VALUES ? _default : createMethod('entries')                                        // 1097
	    };                                                                                                       // 1098
	    if(FORCE)for(key in methods){                                                                            // 1099
	      if(!(key in proto))$redef(proto, key, methods[key]);                                                   // 1100
	    } else $def($def.P + $def.F * BUGGY, NAME, methods);                                                     // 1101
	  }                                                                                                          // 1102
	};                                                                                                           // 1103
                                                                                                              // 1104
/***/ },                                                                                                      // 1105
/* 55 */                                                                                                      // 1106
/***/ function(module, exports) {                                                                             // 1107
                                                                                                              // 1108
	module.exports = {};                                                                                         // 1109
                                                                                                              // 1110
/***/ },                                                                                                      // 1111
/* 56 */                                                                                                      // 1112
/***/ function(module, exports, __webpack_require__) {                                                        // 1113
                                                                                                              // 1114
	'use strict';                                                                                                // 1115
	var $ = __webpack_require__(3)                                                                               // 1116
	  , IteratorPrototype = {};                                                                                  // 1117
                                                                                                              // 1118
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()                                                              // 1119
	__webpack_require__(10)(IteratorPrototype, __webpack_require__(16)('iterator'), function(){ return this; });
                                                                                                              // 1121
	module.exports = function(Constructor, NAME, next){                                                          // 1122
	  Constructor.prototype = $.create(IteratorPrototype, {next: __webpack_require__(11)(1,next)});              // 1123
	  __webpack_require__(15)(Constructor, NAME + ' Iterator');                                                  // 1124
	};                                                                                                           // 1125
                                                                                                              // 1126
/***/ },                                                                                                      // 1127
/* 57 */                                                                                                      // 1128
/***/ function(module, exports, __webpack_require__) {                                                        // 1129
                                                                                                              // 1130
	'use strict';                                                                                                // 1131
	var ctx         = __webpack_require__(35)                                                                    // 1132
	  , $def        = __webpack_require__(8)                                                                     // 1133
	  , toObject    = __webpack_require__(30)                                                                    // 1134
	  , call        = __webpack_require__(58)                                                                    // 1135
	  , isArrayIter = __webpack_require__(59)                                                                    // 1136
	  , toLength    = __webpack_require__(60)                                                                    // 1137
	  , getIterFn   = __webpack_require__(61);                                                                   // 1138
	$def($def.S + $def.F * !__webpack_require__(62)(function(iter){ Array.from(iter); }), 'Array', {             // 1139
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)                                  // 1140
	  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){                                // 1141
	    var O       = toObject(arrayLike)                                                                        // 1142
	      , C       = typeof this == 'function' ? this : Array                                                   // 1143
	      , mapfn   = arguments[1]                                                                               // 1144
	      , mapping = mapfn !== undefined                                                                        // 1145
	      , index   = 0                                                                                          // 1146
	      , iterFn  = getIterFn(O)                                                                               // 1147
	      , length, result, step, iterator;                                                                      // 1148
	    if(mapping)mapfn = ctx(mapfn, arguments[2], 2);                                                          // 1149
	    // if object isn't iterable or it's array with default iterator - use simple case                        // 1150
	    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){                                         // 1151
	      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){               // 1152
	        result[index] = mapping ? call(iterator, mapfn, [step.value, index], true) : step.value;             // 1153
	      }                                                                                                      // 1154
	    } else {                                                                                                 // 1155
	      length = toLength(O.length);                                                                           // 1156
	      for(result = new C(length); length > index; index++){                                                  // 1157
	        result[index] = mapping ? mapfn(O[index], index) : O[index];                                         // 1158
	      }                                                                                                      // 1159
	    }                                                                                                        // 1160
	    result.length = index;                                                                                   // 1161
	    return result;                                                                                           // 1162
	  }                                                                                                          // 1163
	});                                                                                                          // 1164
                                                                                                              // 1165
                                                                                                              // 1166
/***/ },                                                                                                      // 1167
/* 58 */                                                                                                      // 1168
/***/ function(module, exports, __webpack_require__) {                                                        // 1169
                                                                                                              // 1170
	// call something on iterator step with safe closing on error                                                // 1171
	var anObject = __webpack_require__(26);                                                                      // 1172
	module.exports = function(iterator, fn, value, entries){                                                     // 1173
	  try {                                                                                                      // 1174
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);                                           // 1175
	  // 7.4.6 IteratorClose(iterator, completion)                                                               // 1176
	  } catch(e){                                                                                                // 1177
	    var ret = iterator['return'];                                                                            // 1178
	    if(ret !== undefined)anObject(ret.call(iterator));                                                       // 1179
	    throw e;                                                                                                 // 1180
	  }                                                                                                          // 1181
	};                                                                                                           // 1182
                                                                                                              // 1183
/***/ },                                                                                                      // 1184
/* 59 */                                                                                                      // 1185
/***/ function(module, exports, __webpack_require__) {                                                        // 1186
                                                                                                              // 1187
	// check on default Array iterator                                                                           // 1188
	var Iterators = __webpack_require__(55)                                                                      // 1189
	  , ITERATOR  = __webpack_require__(16)('iterator');                                                         // 1190
	module.exports = function(it){                                                                               // 1191
	  return (Iterators.Array || Array.prototype[ITERATOR]) === it;                                              // 1192
	};                                                                                                           // 1193
                                                                                                              // 1194
/***/ },                                                                                                      // 1195
/* 60 */                                                                                                      // 1196
/***/ function(module, exports, __webpack_require__) {                                                        // 1197
                                                                                                              // 1198
	// 7.1.15 ToLength                                                                                           // 1199
	var toInteger = __webpack_require__(53)                                                                      // 1200
	  , min       = Math.min;                                                                                    // 1201
	module.exports = function(it){                                                                               // 1202
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991            // 1203
	};                                                                                                           // 1204
                                                                                                              // 1205
/***/ },                                                                                                      // 1206
/* 61 */                                                                                                      // 1207
/***/ function(module, exports, __webpack_require__) {                                                        // 1208
                                                                                                              // 1209
	var classof   = __webpack_require__(38)                                                                      // 1210
	  , ITERATOR  = __webpack_require__(16)('iterator')                                                          // 1211
	  , Iterators = __webpack_require__(55);                                                                     // 1212
	module.exports = __webpack_require__(9).getIteratorMethod = function(it){                                    // 1213
	  if(it != undefined)return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];                      // 1214
	};                                                                                                           // 1215
                                                                                                              // 1216
/***/ },                                                                                                      // 1217
/* 62 */                                                                                                      // 1218
/***/ function(module, exports, __webpack_require__) {                                                        // 1219
                                                                                                              // 1220
	var SYMBOL_ITERATOR = __webpack_require__(16)('iterator')                                                    // 1221
	  , SAFE_CLOSING    = false;                                                                                 // 1222
	try {                                                                                                        // 1223
	  var riter = [7][SYMBOL_ITERATOR]();                                                                        // 1224
	  riter['return'] = function(){ SAFE_CLOSING = true; };                                                      // 1225
	  Array.from(riter, function(){ throw 2; });                                                                 // 1226
	} catch(e){ /* empty */ }                                                                                    // 1227
	module.exports = function(exec){                                                                             // 1228
	  if(!SAFE_CLOSING)return false;                                                                             // 1229
	  var safe = false;                                                                                          // 1230
	  try {                                                                                                      // 1231
	    var arr  = [7]                                                                                           // 1232
	      , iter = arr[SYMBOL_ITERATOR]();                                                                       // 1233
	    iter.next = function(){ safe = true; };                                                                  // 1234
	    arr[SYMBOL_ITERATOR] = function(){ return iter; };                                                       // 1235
	    exec(arr);                                                                                               // 1236
	  } catch(e){ /* empty */ }                                                                                  // 1237
	  return safe;                                                                                               // 1238
	};                                                                                                           // 1239
                                                                                                              // 1240
/***/ },                                                                                                      // 1241
/* 63 */                                                                                                      // 1242
/***/ function(module, exports, __webpack_require__) {                                                        // 1243
                                                                                                              // 1244
	'use strict';                                                                                                // 1245
	var $def = __webpack_require__(8);                                                                           // 1246
                                                                                                              // 1247
	// WebKit Array.of isn't generic                                                                             // 1248
	$def($def.S + $def.F * __webpack_require__(7)(function(){                                                    // 1249
	  function F(){}                                                                                             // 1250
	  return !(Array.of.call(F) instanceof F);                                                                   // 1251
	}), 'Array', {                                                                                               // 1252
	  // 22.1.2.3 Array.of( ...items)                                                                            // 1253
	  of: function of(/* ...args */){                                                                            // 1254
	    var index  = 0                                                                                           // 1255
	      , length = arguments.length                                                                            // 1256
	      , result = new (typeof this == 'function' ? this : Array)(length);                                     // 1257
	    while(length > index)result[index] = arguments[index++];                                                 // 1258
	    result.length = length;                                                                                  // 1259
	    return result;                                                                                           // 1260
	  }                                                                                                          // 1261
	});                                                                                                          // 1262
                                                                                                              // 1263
/***/ },                                                                                                      // 1264
/* 64 */                                                                                                      // 1265
/***/ function(module, exports, __webpack_require__) {                                                        // 1266
                                                                                                              // 1267
	__webpack_require__(65)(Array);                                                                              // 1268
                                                                                                              // 1269
/***/ },                                                                                                      // 1270
/* 65 */                                                                                                      // 1271
/***/ function(module, exports, __webpack_require__) {                                                        // 1272
                                                                                                              // 1273
	'use strict';                                                                                                // 1274
	var $       = __webpack_require__(3)                                                                         // 1275
	  , SPECIES = __webpack_require__(16)('species');                                                            // 1276
	module.exports = function(C){                                                                                // 1277
	  if(__webpack_require__(6) && !(SPECIES in C))$.setDesc(C, SPECIES, {                                       // 1278
	    configurable: true,                                                                                      // 1279
	    get: function(){ return this; }                                                                          // 1280
	  });                                                                                                        // 1281
	};                                                                                                           // 1282
                                                                                                              // 1283
/***/ },                                                                                                      // 1284
/* 66 */                                                                                                      // 1285
/***/ function(module, exports, __webpack_require__) {                                                        // 1286
                                                                                                              // 1287
	'use strict';                                                                                                // 1288
	var setUnscope = __webpack_require__(67)                                                                     // 1289
	  , step       = __webpack_require__(68)                                                                     // 1290
	  , Iterators  = __webpack_require__(55)                                                                     // 1291
	  , toIObject  = __webpack_require__(18);                                                                    // 1292
                                                                                                              // 1293
	// 22.1.3.4 Array.prototype.entries()                                                                        // 1294
	// 22.1.3.13 Array.prototype.keys()                                                                          // 1295
	// 22.1.3.29 Array.prototype.values()                                                                        // 1296
	// 22.1.3.30 Array.prototype[@@iterator]()                                                                   // 1297
	__webpack_require__(54)(Array, 'Array', function(iterated, kind){                                            // 1298
	  this._t = toIObject(iterated); // target                                                                   // 1299
	  this._i = 0;                   // next index                                                               // 1300
	  this._k = kind;                // kind                                                                     // 1301
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()                                                                // 1302
	}, function(){                                                                                               // 1303
	  var O     = this._t                                                                                        // 1304
	    , kind  = this._k                                                                                        // 1305
	    , index = this._i++;                                                                                     // 1306
	  if(!O || index >= O.length){                                                                               // 1307
	    this._t = undefined;                                                                                     // 1308
	    return step(1);                                                                                          // 1309
	  }                                                                                                          // 1310
	  if(kind == 'keys'  )return step(0, index);                                                                 // 1311
	  if(kind == 'values')return step(0, O[index]);                                                              // 1312
	  return step(0, [index, O[index]]);                                                                         // 1313
	}, 'values');                                                                                                // 1314
                                                                                                              // 1315
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)                                       // 1316
	Iterators.Arguments = Iterators.Array;                                                                       // 1317
                                                                                                              // 1318
	setUnscope('keys');                                                                                          // 1319
	setUnscope('values');                                                                                        // 1320
	setUnscope('entries');                                                                                       // 1321
                                                                                                              // 1322
/***/ },                                                                                                      // 1323
/* 67 */                                                                                                      // 1324
/***/ function(module, exports, __webpack_require__) {                                                        // 1325
                                                                                                              // 1326
	// 22.1.3.31 Array.prototype[@@unscopables]                                                                  // 1327
	var UNSCOPABLES = __webpack_require__(16)('unscopables');                                                    // 1328
	if([][UNSCOPABLES] == undefined)__webpack_require__(10)(Array.prototype, UNSCOPABLES, {});                   // 1329
	module.exports = function(key){                                                                              // 1330
	  [][UNSCOPABLES][key] = true;                                                                               // 1331
	};                                                                                                           // 1332
                                                                                                              // 1333
/***/ },                                                                                                      // 1334
/* 68 */                                                                                                      // 1335
/***/ function(module, exports) {                                                                             // 1336
                                                                                                              // 1337
	module.exports = function(done, value){                                                                      // 1338
	  return {value: value, done: !!done};                                                                       // 1339
	};                                                                                                           // 1340
                                                                                                              // 1341
/***/ },                                                                                                      // 1342
/* 69 */                                                                                                      // 1343
/***/ function(module, exports, __webpack_require__) {                                                        // 1344
                                                                                                              // 1345
	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)                                     // 1346
	'use strict';                                                                                                // 1347
	var $def = __webpack_require__(8);                                                                           // 1348
                                                                                                              // 1349
	$def($def.P, 'Array', {copyWithin: __webpack_require__(70)});                                                // 1350
                                                                                                              // 1351
	__webpack_require__(67)('copyWithin');                                                                       // 1352
                                                                                                              // 1353
/***/ },                                                                                                      // 1354
/* 70 */                                                                                                      // 1355
/***/ function(module, exports, __webpack_require__) {                                                        // 1356
                                                                                                              // 1357
	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)                                     // 1358
	'use strict';                                                                                                // 1359
	var toObject = __webpack_require__(30)                                                                       // 1360
	  , toIndex  = __webpack_require__(71)                                                                       // 1361
	  , toLength = __webpack_require__(60);                                                                      // 1362
                                                                                                              // 1363
	module.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){           // 1364
	  var O     = toObject(this)                                                                                 // 1365
	    , len   = toLength(O.length)                                                                             // 1366
	    , to    = toIndex(target, len)                                                                           // 1367
	    , from  = toIndex(start, len)                                                                            // 1368
	    , end   = arguments[2]                                                                                   // 1369
	    , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)                       // 1370
	    , inc   = 1;                                                                                             // 1371
	  if(from < to && to < from + count){                                                                        // 1372
	    inc  = -1;                                                                                               // 1373
	    from += count - 1;                                                                                       // 1374
	    to   += count - 1;                                                                                       // 1375
	  }                                                                                                          // 1376
	  while(count-- > 0){                                                                                        // 1377
	    if(from in O)O[to] = O[from];                                                                            // 1378
	    else delete O[to];                                                                                       // 1379
	    to   += inc;                                                                                             // 1380
	    from += inc;                                                                                             // 1381
	  } return O;                                                                                                // 1382
	};                                                                                                           // 1383
                                                                                                              // 1384
/***/ },                                                                                                      // 1385
/* 71 */                                                                                                      // 1386
/***/ function(module, exports, __webpack_require__) {                                                        // 1387
                                                                                                              // 1388
	var toInteger = __webpack_require__(53)                                                                      // 1389
	  , max       = Math.max                                                                                     // 1390
	  , min       = Math.min;                                                                                    // 1391
	module.exports = function(index, length){                                                                    // 1392
	  index = toInteger(index);                                                                                  // 1393
	  return index < 0 ? max(index + length, 0) : min(index, length);                                            // 1394
	};                                                                                                           // 1395
                                                                                                              // 1396
/***/ },                                                                                                      // 1397
/* 72 */                                                                                                      // 1398
/***/ function(module, exports, __webpack_require__) {                                                        // 1399
                                                                                                              // 1400
	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)                                        // 1401
	var $def = __webpack_require__(8);                                                                           // 1402
                                                                                                              // 1403
	$def($def.P, 'Array', {fill: __webpack_require__(73)});                                                      // 1404
                                                                                                              // 1405
	__webpack_require__(67)('fill');                                                                             // 1406
                                                                                                              // 1407
/***/ },                                                                                                      // 1408
/* 73 */                                                                                                      // 1409
/***/ function(module, exports, __webpack_require__) {                                                        // 1410
                                                                                                              // 1411
	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)                                        // 1412
	'use strict';                                                                                                // 1413
	var toObject = __webpack_require__(30)                                                                       // 1414
	  , toIndex  = __webpack_require__(71)                                                                       // 1415
	  , toLength = __webpack_require__(60);                                                                      // 1416
	module.exports = [].fill || function fill(value /*, start = 0, end = @length */){                            // 1417
	  var O      = toObject(this, true)                                                                          // 1418
	    , length = toLength(O.length)                                                                            // 1419
	    , index  = toIndex(arguments[1], length)                                                                 // 1420
	    , end    = arguments[2]                                                                                  // 1421
	    , endPos = end === undefined ? length : toIndex(end, length);                                            // 1422
	  while(endPos > index)O[index++] = value;                                                                   // 1423
	  return O;                                                                                                  // 1424
	};                                                                                                           // 1425
                                                                                                              // 1426
/***/ },                                                                                                      // 1427
/* 74 */                                                                                                      // 1428
/***/ function(module, exports, __webpack_require__) {                                                        // 1429
                                                                                                              // 1430
	'use strict';                                                                                                // 1431
	// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)                                             // 1432
	var KEY    = 'find'                                                                                          // 1433
	  , $def   = __webpack_require__(8)                                                                          // 1434
	  , forced = true                                                                                            // 1435
	  , $find  = __webpack_require__(75)(5);                                                                     // 1436
	// Shouldn't skip holes                                                                                      // 1437
	if(KEY in [])Array(1)[KEY](function(){ forced = false; });                                                   // 1438
	$def($def.P + $def.F * forced, 'Array', {                                                                    // 1439
	  find: function find(callbackfn/*, that = undefined */){                                                    // 1440
	    return $find(this, callbackfn, arguments[1]);                                                            // 1441
	  }                                                                                                          // 1442
	});                                                                                                          // 1443
	__webpack_require__(67)(KEY);                                                                                // 1444
                                                                                                              // 1445
/***/ },                                                                                                      // 1446
/* 75 */                                                                                                      // 1447
/***/ function(module, exports, __webpack_require__) {                                                        // 1448
                                                                                                              // 1449
	// 0 -> Array#forEach                                                                                        // 1450
	// 1 -> Array#map                                                                                            // 1451
	// 2 -> Array#filter                                                                                         // 1452
	// 3 -> Array#some                                                                                           // 1453
	// 4 -> Array#every                                                                                          // 1454
	// 5 -> Array#find                                                                                           // 1455
	// 6 -> Array#findIndex                                                                                      // 1456
	var ctx      = __webpack_require__(35)                                                                       // 1457
	  , isObject = __webpack_require__(25)                                                                       // 1458
	  , IObject  = __webpack_require__(19)                                                                       // 1459
	  , toObject = __webpack_require__(30)                                                                       // 1460
	  , toLength = __webpack_require__(60)                                                                       // 1461
	  , isArray  = __webpack_require__(24)                                                                       // 1462
	  , SPECIES  = __webpack_require__(16)('species');                                                           // 1463
	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)                                                         // 1464
	var ASC = function(original, length){                                                                        // 1465
	  var C;                                                                                                     // 1466
	  if(isArray(original) && isObject(C = original.constructor)){                                               // 1467
	    C = C[SPECIES];                                                                                          // 1468
	    if(C === null)C = undefined;                                                                             // 1469
	  } return new(C === undefined ? Array : C)(length);                                                         // 1470
	};                                                                                                           // 1471
	module.exports = function(TYPE){                                                                             // 1472
	  var IS_MAP        = TYPE == 1                                                                              // 1473
	    , IS_FILTER     = TYPE == 2                                                                              // 1474
	    , IS_SOME       = TYPE == 3                                                                              // 1475
	    , IS_EVERY      = TYPE == 4                                                                              // 1476
	    , IS_FIND_INDEX = TYPE == 6                                                                              // 1477
	    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX;                                                            // 1478
	  return function($this, callbackfn, that){                                                                  // 1479
	    var O      = toObject($this)                                                                             // 1480
	      , self   = IObject(O)                                                                                  // 1481
	      , f      = ctx(callbackfn, that, 3)                                                                    // 1482
	      , length = toLength(self.length)                                                                       // 1483
	      , index  = 0                                                                                           // 1484
	      , result = IS_MAP ? ASC($this, length) : IS_FILTER ? ASC($this, 0) : undefined                         // 1485
	      , val, res;                                                                                            // 1486
	    for(;length > index; index++)if(NO_HOLES || index in self){                                              // 1487
	      val = self[index];                                                                                     // 1488
	      res = f(val, index, O);                                                                                // 1489
	      if(TYPE){                                                                                              // 1490
	        if(IS_MAP)result[index] = res;            // map                                                     // 1491
	        else if(res)switch(TYPE){                                                                            // 1492
	          case 3: return true;                    // some                                                    // 1493
	          case 5: return val;                     // find                                                    // 1494
	          case 6: return index;                   // findIndex                                               // 1495
	          case 2: result.push(val);               // filter                                                  // 1496
	        } else if(IS_EVERY)return false;          // every                                                   // 1497
	      }                                                                                                      // 1498
	    }                                                                                                        // 1499
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;                                     // 1500
	  };                                                                                                         // 1501
	};                                                                                                           // 1502
                                                                                                              // 1503
/***/ },                                                                                                      // 1504
/* 76 */                                                                                                      // 1505
/***/ function(module, exports, __webpack_require__) {                                                        // 1506
                                                                                                              // 1507
	'use strict';                                                                                                // 1508
	// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)                                        // 1509
	var KEY    = 'findIndex'                                                                                     // 1510
	  , $def   = __webpack_require__(8)                                                                          // 1511
	  , forced = true                                                                                            // 1512
	  , $find  = __webpack_require__(75)(6);                                                                     // 1513
	// Shouldn't skip holes                                                                                      // 1514
	if(KEY in [])Array(1)[KEY](function(){ forced = false; });                                                   // 1515
	$def($def.P + $def.F * forced, 'Array', {                                                                    // 1516
	  findIndex: function findIndex(callbackfn/*, that = undefined */){                                          // 1517
	    return $find(this, callbackfn, arguments[1]);                                                            // 1518
	  }                                                                                                          // 1519
	});                                                                                                          // 1520
	__webpack_require__(67)(KEY);                                                                                // 1521
                                                                                                              // 1522
/***/ },                                                                                                      // 1523
/* 77 */                                                                                                      // 1524
/***/ function(module, exports, __webpack_require__) {                                                        // 1525
                                                                                                              // 1526
	__webpack_require__(78);                                                                                     // 1527
	__webpack_require__(79);                                                                                     // 1528
	__webpack_require__(80);                                                                                     // 1529
	__webpack_require__(51);                                                                                     // 1530
	__webpack_require__(82);                                                                                     // 1531
	__webpack_require__(83);                                                                                     // 1532
	__webpack_require__(87);                                                                                     // 1533
	__webpack_require__(88);                                                                                     // 1534
	__webpack_require__(90);                                                                                     // 1535
	__webpack_require__(91);                                                                                     // 1536
	__webpack_require__(93);                                                                                     // 1537
	__webpack_require__(94);                                                                                     // 1538
	__webpack_require__(95);                                                                                     // 1539
	module.exports = __webpack_require__(9).String;                                                              // 1540
                                                                                                              // 1541
/***/ },                                                                                                      // 1542
/* 78 */                                                                                                      // 1543
/***/ function(module, exports, __webpack_require__) {                                                        // 1544
                                                                                                              // 1545
	var $def    = __webpack_require__(8)                                                                         // 1546
	  , toIndex = __webpack_require__(71)                                                                        // 1547
	  , fromCharCode = String.fromCharCode                                                                       // 1548
	  , $fromCodePoint = String.fromCodePoint;                                                                   // 1549
                                                                                                              // 1550
	// length should be 1, old FF problem                                                                        // 1551
	$def($def.S + $def.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {                         // 1552
	  // 21.1.2.2 String.fromCodePoint(...codePoints)                                                            // 1553
	  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars                            // 1554
	    var res = []                                                                                             // 1555
	      , len = arguments.length                                                                               // 1556
	      , i   = 0                                                                                              // 1557
	      , code;                                                                                                // 1558
	    while(len > i){                                                                                          // 1559
	      code = +arguments[i++];                                                                                // 1560
	      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');             // 1561
	      res.push(code < 0x10000                                                                                // 1562
	        ? fromCharCode(code)                                                                                 // 1563
	        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)                            // 1564
	      );                                                                                                     // 1565
	    } return res.join('');                                                                                   // 1566
	  }                                                                                                          // 1567
	});                                                                                                          // 1568
                                                                                                              // 1569
/***/ },                                                                                                      // 1570
/* 79 */                                                                                                      // 1571
/***/ function(module, exports, __webpack_require__) {                                                        // 1572
                                                                                                              // 1573
	var $def      = __webpack_require__(8)                                                                       // 1574
	  , toIObject = __webpack_require__(18)                                                                      // 1575
	  , toLength  = __webpack_require__(60);                                                                     // 1576
                                                                                                              // 1577
	$def($def.S, 'String', {                                                                                     // 1578
	  // 21.1.2.4 String.raw(callSite, ...substitutions)                                                         // 1579
	  raw: function raw(callSite){                                                                               // 1580
	    var tpl = toIObject(callSite.raw)                                                                        // 1581
	      , len = toLength(tpl.length)                                                                           // 1582
	      , sln = arguments.length                                                                               // 1583
	      , res = []                                                                                             // 1584
	      , i   = 0;                                                                                             // 1585
	    while(len > i){                                                                                          // 1586
	      res.push(String(tpl[i++]));                                                                            // 1587
	      if(i < sln)res.push(String(arguments[i]));                                                             // 1588
	    } return res.join('');                                                                                   // 1589
	  }                                                                                                          // 1590
	});                                                                                                          // 1591
                                                                                                              // 1592
/***/ },                                                                                                      // 1593
/* 80 */                                                                                                      // 1594
/***/ function(module, exports, __webpack_require__) {                                                        // 1595
                                                                                                              // 1596
	'use strict';                                                                                                // 1597
	// 21.1.3.25 String.prototype.trim()                                                                         // 1598
	__webpack_require__(81)('trim', function($trim){                                                             // 1599
	  return function trim(){                                                                                    // 1600
	    return $trim(this, 3);                                                                                   // 1601
	  };                                                                                                         // 1602
	});                                                                                                          // 1603
                                                                                                              // 1604
/***/ },                                                                                                      // 1605
/* 81 */                                                                                                      // 1606
/***/ function(module, exports, __webpack_require__) {                                                        // 1607
                                                                                                              // 1608
	// 1 -> String#trimLeft                                                                                      // 1609
	// 2 -> String#trimRight                                                                                     // 1610
	// 3 -> String#trim                                                                                          // 1611
	var trim = function(string, TYPE){                                                                           // 1612
	  string = String(defined(string));                                                                          // 1613
	  if(TYPE & 1)string = string.replace(ltrim, '');                                                            // 1614
	  if(TYPE & 2)string = string.replace(rtrim, '');                                                            // 1615
	  return string;                                                                                             // 1616
	};                                                                                                           // 1617
                                                                                                              // 1618
	var $def    = __webpack_require__(8)                                                                         // 1619
	  , defined = __webpack_require__(21)                                                                        // 1620
	  , spaces  = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +                           // 1621
	      '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF'                       // 1622
	  , space   = '[' + spaces + ']'                                                                             // 1623
	  , non     = '\u200b\u0085'                                                                                 // 1624
	  , ltrim   = RegExp('^' + space + space + '*')                                                              // 1625
	  , rtrim   = RegExp(space + space + '*$');                                                                  // 1626
                                                                                                              // 1627
	module.exports = function(KEY, exec){                                                                        // 1628
	  var exp  = {};                                                                                             // 1629
	  exp[KEY] = exec(trim);                                                                                     // 1630
	  $def($def.P + $def.F * __webpack_require__(7)(function(){                                                  // 1631
	    return !!spaces[KEY]() || non[KEY]() != non;                                                             // 1632
	  }), 'String', exp);                                                                                        // 1633
	};                                                                                                           // 1634
                                                                                                              // 1635
/***/ },                                                                                                      // 1636
/* 82 */                                                                                                      // 1637
/***/ function(module, exports, __webpack_require__) {                                                        // 1638
                                                                                                              // 1639
	'use strict';                                                                                                // 1640
	var $def = __webpack_require__(8)                                                                            // 1641
	  , $at  = __webpack_require__(52)(false);                                                                   // 1642
	$def($def.P, 'String', {                                                                                     // 1643
	  // 21.1.3.3 String.prototype.codePointAt(pos)                                                              // 1644
	  codePointAt: function codePointAt(pos){                                                                    // 1645
	    return $at(this, pos);                                                                                   // 1646
	  }                                                                                                          // 1647
	});                                                                                                          // 1648
                                                                                                              // 1649
/***/ },                                                                                                      // 1650
/* 83 */                                                                                                      // 1651
/***/ function(module, exports, __webpack_require__) {                                                        // 1652
                                                                                                              // 1653
	// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])                                          // 1654
	'use strict';                                                                                                // 1655
	var $def      = __webpack_require__(8)                                                                       // 1656
	  , toLength  = __webpack_require__(60)                                                                      // 1657
	  , context   = __webpack_require__(84)                                                                      // 1658
	  , ENDS_WITH = 'endsWith'                                                                                   // 1659
	  , $endsWith = ''[ENDS_WITH];                                                                               // 1660
                                                                                                              // 1661
	$def($def.P + $def.F * __webpack_require__(86)(ENDS_WITH), 'String', {                                       // 1662
	  endsWith: function endsWith(searchString /*, endPosition = @length */){                                    // 1663
	    var that = context(this, searchString, ENDS_WITH)                                                        // 1664
	      , endPosition = arguments[1]                                                                           // 1665
	      , len    = toLength(that.length)                                                                       // 1666
	      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)                      // 1667
	      , search = String(searchString);                                                                       // 1668
	    return $endsWith                                                                                         // 1669
	      ? $endsWith.call(that, search, end)                                                                    // 1670
	      : that.slice(end - search.length, end) === search;                                                     // 1671
	  }                                                                                                          // 1672
	});                                                                                                          // 1673
                                                                                                              // 1674
/***/ },                                                                                                      // 1675
/* 84 */                                                                                                      // 1676
/***/ function(module, exports, __webpack_require__) {                                                        // 1677
                                                                                                              // 1678
	// helper for String#{startsWith, endsWith, includes}                                                        // 1679
	var isRegExp = __webpack_require__(85)                                                                       // 1680
	  , defined  = __webpack_require__(21);                                                                      // 1681
                                                                                                              // 1682
	module.exports = function(that, searchString, NAME){                                                         // 1683
	  if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");                    // 1684
	  return String(defined(that));                                                                              // 1685
	};                                                                                                           // 1686
                                                                                                              // 1687
/***/ },                                                                                                      // 1688
/* 85 */                                                                                                      // 1689
/***/ function(module, exports, __webpack_require__) {                                                        // 1690
                                                                                                              // 1691
	// 7.2.8 IsRegExp(argument)                                                                                  // 1692
	var isObject = __webpack_require__(25)                                                                       // 1693
	  , cof      = __webpack_require__(20)                                                                       // 1694
	  , MATCH    = __webpack_require__(16)('match');                                                             // 1695
	module.exports = function(it){                                                                               // 1696
	  var isRegExp;                                                                                              // 1697
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');          // 1698
	};                                                                                                           // 1699
                                                                                                              // 1700
/***/ },                                                                                                      // 1701
/* 86 */                                                                                                      // 1702
/***/ function(module, exports, __webpack_require__) {                                                        // 1703
                                                                                                              // 1704
	module.exports = function(KEY){                                                                              // 1705
	  var re = /./;                                                                                              // 1706
	  try {                                                                                                      // 1707
	    '/./'[KEY](re);                                                                                          // 1708
	  } catch(e){                                                                                                // 1709
	    try {                                                                                                    // 1710
	      re[__webpack_require__(16)('match')] = false;                                                          // 1711
	      return !'/./'[KEY](re);                                                                                // 1712
	    } catch(e){ /* empty */ }                                                                                // 1713
	  } return true;                                                                                             // 1714
	};                                                                                                           // 1715
                                                                                                              // 1716
/***/ },                                                                                                      // 1717
/* 87 */                                                                                                      // 1718
/***/ function(module, exports, __webpack_require__) {                                                        // 1719
                                                                                                              // 1720
	// 21.1.3.7 String.prototype.includes(searchString, position = 0)                                            // 1721
	'use strict';                                                                                                // 1722
	var $def     = __webpack_require__(8)                                                                        // 1723
	  , context  = __webpack_require__(84)                                                                       // 1724
	  , INCLUDES = 'includes';                                                                                   // 1725
                                                                                                              // 1726
	$def($def.P + $def.F * __webpack_require__(86)(INCLUDES), 'String', {                                        // 1727
	  includes: function includes(searchString /*, position = 0 */){                                             // 1728
	    return !!~context(this, searchString, INCLUDES).indexOf(searchString, arguments[1]);                     // 1729
	  }                                                                                                          // 1730
	});                                                                                                          // 1731
                                                                                                              // 1732
/***/ },                                                                                                      // 1733
/* 88 */                                                                                                      // 1734
/***/ function(module, exports, __webpack_require__) {                                                        // 1735
                                                                                                              // 1736
	var $def = __webpack_require__(8);                                                                           // 1737
                                                                                                              // 1738
	$def($def.P, 'String', {                                                                                     // 1739
	  // 21.1.3.13 String.prototype.repeat(count)                                                                // 1740
	  repeat: __webpack_require__(89)                                                                            // 1741
	});                                                                                                          // 1742
                                                                                                              // 1743
/***/ },                                                                                                      // 1744
/* 89 */                                                                                                      // 1745
/***/ function(module, exports, __webpack_require__) {                                                        // 1746
                                                                                                              // 1747
	'use strict';                                                                                                // 1748
	var toInteger = __webpack_require__(53)                                                                      // 1749
	  , defined   = __webpack_require__(21);                                                                     // 1750
                                                                                                              // 1751
	module.exports = function repeat(count){                                                                     // 1752
	  var str = String(defined(this))                                                                            // 1753
	    , res = ''                                                                                               // 1754
	    , n   = toInteger(count);                                                                                // 1755
	  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");                                     // 1756
	  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;                                                // 1757
	  return res;                                                                                                // 1758
	};                                                                                                           // 1759
                                                                                                              // 1760
/***/ },                                                                                                      // 1761
/* 90 */                                                                                                      // 1762
/***/ function(module, exports, __webpack_require__) {                                                        // 1763
                                                                                                              // 1764
	// 21.1.3.18 String.prototype.startsWith(searchString [, position ])                                         // 1765
	'use strict';                                                                                                // 1766
	var $def        = __webpack_require__(8)                                                                     // 1767
	  , toLength    = __webpack_require__(60)                                                                    // 1768
	  , context     = __webpack_require__(84)                                                                    // 1769
	  , STARTS_WITH = 'startsWith'                                                                               // 1770
	  , $startsWith = ''[STARTS_WITH];                                                                           // 1771
                                                                                                              // 1772
	$def($def.P + $def.F * __webpack_require__(86)(STARTS_WITH), 'String', {                                     // 1773
	  startsWith: function startsWith(searchString /*, position = 0 */){                                         // 1774
	    var that   = context(this, searchString, STARTS_WITH)                                                    // 1775
	      , index  = toLength(Math.min(arguments[1], that.length))                                               // 1776
	      , search = String(searchString);                                                                       // 1777
	    return $startsWith                                                                                       // 1778
	      ? $startsWith.call(that, search, index)                                                                // 1779
	      : that.slice(index, index + search.length) === search;                                                 // 1780
	  }                                                                                                          // 1781
	});                                                                                                          // 1782
                                                                                                              // 1783
/***/ },                                                                                                      // 1784
/* 91 */                                                                                                      // 1785
/***/ function(module, exports, __webpack_require__) {                                                        // 1786
                                                                                                              // 1787
	// @@match logic                                                                                             // 1788
	__webpack_require__(92)('match', 1, function(defined, MATCH){                                                // 1789
	  // 21.1.3.11 String.prototype.match(regexp)                                                                // 1790
	  return function match(regexp){                                                                             // 1791
	    'use strict';                                                                                            // 1792
	    var O  = defined(this)                                                                                   // 1793
	      , fn = regexp == undefined ? undefined : regexp[MATCH];                                                // 1794
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));                     // 1795
	  };                                                                                                         // 1796
	});                                                                                                          // 1797
                                                                                                              // 1798
/***/ },                                                                                                      // 1799
/* 92 */                                                                                                      // 1800
/***/ function(module, exports, __webpack_require__) {                                                        // 1801
                                                                                                              // 1802
	'use strict';                                                                                                // 1803
	module.exports = function(KEY, length, exec){                                                                // 1804
	  var defined  = __webpack_require__(21)                                                                     // 1805
	    , SYMBOL   = __webpack_require__(16)(KEY)                                                                // 1806
	    , original = ''[KEY];                                                                                    // 1807
	  if(__webpack_require__(7)(function(){                                                                      // 1808
	    var O = {};                                                                                              // 1809
	    O[SYMBOL] = function(){ return 7; };                                                                     // 1810
	    return ''[KEY](O) != 7;                                                                                  // 1811
	  })){                                                                                                       // 1812
	    __webpack_require__(12)(String.prototype, KEY, exec(defined, SYMBOL, original));                         // 1813
	    __webpack_require__(10)(RegExp.prototype, SYMBOL, length == 2                                            // 1814
	      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)                                          // 1815
	      // 21.2.5.11 RegExp.prototype[@@split](string, limit)                                                  // 1816
	      ? function(string, arg){ return original.call(string, this, arg); }                                    // 1817
	      // 21.2.5.6 RegExp.prototype[@@match](string)                                                          // 1818
	      // 21.2.5.9 RegExp.prototype[@@search](string)                                                         // 1819
	      : function(string){ return original.call(string, this); }                                              // 1820
	    );                                                                                                       // 1821
	  }                                                                                                          // 1822
	};                                                                                                           // 1823
                                                                                                              // 1824
/***/ },                                                                                                      // 1825
/* 93 */                                                                                                      // 1826
/***/ function(module, exports, __webpack_require__) {                                                        // 1827
                                                                                                              // 1828
	// @@replace logic                                                                                           // 1829
	__webpack_require__(92)('replace', 2, function(defined, REPLACE, $replace){                                  // 1830
	  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)                                           // 1831
	  return function replace(searchValue, replaceValue){                                                        // 1832
	    'use strict';                                                                                            // 1833
	    var O  = defined(this)                                                                                   // 1834
	      , fn = searchValue == undefined ? undefined : searchValue[REPLACE];                                    // 1835
	    return fn !== undefined                                                                                  // 1836
	      ? fn.call(searchValue, O, replaceValue)                                                                // 1837
	      : $replace.call(String(O), searchValue, replaceValue);                                                 // 1838
	  };                                                                                                         // 1839
	});                                                                                                          // 1840
                                                                                                              // 1841
/***/ },                                                                                                      // 1842
/* 94 */                                                                                                      // 1843
/***/ function(module, exports, __webpack_require__) {                                                        // 1844
                                                                                                              // 1845
	// @@search logic                                                                                            // 1846
	__webpack_require__(92)('search', 1, function(defined, SEARCH){                                              // 1847
	  // 21.1.3.15 String.prototype.search(regexp)                                                               // 1848
	  return function search(regexp){                                                                            // 1849
	    'use strict';                                                                                            // 1850
	    var O  = defined(this)                                                                                   // 1851
	      , fn = regexp == undefined ? undefined : regexp[SEARCH];                                               // 1852
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));                    // 1853
	  };                                                                                                         // 1854
	});                                                                                                          // 1855
                                                                                                              // 1856
/***/ },                                                                                                      // 1857
/* 95 */                                                                                                      // 1858
/***/ function(module, exports, __webpack_require__) {                                                        // 1859
                                                                                                              // 1860
	// @@split logic                                                                                             // 1861
	__webpack_require__(92)('split', 2, function(defined, SPLIT, $split){                                        // 1862
	  // 21.1.3.17 String.prototype.split(separator, limit)                                                      // 1863
	  return function split(separator, limit){                                                                   // 1864
	    'use strict';                                                                                            // 1865
	    var O  = defined(this)                                                                                   // 1866
	      , fn = separator == undefined ? undefined : separator[SPLIT];                                          // 1867
	    return fn !== undefined                                                                                  // 1868
	      ? fn.call(separator, O, limit)                                                                         // 1869
	      : $split.call(String(O), separator, limit);                                                            // 1870
	  };                                                                                                         // 1871
	});                                                                                                          // 1872
                                                                                                              // 1873
/***/ },                                                                                                      // 1874
/* 96 */                                                                                                      // 1875
/***/ function(module, exports, __webpack_require__) {                                                        // 1876
                                                                                                              // 1877
	__webpack_require__(97);                                                                                     // 1878
	__webpack_require__(98);                                                                                     // 1879
	module.exports = __webpack_require__(9).Function;                                                            // 1880
                                                                                                              // 1881
/***/ },                                                                                                      // 1882
/* 97 */                                                                                                      // 1883
/***/ function(module, exports, __webpack_require__) {                                                        // 1884
                                                                                                              // 1885
	var setDesc    = __webpack_require__(3).setDesc                                                              // 1886
	  , createDesc = __webpack_require__(11)                                                                     // 1887
	  , has        = __webpack_require__(5)                                                                      // 1888
	  , FProto     = Function.prototype                                                                          // 1889
	  , nameRE     = /^\s*function ([^ (]*)/                                                                     // 1890
	  , NAME       = 'name';                                                                                     // 1891
	// 19.2.4.2 name                                                                                             // 1892
	NAME in FProto || __webpack_require__(6) && setDesc(FProto, NAME, {                                          // 1893
	  configurable: true,                                                                                        // 1894
	  get: function(){                                                                                           // 1895
	    var match = ('' + this).match(nameRE)                                                                    // 1896
	      , name  = match ? match[1] : '';                                                                       // 1897
	    has(this, NAME) || setDesc(this, NAME, createDesc(5, name));                                             // 1898
	    return name;                                                                                             // 1899
	  }                                                                                                          // 1900
	});                                                                                                          // 1901
                                                                                                              // 1902
/***/ },                                                                                                      // 1903
/* 98 */                                                                                                      // 1904
/***/ function(module, exports, __webpack_require__) {                                                        // 1905
                                                                                                              // 1906
	'use strict';                                                                                                // 1907
	var $             = __webpack_require__(3)                                                                   // 1908
	  , isObject      = __webpack_require__(25)                                                                  // 1909
	  , HAS_INSTANCE  = __webpack_require__(16)('hasInstance')                                                   // 1910
	  , FunctionProto = Function.prototype;                                                                      // 1911
	// 19.2.3.6 Function.prototype[@@hasInstance](V)                                                             // 1912
	if(!(HAS_INSTANCE in FunctionProto))$.setDesc(FunctionProto, HAS_INSTANCE, {value: function(O){              // 1913
	  if(typeof this != 'function' || !isObject(O))return false;                                                 // 1914
	  if(!isObject(this.prototype))return O instanceof this;                                                     // 1915
	  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:                     // 1916
	  while(O = $.getProto(O))if(this.prototype === O)return true;                                               // 1917
	  return false;                                                                                              // 1918
	}});                                                                                                         // 1919
                                                                                                              // 1920
/***/ },                                                                                                      // 1921
/* 99 */                                                                                                      // 1922
/***/ function(module, exports, __webpack_require__) {                                                        // 1923
                                                                                                              // 1924
	__webpack_require__(2);                                                                                      // 1925
	module.exports = __webpack_require__(9).Symbol;                                                              // 1926
                                                                                                              // 1927
/***/ },                                                                                                      // 1928
/* 100 */                                                                                                     // 1929
/***/ function(module, exports, __webpack_require__) {                                                        // 1930
                                                                                                              // 1931
	__webpack_require__(37);                                                                                     // 1932
	__webpack_require__(51);                                                                                     // 1933
	__webpack_require__(101);                                                                                    // 1934
	__webpack_require__(102);                                                                                    // 1935
	module.exports = __webpack_require__(9).Map;                                                                 // 1936
                                                                                                              // 1937
/***/ },                                                                                                      // 1938
/* 101 */                                                                                                     // 1939
/***/ function(module, exports, __webpack_require__) {                                                        // 1940
                                                                                                              // 1941
	__webpack_require__(66);                                                                                     // 1942
	var global      = __webpack_require__(4)                                                                     // 1943
	  , hide        = __webpack_require__(10)                                                                    // 1944
	  , Iterators   = __webpack_require__(55)                                                                    // 1945
	  , ITERATOR    = __webpack_require__(16)('iterator')                                                        // 1946
	  , NL          = global.NodeList                                                                            // 1947
	  , HTC         = global.HTMLCollection                                                                      // 1948
	  , NLProto     = NL && NL.prototype                                                                         // 1949
	  , HTCProto    = HTC && HTC.prototype                                                                       // 1950
	  , ArrayValues = Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;                           // 1951
	if(NL && !(ITERATOR in NLProto))hide(NLProto, ITERATOR, ArrayValues);                                        // 1952
	if(HTC && !(ITERATOR in HTCProto))hide(HTCProto, ITERATOR, ArrayValues);                                     // 1953
                                                                                                              // 1954
/***/ },                                                                                                      // 1955
/* 102 */                                                                                                     // 1956
/***/ function(module, exports, __webpack_require__) {                                                        // 1957
                                                                                                              // 1958
	'use strict';                                                                                                // 1959
	var strong = __webpack_require__(103);                                                                       // 1960
                                                                                                              // 1961
	// 23.1 Map Objects                                                                                          // 1962
	__webpack_require__(107)('Map', function(get){                                                               // 1963
	  return function Map(){ return get(this, arguments[0]); };                                                  // 1964
	}, {                                                                                                         // 1965
	  // 23.1.3.6 Map.prototype.get(key)                                                                         // 1966
	  get: function get(key){                                                                                    // 1967
	    var entry = strong.getEntry(this, key);                                                                  // 1968
	    return entry && entry.v;                                                                                 // 1969
	  },                                                                                                         // 1970
	  // 23.1.3.9 Map.prototype.set(key, value)                                                                  // 1971
	  set: function set(key, value){                                                                             // 1972
	    return strong.def(this, key === 0 ? 0 : key, value);                                                     // 1973
	  }                                                                                                          // 1974
	}, strong, true);                                                                                            // 1975
                                                                                                              // 1976
/***/ },                                                                                                      // 1977
/* 103 */                                                                                                     // 1978
/***/ function(module, exports, __webpack_require__) {                                                        // 1979
                                                                                                              // 1980
	'use strict';                                                                                                // 1981
	var $            = __webpack_require__(3)                                                                    // 1982
	  , hide         = __webpack_require__(10)                                                                   // 1983
	  , ctx          = __webpack_require__(35)                                                                   // 1984
	  , species      = __webpack_require__(65)                                                                   // 1985
	  , strictNew    = __webpack_require__(104)                                                                  // 1986
	  , defined      = __webpack_require__(21)                                                                   // 1987
	  , forOf        = __webpack_require__(105)                                                                  // 1988
	  , step         = __webpack_require__(68)                                                                   // 1989
	  , ID           = __webpack_require__(13)('id')                                                             // 1990
	  , $has         = __webpack_require__(5)                                                                    // 1991
	  , isObject     = __webpack_require__(25)                                                                   // 1992
	  , isExtensible = Object.isExtensible || isObject                                                           // 1993
	  , SUPPORT_DESC = __webpack_require__(6)                                                                    // 1994
	  , SIZE         = SUPPORT_DESC ? '_s' : 'size'                                                              // 1995
	  , id           = 0;                                                                                        // 1996
                                                                                                              // 1997
	var fastKey = function(it, create){                                                                          // 1998
	  // return primitive with prefix                                                                            // 1999
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;             // 2000
	  if(!$has(it, ID)){                                                                                         // 2001
	    // can't set id to frozen object                                                                         // 2002
	    if(!isExtensible(it))return 'F';                                                                         // 2003
	    // not necessary to add id                                                                               // 2004
	    if(!create)return 'E';                                                                                   // 2005
	    // add missing object id                                                                                 // 2006
	    hide(it, ID, ++id);                                                                                      // 2007
	  // return object id with prefix                                                                            // 2008
	  } return 'O' + it[ID];                                                                                     // 2009
	};                                                                                                           // 2010
                                                                                                              // 2011
	var getEntry = function(that, key){                                                                          // 2012
	  // fast case                                                                                               // 2013
	  var index = fastKey(key), entry;                                                                           // 2014
	  if(index !== 'F')return that._i[index];                                                                    // 2015
	  // frozen object case                                                                                      // 2016
	  for(entry = that._f; entry; entry = entry.n){                                                              // 2017
	    if(entry.k == key)return entry;                                                                          // 2018
	  }                                                                                                          // 2019
	};                                                                                                           // 2020
                                                                                                              // 2021
	module.exports = {                                                                                           // 2022
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){                                                    // 2023
	    var C = wrapper(function(that, iterable){                                                                // 2024
	      strictNew(that, C, NAME);                                                                              // 2025
	      that._i = $.create(null); // index                                                                     // 2026
	      that._f = undefined;      // first entry                                                               // 2027
	      that._l = undefined;      // last entry                                                                // 2028
	      that[SIZE] = 0;           // size                                                                      // 2029
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);                                   // 2030
	    });                                                                                                      // 2031
	    __webpack_require__(106)(C.prototype, {                                                                  // 2032
	      // 23.1.3.1 Map.prototype.clear()                                                                      // 2033
	      // 23.2.3.2 Set.prototype.clear()                                                                      // 2034
	      clear: function clear(){                                                                               // 2035
	        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){                       // 2036
	          entry.r = true;                                                                                    // 2037
	          if(entry.p)entry.p = entry.p.n = undefined;                                                        // 2038
	          delete data[entry.i];                                                                              // 2039
	        }                                                                                                    // 2040
	        that._f = that._l = undefined;                                                                       // 2041
	        that[SIZE] = 0;                                                                                      // 2042
	      },                                                                                                     // 2043
	      // 23.1.3.3 Map.prototype.delete(key)                                                                  // 2044
	      // 23.2.3.4 Set.prototype.delete(value)                                                                // 2045
	      'delete': function(key){                                                                               // 2046
	        var that  = this                                                                                     // 2047
	          , entry = getEntry(that, key);                                                                     // 2048
	        if(entry){                                                                                           // 2049
	          var next = entry.n                                                                                 // 2050
	            , prev = entry.p;                                                                                // 2051
	          delete that._i[entry.i];                                                                           // 2052
	          entry.r = true;                                                                                    // 2053
	          if(prev)prev.n = next;                                                                             // 2054
	          if(next)next.p = prev;                                                                             // 2055
	          if(that._f == entry)that._f = next;                                                                // 2056
	          if(that._l == entry)that._l = prev;                                                                // 2057
	          that[SIZE]--;                                                                                      // 2058
	        } return !!entry;                                                                                    // 2059
	      },                                                                                                     // 2060
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)                                     // 2061
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)                                     // 2062
	      forEach: function forEach(callbackfn /*, that = undefined */){                                         // 2063
	        var f = ctx(callbackfn, arguments[1], 3)                                                             // 2064
	          , entry;                                                                                           // 2065
	        while(entry = entry ? entry.n : this._f){                                                            // 2066
	          f(entry.v, entry.k, this);                                                                         // 2067
	          // revert to the last existing entry                                                               // 2068
	          while(entry && entry.r)entry = entry.p;                                                            // 2069
	        }                                                                                                    // 2070
	      },                                                                                                     // 2071
	      // 23.1.3.7 Map.prototype.has(key)                                                                     // 2072
	      // 23.2.3.7 Set.prototype.has(value)                                                                   // 2073
	      has: function has(key){                                                                                // 2074
	        return !!getEntry(this, key);                                                                        // 2075
	      }                                                                                                      // 2076
	    });                                                                                                      // 2077
	    if(SUPPORT_DESC)$.setDesc(C.prototype, 'size', {                                                         // 2078
	      get: function(){                                                                                       // 2079
	        return defined(this[SIZE]);                                                                          // 2080
	      }                                                                                                      // 2081
	    });                                                                                                      // 2082
	    return C;                                                                                                // 2083
	  },                                                                                                         // 2084
	  def: function(that, key, value){                                                                           // 2085
	    var entry = getEntry(that, key)                                                                          // 2086
	      , prev, index;                                                                                         // 2087
	    // change existing entry                                                                                 // 2088
	    if(entry){                                                                                               // 2089
	      entry.v = value;                                                                                       // 2090
	    // create new entry                                                                                      // 2091
	    } else {                                                                                                 // 2092
	      that._l = entry = {                                                                                    // 2093
	        i: index = fastKey(key, true), // <- index                                                           // 2094
	        k: key,                        // <- key                                                             // 2095
	        v: value,                      // <- value                                                           // 2096
	        p: prev = that._l,             // <- previous entry                                                  // 2097
	        n: undefined,                  // <- next entry                                                      // 2098
	        r: false                       // <- removed                                                         // 2099
	      };                                                                                                     // 2100
	      if(!that._f)that._f = entry;                                                                           // 2101
	      if(prev)prev.n = entry;                                                                                // 2102
	      that[SIZE]++;                                                                                          // 2103
	      // add to index                                                                                        // 2104
	      if(index !== 'F')that._i[index] = entry;                                                               // 2105
	    } return that;                                                                                           // 2106
	  },                                                                                                         // 2107
	  getEntry: getEntry,                                                                                        // 2108
	  setStrong: function(C, NAME, IS_MAP){                                                                      // 2109
	    // add .keys, .values, .entries, [@@iterator]                                                            // 2110
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11                    // 2111
	    __webpack_require__(54)(C, NAME, function(iterated, kind){                                               // 2112
	      this._t = iterated;  // target                                                                         // 2113
	      this._k = kind;      // kind                                                                           // 2114
	      this._l = undefined; // previous                                                                       // 2115
	    }, function(){                                                                                           // 2116
	      var that  = this                                                                                       // 2117
	        , kind  = that._k                                                                                    // 2118
	        , entry = that._l;                                                                                   // 2119
	      // revert to the last existing entry                                                                   // 2120
	      while(entry && entry.r)entry = entry.p;                                                                // 2121
	      // get next entry                                                                                      // 2122
	      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){                                     // 2123
	        // or finish the iteration                                                                           // 2124
	        that._t = undefined;                                                                                 // 2125
	        return step(1);                                                                                      // 2126
	      }                                                                                                      // 2127
	      // return step by kind                                                                                 // 2128
	      if(kind == 'keys'  )return step(0, entry.k);                                                           // 2129
	      if(kind == 'values')return step(0, entry.v);                                                           // 2130
	      return step(0, [entry.k, entry.v]);                                                                    // 2131
	    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);                                                       // 2132
                                                                                                              // 2133
	    // add [@@species], 23.1.2.2, 23.2.2.2                                                                   // 2134
	    species(C);                                                                                              // 2135
	    species(__webpack_require__(9)[NAME]); // for wrapper                                                    // 2136
	  }                                                                                                          // 2137
	};                                                                                                           // 2138
                                                                                                              // 2139
/***/ },                                                                                                      // 2140
/* 104 */                                                                                                     // 2141
/***/ function(module, exports) {                                                                             // 2142
                                                                                                              // 2143
	module.exports = function(it, Constructor, name){                                                            // 2144
	  if(!(it instanceof Constructor))throw TypeError(name + ": use the 'new' operator!");                       // 2145
	  return it;                                                                                                 // 2146
	};                                                                                                           // 2147
                                                                                                              // 2148
/***/ },                                                                                                      // 2149
/* 105 */                                                                                                     // 2150
/***/ function(module, exports, __webpack_require__) {                                                        // 2151
                                                                                                              // 2152
	var ctx         = __webpack_require__(35)                                                                    // 2153
	  , call        = __webpack_require__(58)                                                                    // 2154
	  , isArrayIter = __webpack_require__(59)                                                                    // 2155
	  , anObject    = __webpack_require__(26)                                                                    // 2156
	  , toLength    = __webpack_require__(60)                                                                    // 2157
	  , getIterFn   = __webpack_require__(61);                                                                   // 2158
	module.exports = function(iterable, entries, fn, that){                                                      // 2159
	  var iterFn = getIterFn(iterable)                                                                           // 2160
	    , f      = ctx(fn, that, entries ? 2 : 1)                                                                // 2161
	    , index  = 0                                                                                             // 2162
	    , length, step, iterator;                                                                                // 2163
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');                            // 2164
	  // fast case for arrays with default iterator                                                              // 2165
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){                   // 2166
	    entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);                          // 2167
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){                            // 2168
	    call(iterator, f, step.value, entries);                                                                  // 2169
	  }                                                                                                          // 2170
	};                                                                                                           // 2171
                                                                                                              // 2172
/***/ },                                                                                                      // 2173
/* 106 */                                                                                                     // 2174
/***/ function(module, exports, __webpack_require__) {                                                        // 2175
                                                                                                              // 2176
	var $redef = __webpack_require__(12);                                                                        // 2177
	module.exports = function(target, src){                                                                      // 2178
	  for(var key in src)$redef(target, key, src[key]);                                                          // 2179
	  return target;                                                                                             // 2180
	};                                                                                                           // 2181
                                                                                                              // 2182
/***/ },                                                                                                      // 2183
/* 107 */                                                                                                     // 2184
/***/ function(module, exports, __webpack_require__) {                                                        // 2185
                                                                                                              // 2186
	'use strict';                                                                                                // 2187
	var global     = __webpack_require__(4)                                                                      // 2188
	  , $def       = __webpack_require__(8)                                                                      // 2189
	  , forOf      = __webpack_require__(105)                                                                    // 2190
	  , strictNew  = __webpack_require__(104);                                                                   // 2191
                                                                                                              // 2192
	module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){                                  // 2193
	  var Base  = global[NAME]                                                                                   // 2194
	    , C     = Base                                                                                           // 2195
	    , ADDER = IS_MAP ? 'set' : 'add'                                                                         // 2196
	    , proto = C && C.prototype                                                                               // 2197
	    , O     = {};                                                                                            // 2198
	  var fixMethod = function(KEY){                                                                             // 2199
	    var fn = proto[KEY];                                                                                     // 2200
	    __webpack_require__(12)(proto, KEY,                                                                      // 2201
	      KEY == 'delete' ? function(a){ return fn.call(this, a === 0 ? 0 : a); }                                // 2202
	      : KEY == 'has' ? function has(a){ return fn.call(this, a === 0 ? 0 : a); }                             // 2203
	      : KEY == 'get' ? function get(a){ return fn.call(this, a === 0 ? 0 : a); }                             // 2204
	      : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }                       // 2205
	      : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }                                // 2206
	    );                                                                                                       // 2207
	  };                                                                                                         // 2208
	  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !__webpack_require__(7)(function(){             // 2209
	    new C().entries().next();                                                                                // 2210
	  }))){                                                                                                      // 2211
	    // create collection constructor                                                                         // 2212
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);                                                 // 2213
	    __webpack_require__(106)(C.prototype, methods);                                                          // 2214
	  } else {                                                                                                   // 2215
	    var inst  = new C                                                                                        // 2216
	      , chain = inst[ADDER](IS_WEAK ? {} : -0, 1)                                                            // 2217
	      , buggyZero;                                                                                           // 2218
	    // wrap for init collections from iterable                                                               // 2219
	    if(!__webpack_require__(62)(function(iter){ new C(iter); })){ // eslint-disable-line no-new              // 2220
	      C = wrapper(function(target, iterable){                                                                // 2221
	        strictNew(target, C, NAME);                                                                          // 2222
	        var that = new Base;                                                                                 // 2223
	        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);                                 // 2224
	        return that;                                                                                         // 2225
	      });                                                                                                    // 2226
	      C.prototype = proto;                                                                                   // 2227
	      proto.constructor = C;                                                                                 // 2228
	    }                                                                                                        // 2229
	    IS_WEAK || inst.forEach(function(val, key){                                                              // 2230
	      buggyZero = 1 / key === -Infinity;                                                                     // 2231
	    });                                                                                                      // 2232
	    // fix converting -0 key to +0                                                                           // 2233
	    if(buggyZero){                                                                                           // 2234
	      fixMethod('delete');                                                                                   // 2235
	      fixMethod('has');                                                                                      // 2236
	      IS_MAP && fixMethod('get');                                                                            // 2237
	    }                                                                                                        // 2238
	    // + fix .add & .set for chaining                                                                        // 2239
	    if(buggyZero || chain !== inst)fixMethod(ADDER);                                                         // 2240
	    // weak collections should not contains .clear method                                                    // 2241
	    if(IS_WEAK && proto.clear)delete proto.clear;                                                            // 2242
	  }                                                                                                          // 2243
                                                                                                              // 2244
	  __webpack_require__(15)(C, NAME);                                                                          // 2245
                                                                                                              // 2246
	  O[NAME] = C;                                                                                               // 2247
	  $def($def.G + $def.W + $def.F * (C != Base), O);                                                           // 2248
                                                                                                              // 2249
	  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);                                                             // 2250
                                                                                                              // 2251
	  return C;                                                                                                  // 2252
	};                                                                                                           // 2253
                                                                                                              // 2254
/***/ },                                                                                                      // 2255
/* 108 */                                                                                                     // 2256
/***/ function(module, exports, __webpack_require__) {                                                        // 2257
                                                                                                              // 2258
	__webpack_require__(37);                                                                                     // 2259
	__webpack_require__(51);                                                                                     // 2260
	__webpack_require__(101);                                                                                    // 2261
	__webpack_require__(109);                                                                                    // 2262
	module.exports = __webpack_require__(9).Set;                                                                 // 2263
                                                                                                              // 2264
/***/ },                                                                                                      // 2265
/* 109 */                                                                                                     // 2266
/***/ function(module, exports, __webpack_require__) {                                                        // 2267
                                                                                                              // 2268
	'use strict';                                                                                                // 2269
	var strong = __webpack_require__(103);                                                                       // 2270
                                                                                                              // 2271
	// 23.2 Set Objects                                                                                          // 2272
	__webpack_require__(107)('Set', function(get){                                                               // 2273
	  return function Set(){ return get(this, arguments[0]); };                                                  // 2274
	}, {                                                                                                         // 2275
	  // 23.2.3.1 Set.prototype.add(value)                                                                       // 2276
	  add: function add(value){                                                                                  // 2277
	    return strong.def(this, value = value === 0 ? 0 : value, value);                                         // 2278
	  }                                                                                                          // 2279
	}, strong);                                                                                                  // 2280
                                                                                                              // 2281
/***/ }                                                                                                       // 2282
/******/ ]);                                                                                                  // 2283


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['ecmascript-runtime'] = {
  Symbol: Symbol,
  Map: Map,
  Set: Set
};

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

/* Package-scope variables */
var ECMAScript;



/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.ecmascript = {
  ECMAScript: ECMAScript
};

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

/* Package-scope variables */
var Promise;

(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// packages/promise/.npm/package/node_modules/meteor-promise/promise.bundle.js                                       //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/******/ (function(modules) { // webpackBootstrap                                                                    // 1
/******/ 	// The module cache                                                                                        // 2
/******/ 	var installedModules = {};                                                                                 // 3
                                                                                                                     // 4
/******/ 	// The require function                                                                                    // 5
/******/ 	function __webpack_require__(moduleId) {                                                                   // 6
                                                                                                                     // 7
/******/ 		// Check if module is in cache                                                                            // 8
/******/ 		if(installedModules[moduleId])                                                                            // 9
/******/ 			return installedModules[moduleId].exports;                                                               // 10
                                                                                                                     // 11
/******/ 		// Create a new module (and put it into the cache)                                                        // 12
/******/ 		var module = installedModules[moduleId] = {                                                               // 13
/******/ 			exports: {},                                                                                             // 14
/******/ 			id: moduleId,                                                                                            // 15
/******/ 			loaded: false                                                                                            // 16
/******/ 		};                                                                                                        // 17
                                                                                                                     // 18
/******/ 		// Execute the module function                                                                            // 19
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);                      // 20
                                                                                                                     // 21
/******/ 		// Flag the module as loaded                                                                              // 22
/******/ 		module.loaded = true;                                                                                     // 23
                                                                                                                     // 24
/******/ 		// Return the exports of the module                                                                       // 25
/******/ 		return module.exports;                                                                                    // 26
/******/ 	}                                                                                                          // 27
                                                                                                                     // 28
                                                                                                                     // 29
/******/ 	// expose the modules object (__webpack_modules__)                                                         // 30
/******/ 	__webpack_require__.m = modules;                                                                           // 31
                                                                                                                     // 32
/******/ 	// expose the module cache                                                                                 // 33
/******/ 	__webpack_require__.c = installedModules;                                                                  // 34
                                                                                                                     // 35
/******/ 	// __webpack_public_path__                                                                                 // 36
/******/ 	__webpack_require__.p = "";                                                                                // 37
                                                                                                                     // 38
/******/ 	// Load entry module and return exports                                                                    // 39
/******/ 	return __webpack_require__(0);                                                                             // 40
/******/ })                                                                                                          // 41
/************************************************************************/                                           // 42
/******/ ([                                                                                                          // 43
/* 0 */                                                                                                              // 44
/***/ function(module, exports, __webpack_require__) {                                                               // 45
                                                                                                                     // 46
	var MeteorPromise = __webpack_require__(1);                                                                         // 47
                                                                                                                     // 48
	var es6PromiseThen = MeteorPromise.prototype.then;                                                                  // 49
	MeteorPromise.prototype.then = function (onResolved, onRejected) {                                                  // 50
	  if (typeof Meteor === "object" &&                                                                                 // 51
	      typeof Meteor.bindEnvironment === "function") {                                                               // 52
	    return es6PromiseThen.call(                                                                                     // 53
	      this,                                                                                                         // 54
	      onResolved && Meteor.bindEnvironment(onResolved, raise),                                                      // 55
	      onRejected && Meteor.bindEnvironment(onRejected, raise)                                                       // 56
	    );                                                                                                              // 57
	  }                                                                                                                 // 58
	  return es6PromiseThen.call(this, onResolved, onRejected);                                                         // 59
	};                                                                                                                  // 60
                                                                                                                     // 61
	function raise(exception) {                                                                                         // 62
	  throw exception;                                                                                                  // 63
	}                                                                                                                   // 64
                                                                                                                     // 65
	Promise = MeteorPromise;                                                                                            // 66
                                                                                                                     // 67
                                                                                                                     // 68
/***/ },                                                                                                             // 69
/* 1 */                                                                                                              // 70
/***/ function(module, exports, __webpack_require__) {                                                               // 71
                                                                                                                     // 72
	/* WEBPACK VAR INJECTION */(function(global) {var hasOwn = Object.prototype.hasOwnProperty;                         // 73
                                                                                                                     // 74
	var g =                                                                                                             // 75
	  typeof global === "object" ? global :                                                                             // 76
	  typeof window === "object" ? window :                                                                             // 77
	  typeof self === "object" ? self : this;                                                                           // 78
                                                                                                                     // 79
	var GlobalPromise = g.Promise;                                                                                      // 80
	var NpmPromise = __webpack_require__(2);                                                                            // 81
                                                                                                                     // 82
	function copyMethods(target, source) {                                                                              // 83
	  Object.keys(source).forEach(function (key) {                                                                      // 84
	    var value = source[key];                                                                                        // 85
	    if (typeof value === "function" &&                                                                              // 86
	        ! hasOwn.call(target, key)) {                                                                               // 87
	      target[key] = value;                                                                                          // 88
	    }                                                                                                               // 89
	  });                                                                                                               // 90
	}                                                                                                                   // 91
                                                                                                                     // 92
	if (typeof GlobalPromise === "function") {                                                                          // 93
	  copyMethods(GlobalPromise, NpmPromise);                                                                           // 94
	  copyMethods(GlobalPromise.prototype, NpmPromise.prototype);                                                       // 95
	  module.exports = GlobalPromise;                                                                                   // 96
	} else {                                                                                                            // 97
	  module.exports = NpmPromise;                                                                                      // 98
	}                                                                                                                   // 99
                                                                                                                     // 100
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))                                        // 101
                                                                                                                     // 102
/***/ },                                                                                                             // 103
/* 2 */                                                                                                              // 104
/***/ function(module, exports, __webpack_require__) {                                                               // 105
                                                                                                                     // 106
	'use strict';                                                                                                       // 107
                                                                                                                     // 108
	module.exports = __webpack_require__(3)                                                                             // 109
                                                                                                                     // 110
                                                                                                                     // 111
/***/ },                                                                                                             // 112
/* 3 */                                                                                                              // 113
/***/ function(module, exports, __webpack_require__) {                                                               // 114
                                                                                                                     // 115
	'use strict';                                                                                                       // 116
                                                                                                                     // 117
	module.exports = __webpack_require__(4);                                                                            // 118
	__webpack_require__(6);                                                                                             // 119
	__webpack_require__(7);                                                                                             // 120
	__webpack_require__(8);                                                                                             // 121
	__webpack_require__(9);                                                                                             // 122
                                                                                                                     // 123
                                                                                                                     // 124
/***/ },                                                                                                             // 125
/* 4 */                                                                                                              // 126
/***/ function(module, exports, __webpack_require__) {                                                               // 127
                                                                                                                     // 128
	'use strict';                                                                                                       // 129
                                                                                                                     // 130
	var asap = __webpack_require__(5);                                                                                  // 131
                                                                                                                     // 132
	function noop() {}                                                                                                  // 133
                                                                                                                     // 134
	// States:                                                                                                          // 135
	//                                                                                                                  // 136
	// 0 - pending                                                                                                      // 137
	// 1 - fulfilled with _value                                                                                        // 138
	// 2 - rejected with _value                                                                                         // 139
	// 3 - adopted the state of another promise, _value                                                                 // 140
	//                                                                                                                  // 141
	// once the state is no longer pending (0) it is immutable                                                          // 142
                                                                                                                     // 143
	// All `_` prefixed properties will be reduced to `_{random number}`                                                // 144
	// at build time to obfuscate them and discourage their use.                                                        // 145
	// We don't use symbols or Object.defineProperty to fully hide them                                                 // 146
	// because the performance isn't good enough.                                                                       // 147
                                                                                                                     // 148
                                                                                                                     // 149
	// to avoid using try/catch inside critical functions, we                                                           // 150
	// extract them to here.                                                                                            // 151
	var LAST_ERROR = null;                                                                                              // 152
	var IS_ERROR = {};                                                                                                  // 153
	function getThen(obj) {                                                                                             // 154
	  try {                                                                                                             // 155
	    return obj.then;                                                                                                // 156
	  } catch (ex) {                                                                                                    // 157
	    LAST_ERROR = ex;                                                                                                // 158
	    return IS_ERROR;                                                                                                // 159
	  }                                                                                                                 // 160
	}                                                                                                                   // 161
                                                                                                                     // 162
	function tryCallOne(fn, a) {                                                                                        // 163
	  try {                                                                                                             // 164
	    return fn(a);                                                                                                   // 165
	  } catch (ex) {                                                                                                    // 166
	    LAST_ERROR = ex;                                                                                                // 167
	    return IS_ERROR;                                                                                                // 168
	  }                                                                                                                 // 169
	}                                                                                                                   // 170
	function tryCallTwo(fn, a, b) {                                                                                     // 171
	  try {                                                                                                             // 172
	    fn(a, b);                                                                                                       // 173
	  } catch (ex) {                                                                                                    // 174
	    LAST_ERROR = ex;                                                                                                // 175
	    return IS_ERROR;                                                                                                // 176
	  }                                                                                                                 // 177
	}                                                                                                                   // 178
                                                                                                                     // 179
	module.exports = Promise;                                                                                           // 180
                                                                                                                     // 181
	function Promise(fn) {                                                                                              // 182
	  if (typeof this !== 'object') {                                                                                   // 183
	    throw new TypeError('Promises must be constructed via new');                                                    // 184
	  }                                                                                                                 // 185
	  if (typeof fn !== 'function') {                                                                                   // 186
	    throw new TypeError('not a function');                                                                          // 187
	  }                                                                                                                 // 188
	  this._37 = 0;                                                                                                     // 189
	  this._12 = null;                                                                                                  // 190
	  this._59 = [];                                                                                                    // 191
	  if (fn === noop) return;                                                                                          // 192
	  doResolve(fn, this);                                                                                              // 193
	}                                                                                                                   // 194
	Promise._99 = noop;                                                                                                 // 195
                                                                                                                     // 196
	Promise.prototype.then = function(onFulfilled, onRejected) {                                                        // 197
	  if (this.constructor !== Promise) {                                                                               // 198
	    return safeThen(this, onFulfilled, onRejected);                                                                 // 199
	  }                                                                                                                 // 200
	  var res = new Promise(noop);                                                                                      // 201
	  handle(this, new Handler(onFulfilled, onRejected, res));                                                          // 202
	  return res;                                                                                                       // 203
	};                                                                                                                  // 204
                                                                                                                     // 205
	function safeThen(self, onFulfilled, onRejected) {                                                                  // 206
	  return new self.constructor(function (resolve, reject) {                                                          // 207
	    var res = new Promise(noop);                                                                                    // 208
	    res.then(resolve, reject);                                                                                      // 209
	    handle(self, new Handler(onFulfilled, onRejected, res));                                                        // 210
	  });                                                                                                               // 211
	};                                                                                                                  // 212
	function handle(self, deferred) {                                                                                   // 213
	  while (self._37 === 3) {                                                                                          // 214
	    self = self._12;                                                                                                // 215
	  }                                                                                                                 // 216
	  if (self._37 === 0) {                                                                                             // 217
	    self._59.push(deferred);                                                                                        // 218
	    return;                                                                                                         // 219
	  }                                                                                                                 // 220
	  asap(function() {                                                                                                 // 221
	    var cb = self._37 === 1 ? deferred.onFulfilled : deferred.onRejected;                                           // 222
	    if (cb === null) {                                                                                              // 223
	      if (self._37 === 1) {                                                                                         // 224
	        resolve(deferred.promise, self._12);                                                                        // 225
	      } else {                                                                                                      // 226
	        reject(deferred.promise, self._12);                                                                         // 227
	      }                                                                                                             // 228
	      return;                                                                                                       // 229
	    }                                                                                                               // 230
	    var ret = tryCallOne(cb, self._12);                                                                             // 231
	    if (ret === IS_ERROR) {                                                                                         // 232
	      reject(deferred.promise, LAST_ERROR);                                                                         // 233
	    } else {                                                                                                        // 234
	      resolve(deferred.promise, ret);                                                                               // 235
	    }                                                                                                               // 236
	  });                                                                                                               // 237
	}                                                                                                                   // 238
	function resolve(self, newValue) {                                                                                  // 239
	  // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
	  if (newValue === self) {                                                                                          // 241
	    return reject(                                                                                                  // 242
	      self,                                                                                                         // 243
	      new TypeError('A promise cannot be resolved with itself.')                                                    // 244
	    );                                                                                                              // 245
	  }                                                                                                                 // 246
	  if (                                                                                                              // 247
	    newValue &&                                                                                                     // 248
	    (typeof newValue === 'object' || typeof newValue === 'function')                                                // 249
	  ) {                                                                                                               // 250
	    var then = getThen(newValue);                                                                                   // 251
	    if (then === IS_ERROR) {                                                                                        // 252
	      return reject(self, LAST_ERROR);                                                                              // 253
	    }                                                                                                               // 254
	    if (                                                                                                            // 255
	      then === self.then &&                                                                                         // 256
	      newValue instanceof Promise                                                                                   // 257
	    ) {                                                                                                             // 258
	      self._37 = 3;                                                                                                 // 259
	      self._12 = newValue;                                                                                          // 260
	      finale(self);                                                                                                 // 261
	      return;                                                                                                       // 262
	    } else if (typeof then === 'function') {                                                                        // 263
	      doResolve(then.bind(newValue), self);                                                                         // 264
	      return;                                                                                                       // 265
	    }                                                                                                               // 266
	  }                                                                                                                 // 267
	  self._37 = 1;                                                                                                     // 268
	  self._12 = newValue;                                                                                              // 269
	  finale(self);                                                                                                     // 270
	}                                                                                                                   // 271
                                                                                                                     // 272
	function reject(self, newValue) {                                                                                   // 273
	  self._37 = 2;                                                                                                     // 274
	  self._12 = newValue;                                                                                              // 275
	  finale(self);                                                                                                     // 276
	}                                                                                                                   // 277
	function finale(self) {                                                                                             // 278
	  for (var i = 0; i < self._59.length; i++) {                                                                       // 279
	    handle(self, self._59[i]);                                                                                      // 280
	  }                                                                                                                 // 281
	  self._59 = null;                                                                                                  // 282
	}                                                                                                                   // 283
                                                                                                                     // 284
	function Handler(onFulfilled, onRejected, promise){                                                                 // 285
	  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;                                        // 286
	  this.onRejected = typeof onRejected === 'function' ? onRejected : null;                                           // 287
	  this.promise = promise;                                                                                           // 288
	}                                                                                                                   // 289
                                                                                                                     // 290
	/**                                                                                                                 // 291
	 * Take a potentially misbehaving resolver function and make sure                                                   // 292
	 * onFulfilled and onRejected are only called once.                                                                 // 293
	 *                                                                                                                  // 294
	 * Makes no guarantees about asynchrony.                                                                            // 295
	 */                                                                                                                 // 296
	function doResolve(fn, promise) {                                                                                   // 297
	  var done = false;                                                                                                 // 298
	  var res = tryCallTwo(fn, function (value) {                                                                       // 299
	    if (done) return;                                                                                               // 300
	    done = true;                                                                                                    // 301
	    resolve(promise, value);                                                                                        // 302
	  }, function (reason) {                                                                                            // 303
	    if (done) return;                                                                                               // 304
	    done = true;                                                                                                    // 305
	    reject(promise, reason);                                                                                        // 306
	  })                                                                                                                // 307
	  if (!done && res === IS_ERROR) {                                                                                  // 308
	    done = true;                                                                                                    // 309
	    reject(promise, LAST_ERROR);                                                                                    // 310
	  }                                                                                                                 // 311
	}                                                                                                                   // 312
                                                                                                                     // 313
                                                                                                                     // 314
/***/ },                                                                                                             // 315
/* 5 */                                                                                                              // 316
/***/ function(module, exports) {                                                                                    // 317
                                                                                                                     // 318
	/* WEBPACK VAR INJECTION */(function(global) {"use strict";                                                         // 319
                                                                                                                     // 320
	// Use the fastest means possible to execute a task in its own turn, with                                           // 321
	// priority over other events including IO, animation, reflow, and redraw                                           // 322
	// events in browsers.                                                                                              // 323
	//                                                                                                                  // 324
	// An exception thrown by a task will permanently interrupt the processing of                                       // 325
	// subsequent tasks. The higher level `asap` function ensures that if an                                            // 326
	// exception is thrown by a task, that the task queue will continue flushing as                                     // 327
	// soon as possible, but if you use `rawAsap` directly, you are responsible to                                      // 328
	// either ensure that no exceptions are thrown from your task, or to manually                                       // 329
	// call `rawAsap.requestFlush` if an exception is thrown.                                                           // 330
	module.exports = rawAsap;                                                                                           // 331
	function rawAsap(task) {                                                                                            // 332
	    if (!queue.length) {                                                                                            // 333
	        requestFlush();                                                                                             // 334
	        flushing = true;                                                                                            // 335
	    }                                                                                                               // 336
	    // Equivalent to push, but avoids a function call.                                                              // 337
	    queue[queue.length] = task;                                                                                     // 338
	}                                                                                                                   // 339
                                                                                                                     // 340
	var queue = [];                                                                                                     // 341
	// Once a flush has been requested, no further calls to `requestFlush` are                                          // 342
	// necessary until the next `flush` completes.                                                                      // 343
	var flushing = false;                                                                                               // 344
	// `requestFlush` is an implementation-specific method that attempts to kick                                        // 345
	// off a `flush` event as quickly as possible. `flush` will attempt to exhaust                                      // 346
	// the event queue before yielding to the browser's own event loop.                                                 // 347
	var requestFlush;                                                                                                   // 348
	// The position of the next task to execute in the task queue. This is                                              // 349
	// preserved between calls to `flush` so that it can be resumed if                                                  // 350
	// a task throws an exception.                                                                                      // 351
	var index = 0;                                                                                                      // 352
	// If a task schedules additional tasks recursively, the task queue can grow                                        // 353
	// unbounded. To prevent memory exhaustion, the task queue will periodically                                        // 354
	// truncate already-completed tasks.                                                                                // 355
	var capacity = 1024;                                                                                                // 356
                                                                                                                     // 357
	// The flush function processes all tasks that have been scheduled with                                             // 358
	// `rawAsap` unless and until one of those tasks throws an exception.                                               // 359
	// If a task throws an exception, `flush` ensures that its state will remain                                        // 360
	// consistent and will resume where it left off when called again.                                                  // 361
	// However, `flush` does not make any arrangements to be called again if an                                         // 362
	// exception is thrown.                                                                                             // 363
	function flush() {                                                                                                  // 364
	    while (index < queue.length) {                                                                                  // 365
	        var currentIndex = index;                                                                                   // 366
	        // Advance the index before calling the task. This ensures that we will                                     // 367
	        // begin flushing on the next task the task throws an error.                                                // 368
	        index = index + 1;                                                                                          // 369
	        queue[currentIndex].call();                                                                                 // 370
	        // Prevent leaking memory for long chains of recursive calls to `asap`.                                     // 371
	        // If we call `asap` within tasks scheduled by `asap`, the queue will                                       // 372
	        // grow, but to avoid an O(n) walk for every task we execute, we don't                                      // 373
	        // shift tasks off the queue after they have been executed.                                                 // 374
	        // Instead, we periodically shift 1024 tasks off the queue.                                                 // 375
	        if (index > capacity) {                                                                                     // 376
	            // Manually shift all values starting at the index back to the                                          // 377
	            // beginning of the queue.                                                                              // 378
	            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {                        // 379
	                queue[scan] = queue[scan + index];                                                                  // 380
	            }                                                                                                       // 381
	            queue.length -= index;                                                                                  // 382
	            index = 0;                                                                                              // 383
	        }                                                                                                           // 384
	    }                                                                                                               // 385
	    queue.length = 0;                                                                                               // 386
	    index = 0;                                                                                                      // 387
	    flushing = false;                                                                                               // 388
	}                                                                                                                   // 389
                                                                                                                     // 390
	// `requestFlush` is implemented using a strategy based on data collected from                                      // 391
	// every available SauceLabs Selenium web driver worker at time of writing.                                         // 392
	// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593           // 393
                                                                                                                     // 394
	// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that                                        // 395
	// have WebKitMutationObserver but not un-prefixed MutationObserver.                                                // 396
	// Must use `global` instead of `window` to work in both frames and web                                             // 397
	// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.                                                 // 398
	var BrowserMutationObserver = global.MutationObserver || global.WebKitMutationObserver;                             // 399
                                                                                                                     // 400
	// MutationObservers are desirable because they have high priority and work                                         // 401
	// reliably everywhere they are implemented.                                                                        // 402
	// They are implemented in all modern browsers.                                                                     // 403
	//                                                                                                                  // 404
	// - Android 4-4.3                                                                                                  // 405
	// - Chrome 26-34                                                                                                   // 406
	// - Firefox 14-29                                                                                                  // 407
	// - Internet Explorer 11                                                                                           // 408
	// - iPad Safari 6-7.1                                                                                              // 409
	// - iPhone Safari 7-7.1                                                                                            // 410
	// - Safari 6-7                                                                                                     // 411
	if (typeof BrowserMutationObserver === "function") {                                                                // 412
	    requestFlush = makeRequestCallFromMutationObserver(flush);                                                      // 413
                                                                                                                     // 414
	// MessageChannels are desirable because they give direct access to the HTML                                        // 415
	// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera                                     // 416
	// 11-12, and in web workers in many engines.                                                                       // 417
	// Although message channels yield to any queued rendering and IO tasks, they                                       // 418
	// would be better than imposing the 4ms delay of timers.                                                           // 419
	// However, they do not work reliably in Internet Explorer or Safari.                                               // 420
                                                                                                                     // 421
	// Internet Explorer 10 is the only browser that has setImmediate but does                                          // 422
	// not have MutationObservers.                                                                                      // 423
	// Although setImmediate yields to the browser's renderer, it would be                                              // 424
	// preferrable to falling back to setTimeout since it does not have                                                 // 425
	// the minimum 4ms penalty.                                                                                         // 426
	// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and                                      // 427
	// Desktop to a lesser extent) that renders both setImmediate and                                                   // 428
	// MessageChannel useless for the purposes of ASAP.                                                                 // 429
	// https://github.com/kriskowal/q/issues/396                                                                        // 430
                                                                                                                     // 431
	// Timers are implemented universally.                                                                              // 432
	// We fall back to timers in workers in most engines, and in foreground                                             // 433
	// contexts in the following browsers.                                                                              // 434
	// However, note that even this simple case requires nuances to operate in a                                        // 435
	// broad spectrum of browsers.                                                                                      // 436
	//                                                                                                                  // 437
	// - Firefox 3-13                                                                                                   // 438
	// - Internet Explorer 6-9                                                                                          // 439
	// - iPad Safari 4.3                                                                                                // 440
	// - Lynx 2.8.7                                                                                                     // 441
	} else {                                                                                                            // 442
	    requestFlush = makeRequestCallFromTimer(flush);                                                                 // 443
	}                                                                                                                   // 444
                                                                                                                     // 445
	// `requestFlush` requests that the high priority event queue be flushed as                                         // 446
	// soon as possible.                                                                                                // 447
	// This is useful to prevent an error thrown in a task from stalling the event                                      // 448
	// queue if the exception handled by Node.js’s                                                                      // 449
	// `process.on("uncaughtException")` or by a domain.                                                                // 450
	rawAsap.requestFlush = requestFlush;                                                                                // 451
                                                                                                                     // 452
	// To request a high priority event, we induce a mutation observer by toggling                                      // 453
	// the text of a text node between "1" and "-1".                                                                    // 454
	function makeRequestCallFromMutationObserver(callback) {                                                            // 455
	    var toggle = 1;                                                                                                 // 456
	    var observer = new BrowserMutationObserver(callback);                                                           // 457
	    var node = document.createTextNode("");                                                                         // 458
	    observer.observe(node, {characterData: true});                                                                  // 459
	    return function requestCall() {                                                                                 // 460
	        toggle = -toggle;                                                                                           // 461
	        node.data = toggle;                                                                                         // 462
	    };                                                                                                              // 463
	}                                                                                                                   // 464
                                                                                                                     // 465
	// The message channel technique was discovered by Malte Ubl and was the                                            // 466
	// original foundation for this library.                                                                            // 467
	// http://www.nonblocking.io/2011/06/windownexttick.html                                                            // 468
                                                                                                                     // 469
	// Safari 6.0.5 (at least) intermittently fails to create message ports on a                                        // 470
	// page's first load. Thankfully, this version of Safari supports                                                   // 471
	// MutationObservers, so we don't need to fall back in that case.                                                   // 472
                                                                                                                     // 473
	// function makeRequestCallFromMessageChannel(callback) {                                                           // 474
	//     var channel = new MessageChannel();                                                                          // 475
	//     channel.port1.onmessage = callback;                                                                          // 476
	//     return function requestCall() {                                                                              // 477
	//         channel.port2.postMessage(0);                                                                            // 478
	//     };                                                                                                           // 479
	// }                                                                                                                // 480
                                                                                                                     // 481
	// For reasons explained above, we are also unable to use `setImmediate`                                            // 482
	// under any circumstances.                                                                                         // 483
	// Even if we were, there is another bug in Internet Explorer 10.                                                   // 484
	// It is not sufficient to assign `setImmediate` to `requestFlush` because                                          // 485
	// `setImmediate` must be called *by name* and therefore must be wrapped in a                                       // 486
	// closure.                                                                                                         // 487
	// Never forget.                                                                                                    // 488
                                                                                                                     // 489
	// function makeRequestCallFromSetImmediate(callback) {                                                             // 490
	//     return function requestCall() {                                                                              // 491
	//         setImmediate(callback);                                                                                  // 492
	//     };                                                                                                           // 493
	// }                                                                                                                // 494
                                                                                                                     // 495
	// Safari 6.0 has a problem where timers will get lost while the user is                                            // 496
	// scrolling. This problem does not impact ASAP because Safari 6.0 supports                                         // 497
	// mutation observers, so that implementation is used instead.                                                      // 498
	// However, if we ever elect to use timers in Safari, the prevalent work-around                                     // 499
	// is to add a scroll event listener that calls for a flush.                                                        // 500
                                                                                                                     // 501
	// `setTimeout` does not call the passed callback if the delay is less than                                         // 502
	// approximately 7 in web workers in Firefox 8 through 18, and sometimes not                                        // 503
	// even then.                                                                                                       // 504
                                                                                                                     // 505
	function makeRequestCallFromTimer(callback) {                                                                       // 506
	    return function requestCall() {                                                                                 // 507
	        // We dispatch a timeout with a specified delay of 0 for engines that                                       // 508
	        // can reliably accommodate that request. This will usually be snapped                                      // 509
	        // to a 4 milisecond delay, but once we're flushing, there's no delay                                       // 510
	        // between events.                                                                                          // 511
	        var timeoutHandle = setTimeout(handleTimer, 0);                                                             // 512
	        // However, since this timer gets frequently dropped in Firefox                                             // 513
	        // workers, we enlist an interval handle that will try to fire                                              // 514
	        // an event 20 times per second until it succeeds.                                                          // 515
	        var intervalHandle = setInterval(handleTimer, 50);                                                          // 516
                                                                                                                     // 517
	        function handleTimer() {                                                                                    // 518
	            // Whichever timer succeeds will cancel both timers and                                                 // 519
	            // execute the callback.                                                                                // 520
	            clearTimeout(timeoutHandle);                                                                            // 521
	            clearInterval(intervalHandle);                                                                          // 522
	            callback();                                                                                             // 523
	        }                                                                                                           // 524
	    };                                                                                                              // 525
	}                                                                                                                   // 526
                                                                                                                     // 527
	// This is for `asap.js` only.                                                                                      // 528
	// Its name will be periodically randomized to break any code that depends on                                       // 529
	// its existence.                                                                                                   // 530
	rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;                                                        // 531
                                                                                                                     // 532
	// ASAP was originally a nextTick shim included in Q. This was factored out                                         // 533
	// into this ASAP package. It was later adapted to RSVP which made further                                          // 534
	// amendments. These decisions, particularly to marginalize MessageChannel and                                      // 535
	// to capture the MutationObserver implementation in a closure, were integrated                                     // 536
	// back into ASAP proper.                                                                                           // 537
	// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js                // 538
                                                                                                                     // 539
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))                                        // 540
                                                                                                                     // 541
/***/ },                                                                                                             // 542
/* 6 */                                                                                                              // 543
/***/ function(module, exports, __webpack_require__) {                                                               // 544
                                                                                                                     // 545
	'use strict';                                                                                                       // 546
                                                                                                                     // 547
	var Promise = __webpack_require__(4);                                                                               // 548
                                                                                                                     // 549
	module.exports = Promise;                                                                                           // 550
	Promise.prototype.done = function (onFulfilled, onRejected) {                                                       // 551
	  var self = arguments.length ? this.then.apply(this, arguments) : this;                                            // 552
	  self.then(null, function (err) {                                                                                  // 553
	    setTimeout(function () {                                                                                        // 554
	      throw err;                                                                                                    // 555
	    }, 0);                                                                                                          // 556
	  });                                                                                                               // 557
	};                                                                                                                  // 558
                                                                                                                     // 559
                                                                                                                     // 560
/***/ },                                                                                                             // 561
/* 7 */                                                                                                              // 562
/***/ function(module, exports, __webpack_require__) {                                                               // 563
                                                                                                                     // 564
	'use strict';                                                                                                       // 565
                                                                                                                     // 566
	var Promise = __webpack_require__(4);                                                                               // 567
                                                                                                                     // 568
	module.exports = Promise;                                                                                           // 569
	Promise.prototype['finally'] = function (f) {                                                                       // 570
	  return this.then(function (value) {                                                                               // 571
	    return Promise.resolve(f()).then(function () {                                                                  // 572
	      return value;                                                                                                 // 573
	    });                                                                                                             // 574
	  }, function (err) {                                                                                               // 575
	    return Promise.resolve(f()).then(function () {                                                                  // 576
	      throw err;                                                                                                    // 577
	    });                                                                                                             // 578
	  });                                                                                                               // 579
	};                                                                                                                  // 580
                                                                                                                     // 581
                                                                                                                     // 582
/***/ },                                                                                                             // 583
/* 8 */                                                                                                              // 584
/***/ function(module, exports, __webpack_require__) {                                                               // 585
                                                                                                                     // 586
	'use strict';                                                                                                       // 587
                                                                                                                     // 588
	//This file contains the ES6 extensions to the core Promises/A+ API                                                 // 589
                                                                                                                     // 590
	var Promise = __webpack_require__(4);                                                                               // 591
                                                                                                                     // 592
	module.exports = Promise;                                                                                           // 593
                                                                                                                     // 594
	/* Static Functions */                                                                                              // 595
                                                                                                                     // 596
	var TRUE = valuePromise(true);                                                                                      // 597
	var FALSE = valuePromise(false);                                                                                    // 598
	var NULL = valuePromise(null);                                                                                      // 599
	var UNDEFINED = valuePromise(undefined);                                                                            // 600
	var ZERO = valuePromise(0);                                                                                         // 601
	var EMPTYSTRING = valuePromise('');                                                                                 // 602
                                                                                                                     // 603
	function valuePromise(value) {                                                                                      // 604
	  var p = new Promise(Promise._99);                                                                                 // 605
	  p._37 = 1;                                                                                                        // 606
	  p._12 = value;                                                                                                    // 607
	  return p;                                                                                                         // 608
	}                                                                                                                   // 609
	Promise.resolve = function (value) {                                                                                // 610
	  if (value instanceof Promise) return value;                                                                       // 611
                                                                                                                     // 612
	  if (value === null) return NULL;                                                                                  // 613
	  if (value === undefined) return UNDEFINED;                                                                        // 614
	  if (value === true) return TRUE;                                                                                  // 615
	  if (value === false) return FALSE;                                                                                // 616
	  if (value === 0) return ZERO;                                                                                     // 617
	  if (value === '') return EMPTYSTRING;                                                                             // 618
                                                                                                                     // 619
	  if (typeof value === 'object' || typeof value === 'function') {                                                   // 620
	    try {                                                                                                           // 621
	      var then = value.then;                                                                                        // 622
	      if (typeof then === 'function') {                                                                             // 623
	        return new Promise(then.bind(value));                                                                       // 624
	      }                                                                                                             // 625
	    } catch (ex) {                                                                                                  // 626
	      return new Promise(function (resolve, reject) {                                                               // 627
	        reject(ex);                                                                                                 // 628
	      });                                                                                                           // 629
	    }                                                                                                               // 630
	  }                                                                                                                 // 631
	  return valuePromise(value);                                                                                       // 632
	};                                                                                                                  // 633
                                                                                                                     // 634
	Promise.all = function (arr) {                                                                                      // 635
	  var args = Array.prototype.slice.call(arr);                                                                       // 636
                                                                                                                     // 637
	  return new Promise(function (resolve, reject) {                                                                   // 638
	    if (args.length === 0) return resolve([]);                                                                      // 639
	    var remaining = args.length;                                                                                    // 640
	    function res(i, val) {                                                                                          // 641
	      if (val && (typeof val === 'object' || typeof val === 'function')) {                                          // 642
	        if (val instanceof Promise && val.then === Promise.prototype.then) {                                        // 643
	          while (val._37 === 3) {                                                                                   // 644
	            val = val._12;                                                                                          // 645
	          }                                                                                                         // 646
	          if (val._37 === 1) return res(i, val._12);                                                                // 647
	          if (val._37 === 2) reject(val._12);                                                                       // 648
	          val.then(function (val) {                                                                                 // 649
	            res(i, val);                                                                                            // 650
	          }, reject);                                                                                               // 651
	          return;                                                                                                   // 652
	        } else {                                                                                                    // 653
	          var then = val.then;                                                                                      // 654
	          if (typeof then === 'function') {                                                                         // 655
	            var p = new Promise(then.bind(val));                                                                    // 656
	            p.then(function (val) {                                                                                 // 657
	              res(i, val);                                                                                          // 658
	            }, reject);                                                                                             // 659
	            return;                                                                                                 // 660
	          }                                                                                                         // 661
	        }                                                                                                           // 662
	      }                                                                                                             // 663
	      args[i] = val;                                                                                                // 664
	      if (--remaining === 0) {                                                                                      // 665
	        resolve(args);                                                                                              // 666
	      }                                                                                                             // 667
	    }                                                                                                               // 668
	    for (var i = 0; i < args.length; i++) {                                                                         // 669
	      res(i, args[i]);                                                                                              // 670
	    }                                                                                                               // 671
	  });                                                                                                               // 672
	};                                                                                                                  // 673
                                                                                                                     // 674
	Promise.reject = function (value) {                                                                                 // 675
	  return new Promise(function (resolve, reject) {                                                                   // 676
	    reject(value);                                                                                                  // 677
	  });                                                                                                               // 678
	};                                                                                                                  // 679
                                                                                                                     // 680
	Promise.race = function (values) {                                                                                  // 681
	  return new Promise(function (resolve, reject) {                                                                   // 682
	    values.forEach(function(value){                                                                                 // 683
	      Promise.resolve(value).then(resolve, reject);                                                                 // 684
	    });                                                                                                             // 685
	  });                                                                                                               // 686
	};                                                                                                                  // 687
                                                                                                                     // 688
	/* Prototype Methods */                                                                                             // 689
                                                                                                                     // 690
	Promise.prototype['catch'] = function (onRejected) {                                                                // 691
	  return this.then(null, onRejected);                                                                               // 692
	};                                                                                                                  // 693
                                                                                                                     // 694
                                                                                                                     // 695
/***/ },                                                                                                             // 696
/* 9 */                                                                                                              // 697
/***/ function(module, exports, __webpack_require__) {                                                               // 698
                                                                                                                     // 699
	'use strict';                                                                                                       // 700
                                                                                                                     // 701
	// This file contains then/promise specific extensions that are only useful                                         // 702
	// for node.js interop                                                                                              // 703
                                                                                                                     // 704
	var Promise = __webpack_require__(4);                                                                               // 705
	var asap = __webpack_require__(10);                                                                                 // 706
                                                                                                                     // 707
	module.exports = Promise;                                                                                           // 708
                                                                                                                     // 709
	/* Static Functions */                                                                                              // 710
                                                                                                                     // 711
	Promise.denodeify = function (fn, argumentCount) {                                                                  // 712
	  argumentCount = argumentCount || Infinity;                                                                        // 713
	  return function () {                                                                                              // 714
	    var self = this;                                                                                                // 715
	    var args = Array.prototype.slice.call(arguments, 0,                                                             // 716
	        argumentCount > 0 ? argumentCount : 0);                                                                     // 717
	    return new Promise(function (resolve, reject) {                                                                 // 718
	      args.push(function (err, res) {                                                                               // 719
	        if (err) reject(err);                                                                                       // 720
	        else resolve(res);                                                                                          // 721
	      })                                                                                                            // 722
	      var res = fn.apply(self, args);                                                                               // 723
	      if (res &&                                                                                                    // 724
	        (                                                                                                           // 725
	          typeof res === 'object' ||                                                                                // 726
	          typeof res === 'function'                                                                                 // 727
	        ) &&                                                                                                        // 728
	        typeof res.then === 'function'                                                                              // 729
	      ) {                                                                                                           // 730
	        resolve(res);                                                                                               // 731
	      }                                                                                                             // 732
	    })                                                                                                              // 733
	  }                                                                                                                 // 734
	}                                                                                                                   // 735
	Promise.nodeify = function (fn) {                                                                                   // 736
	  return function () {                                                                                              // 737
	    var args = Array.prototype.slice.call(arguments);                                                               // 738
	    var callback =                                                                                                  // 739
	      typeof args[args.length - 1] === 'function' ? args.pop() : null;                                              // 740
	    var ctx = this;                                                                                                 // 741
	    try {                                                                                                           // 742
	      return fn.apply(this, arguments).nodeify(callback, ctx);                                                      // 743
	    } catch (ex) {                                                                                                  // 744
	      if (callback === null || typeof callback == 'undefined') {                                                    // 745
	        return new Promise(function (resolve, reject) {                                                             // 746
	          reject(ex);                                                                                               // 747
	        });                                                                                                         // 748
	      } else {                                                                                                      // 749
	        asap(function () {                                                                                          // 750
	          callback.call(ctx, ex);                                                                                   // 751
	        })                                                                                                          // 752
	      }                                                                                                             // 753
	    }                                                                                                               // 754
	  }                                                                                                                 // 755
	}                                                                                                                   // 756
                                                                                                                     // 757
	Promise.prototype.nodeify = function (callback, ctx) {                                                              // 758
	  if (typeof callback != 'function') return this;                                                                   // 759
                                                                                                                     // 760
	  this.then(function (value) {                                                                                      // 761
	    asap(function () {                                                                                              // 762
	      callback.call(ctx, null, value);                                                                              // 763
	    });                                                                                                             // 764
	  }, function (err) {                                                                                               // 765
	    asap(function () {                                                                                              // 766
	      callback.call(ctx, err);                                                                                      // 767
	    });                                                                                                             // 768
	  });                                                                                                               // 769
	}                                                                                                                   // 770
                                                                                                                     // 771
                                                                                                                     // 772
/***/ },                                                                                                             // 773
/* 10 */                                                                                                             // 774
/***/ function(module, exports, __webpack_require__) {                                                               // 775
                                                                                                                     // 776
	"use strict";                                                                                                       // 777
                                                                                                                     // 778
	// rawAsap provides everything we need except exception management.                                                 // 779
	var rawAsap = __webpack_require__(5);                                                                               // 780
	// RawTasks are recycled to reduce GC churn.                                                                        // 781
	var freeTasks = [];                                                                                                 // 782
	// We queue errors to ensure they are thrown in right order (FIFO).                                                 // 783
	// Array-as-queue is good enough here, since we are just dealing with exceptions.                                   // 784
	var pendingErrors = [];                                                                                             // 785
	var requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);                                          // 786
                                                                                                                     // 787
	function throwFirstError() {                                                                                        // 788
	    if (pendingErrors.length) {                                                                                     // 789
	        throw pendingErrors.shift();                                                                                // 790
	    }                                                                                                               // 791
	}                                                                                                                   // 792
                                                                                                                     // 793
	/**                                                                                                                 // 794
	 * Calls a task as soon as possible after returning, in its own event, with priority                                // 795
	 * over other events like animation, reflow, and repaint. An error thrown from an                                   // 796
	 * event will not interrupt, nor even substantially slow down the processing of                                     // 797
	 * other events, but will be rather postponed to a lower priority event.                                            // 798
	 * @param {{call}} task A callable object, typically a function that takes no                                       // 799
	 * arguments.                                                                                                       // 800
	 */                                                                                                                 // 801
	module.exports = asap;                                                                                              // 802
	function asap(task) {                                                                                               // 803
	    var rawTask;                                                                                                    // 804
	    if (freeTasks.length) {                                                                                         // 805
	        rawTask = freeTasks.pop();                                                                                  // 806
	    } else {                                                                                                        // 807
	        rawTask = new RawTask();                                                                                    // 808
	    }                                                                                                               // 809
	    rawTask.task = task;                                                                                            // 810
	    rawAsap(rawTask);                                                                                               // 811
	}                                                                                                                   // 812
                                                                                                                     // 813
	// We wrap tasks with recyclable task objects.  A task object implements                                            // 814
	// `call`, just like a function.                                                                                    // 815
	function RawTask() {                                                                                                // 816
	    this.task = null;                                                                                               // 817
	}                                                                                                                   // 818
                                                                                                                     // 819
	// The sole purpose of wrapping the task is to catch the exception and recycle                                      // 820
	// the task object after its single use.                                                                            // 821
	RawTask.prototype.call = function () {                                                                              // 822
	    try {                                                                                                           // 823
	        this.task.call();                                                                                           // 824
	    } catch (error) {                                                                                               // 825
	        if (asap.onerror) {                                                                                         // 826
	            // This hook exists purely for testing purposes.                                                        // 827
	            // Its name will be periodically randomized to break any code that                                      // 828
	            // depends on its existence.                                                                            // 829
	            asap.onerror(error);                                                                                    // 830
	        } else {                                                                                                    // 831
	            // In a web browser, exceptions are not fatal. However, to avoid                                        // 832
	            // slowing down the queue of pending tasks, we rethrow the error in a                                   // 833
	            // lower priority turn.                                                                                 // 834
	            pendingErrors.push(error);                                                                              // 835
	            requestErrorThrow();                                                                                    // 836
	        }                                                                                                           // 837
	    } finally {                                                                                                     // 838
	        this.task = null;                                                                                           // 839
	        freeTasks[freeTasks.length] = this;                                                                         // 840
	    }                                                                                                               // 841
	};                                                                                                                  // 842
                                                                                                                     // 843
                                                                                                                     // 844
/***/ }                                                                                                              // 845
/******/ ]);                                                                                                         // 846
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.promise = {
  Promise: Promise
};

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

/* Package-scope variables */
var Base64;

(function(){

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
// packages/base64/base64.js                                                            //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////
                                                                                        //
// Base 64 encoding                                                                     // 1
                                                                                        // 2
var BASE_64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                                                                                        // 4
var BASE_64_VALS = {};                                                                  // 5
                                                                                        // 6
for (var i = 0; i < BASE_64_CHARS.length; i++) {                                        // 7
  BASE_64_VALS[BASE_64_CHARS.charAt(i)] = i;                                            // 8
};                                                                                      // 9
                                                                                        // 10
Base64 = {};                                                                            // 11
                                                                                        // 12
Base64.encode = function (array) {                                                      // 13
                                                                                        // 14
  if (typeof array === "string") {                                                      // 15
    var str = array;                                                                    // 16
    array = Base64.newBinary(str.length);                                               // 17
    for (var i = 0; i < str.length; i++) {                                              // 18
      var ch = str.charCodeAt(i);                                                       // 19
      if (ch > 0xFF) {                                                                  // 20
        throw new Error(                                                                // 21
          "Not ascii. Base64.encode can only take ascii strings.");                     // 22
      }                                                                                 // 23
      array[i] = ch;                                                                    // 24
    }                                                                                   // 25
  }                                                                                     // 26
                                                                                        // 27
  var answer = [];                                                                      // 28
  var a = null;                                                                         // 29
  var b = null;                                                                         // 30
  var c = null;                                                                         // 31
  var d = null;                                                                         // 32
  for (var i = 0; i < array.length; i++) {                                              // 33
    switch (i % 3) {                                                                    // 34
    case 0:                                                                             // 35
      a = (array[i] >> 2) & 0x3F;                                                       // 36
      b = (array[i] & 0x03) << 4;                                                       // 37
      break;                                                                            // 38
    case 1:                                                                             // 39
      b = b | (array[i] >> 4) & 0xF;                                                    // 40
      c = (array[i] & 0xF) << 2;                                                        // 41
      break;                                                                            // 42
    case 2:                                                                             // 43
      c = c | (array[i] >> 6) & 0x03;                                                   // 44
      d = array[i] & 0x3F;                                                              // 45
      answer.push(getChar(a));                                                          // 46
      answer.push(getChar(b));                                                          // 47
      answer.push(getChar(c));                                                          // 48
      answer.push(getChar(d));                                                          // 49
      a = null;                                                                         // 50
      b = null;                                                                         // 51
      c = null;                                                                         // 52
      d = null;                                                                         // 53
      break;                                                                            // 54
    }                                                                                   // 55
  }                                                                                     // 56
  if (a != null) {                                                                      // 57
    answer.push(getChar(a));                                                            // 58
    answer.push(getChar(b));                                                            // 59
    if (c == null)                                                                      // 60
      answer.push('=');                                                                 // 61
    else                                                                                // 62
      answer.push(getChar(c));                                                          // 63
    if (d == null)                                                                      // 64
      answer.push('=');                                                                 // 65
  }                                                                                     // 66
  return answer.join("");                                                               // 67
};                                                                                      // 68
                                                                                        // 69
var getChar = function (val) {                                                          // 70
  return BASE_64_CHARS.charAt(val);                                                     // 71
};                                                                                      // 72
                                                                                        // 73
var getVal = function (ch) {                                                            // 74
  if (ch === '=') {                                                                     // 75
    return -1;                                                                          // 76
  }                                                                                     // 77
  return BASE_64_VALS[ch];                                                              // 78
};                                                                                      // 79
                                                                                        // 80
// XXX This is a weird place for this to live, but it's used both by                    // 81
// this package and 'ejson', and we can't put it in 'ejson' without                     // 82
// introducing a circular dependency. It should probably be in its own                  // 83
// package or as a helper in a package that both 'base64' and 'ejson'                   // 84
// use.                                                                                 // 85
Base64.newBinary = function (len) {                                                     // 86
  if (typeof Uint8Array === 'undefined' || typeof ArrayBuffer === 'undefined') {        // 87
    var ret = [];                                                                       // 88
    for (var i = 0; i < len; i++) {                                                     // 89
      ret.push(0);                                                                      // 90
    }                                                                                   // 91
    ret.$Uint8ArrayPolyfill = true;                                                     // 92
    return ret;                                                                         // 93
  }                                                                                     // 94
  return new Uint8Array(new ArrayBuffer(len));                                          // 95
};                                                                                      // 96
                                                                                        // 97
Base64.decode = function (str) {                                                        // 98
  var len = Math.floor((str.length*3)/4);                                               // 99
  if (str.charAt(str.length - 1) == '=') {                                              // 100
    len--;                                                                              // 101
    if (str.charAt(str.length - 2) == '=')                                              // 102
      len--;                                                                            // 103
  }                                                                                     // 104
  var arr = Base64.newBinary(len);                                                      // 105
                                                                                        // 106
  var one = null;                                                                       // 107
  var two = null;                                                                       // 108
  var three = null;                                                                     // 109
                                                                                        // 110
  var j = 0;                                                                            // 111
                                                                                        // 112
  for (var i = 0; i < str.length; i++) {                                                // 113
    var c = str.charAt(i);                                                              // 114
    var v = getVal(c);                                                                  // 115
    switch (i % 4) {                                                                    // 116
    case 0:                                                                             // 117
      if (v < 0)                                                                        // 118
        throw new Error('invalid base64 string');                                       // 119
      one = v << 2;                                                                     // 120
      break;                                                                            // 121
    case 1:                                                                             // 122
      if (v < 0)                                                                        // 123
        throw new Error('invalid base64 string');                                       // 124
      one = one | (v >> 4);                                                             // 125
      arr[j++] = one;                                                                   // 126
      two = (v & 0x0F) << 4;                                                            // 127
      break;                                                                            // 128
    case 2:                                                                             // 129
      if (v >= 0) {                                                                     // 130
        two = two | (v >> 2);                                                           // 131
        arr[j++] = two;                                                                 // 132
        three = (v & 0x03) << 6;                                                        // 133
      }                                                                                 // 134
      break;                                                                            // 135
    case 3:                                                                             // 136
      if (v >= 0) {                                                                     // 137
        arr[j++] = three | v;                                                           // 138
      }                                                                                 // 139
      break;                                                                            // 140
    }                                                                                   // 141
  }                                                                                     // 142
  return arr;                                                                           // 143
};                                                                                      // 144
                                                                                        // 145
//////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.base64 = {
  Base64: Base64
};

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var _ = Package.underscore._;
var Base64 = Package.base64.Base64;

/* Package-scope variables */
var EJSON, EJSONTest;

(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// packages/ejson/ejson.js                                                                                           //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/**                                                                                                                  // 1
 * @namespace                                                                                                        // 2
 * @summary Namespace for EJSON functions                                                                            // 3
 */                                                                                                                  // 4
EJSON = {};                                                                                                          // 5
EJSONTest = {};                                                                                                      // 6
                                                                                                                     // 7
                                                                                                                     // 8
                                                                                                                     // 9
// Custom type interface definition                                                                                  // 10
/**                                                                                                                  // 11
 * @class CustomType                                                                                                 // 12
 * @instanceName customType                                                                                          // 13
 * @memberOf EJSON                                                                                                   // 14
 * @summary The interface that a class must satisfy to be able to become an                                          // 15
 * EJSON custom type via EJSON.addType.                                                                              // 16
 */                                                                                                                  // 17
                                                                                                                     // 18
/**                                                                                                                  // 19
 * @function typeName                                                                                                // 20
 * @memberOf EJSON.CustomType                                                                                        // 21
 * @summary Return the tag used to identify this type.  This must match the tag used to register this type with [`EJSON.addType`](#ejson_add_type).
 * @locus Anywhere                                                                                                   // 23
 * @instance                                                                                                         // 24
 */                                                                                                                  // 25
                                                                                                                     // 26
/**                                                                                                                  // 27
 * @function toJSONValue                                                                                             // 28
 * @memberOf EJSON.CustomType                                                                                        // 29
 * @summary Serialize this instance into a JSON-compatible value.                                                    // 30
 * @locus Anywhere                                                                                                   // 31
 * @instance                                                                                                         // 32
 */                                                                                                                  // 33
                                                                                                                     // 34
/**                                                                                                                  // 35
 * @function clone                                                                                                   // 36
 * @memberOf EJSON.CustomType                                                                                        // 37
 * @summary Return a value `r` such that `this.equals(r)` is true, and modifications to `r` do not affect `this` and vice versa.
 * @locus Anywhere                                                                                                   // 39
 * @instance                                                                                                         // 40
 */                                                                                                                  // 41
                                                                                                                     // 42
/**                                                                                                                  // 43
 * @function equals                                                                                                  // 44
 * @memberOf EJSON.CustomType                                                                                        // 45
 * @summary Return `true` if `other` has a value equal to `this`; `false` otherwise.                                 // 46
 * @locus Anywhere                                                                                                   // 47
 * @param {Object} other Another object to compare this to.                                                          // 48
 * @instance                                                                                                         // 49
 */                                                                                                                  // 50
                                                                                                                     // 51
                                                                                                                     // 52
var customTypes = {};                                                                                                // 53
// Add a custom type, using a method of your choice to get to and                                                    // 54
// from a basic JSON-able representation.  The factory argument                                                      // 55
// is a function of JSON-able --> your object                                                                        // 56
// The type you add must have:                                                                                       // 57
// - A toJSONValue() method, so that Meteor can serialize it                                                         // 58
// - a typeName() method, to show how to look it up in our type table.                                               // 59
// It is okay if these methods are monkey-patched on.                                                                // 60
// EJSON.clone will use toJSONValue and the given factory to produce                                                 // 61
// a clone, but you may specify a method clone() that will be                                                        // 62
// used instead.                                                                                                     // 63
// Similarly, EJSON.equals will use toJSONValue to make comparisons,                                                 // 64
// but you may provide a method equals() instead.                                                                    // 65
/**                                                                                                                  // 66
 * @summary Add a custom datatype to EJSON.                                                                          // 67
 * @locus Anywhere                                                                                                   // 68
 * @param {String} name A tag for your custom type; must be unique among custom data types defined in your project, and must match the result of your type's `typeName` method.
 * @param {Function} factory A function that deserializes a JSON-compatible value into an instance of your type.  This should match the serialization performed by your type's `toJSONValue` method.
 */                                                                                                                  // 71
EJSON.addType = function (name, factory) {                                                                           // 72
  if (_.has(customTypes, name))                                                                                      // 73
    throw new Error("Type " + name + " already present");                                                            // 74
  customTypes[name] = factory;                                                                                       // 75
};                                                                                                                   // 76
                                                                                                                     // 77
var isInfOrNan = function (obj) {                                                                                    // 78
  return _.isNaN(obj) || obj === Infinity || obj === -Infinity;                                                      // 79
};                                                                                                                   // 80
                                                                                                                     // 81
var builtinConverters = [                                                                                            // 82
  { // Date                                                                                                          // 83
    matchJSONValue: function (obj) {                                                                                 // 84
      return _.has(obj, '$date') && _.size(obj) === 1;                                                               // 85
    },                                                                                                               // 86
    matchObject: function (obj) {                                                                                    // 87
      return obj instanceof Date;                                                                                    // 88
    },                                                                                                               // 89
    toJSONValue: function (obj) {                                                                                    // 90
      return {$date: obj.getTime()};                                                                                 // 91
    },                                                                                                               // 92
    fromJSONValue: function (obj) {                                                                                  // 93
      return new Date(obj.$date);                                                                                    // 94
    }                                                                                                                // 95
  },                                                                                                                 // 96
  { // NaN, Inf, -Inf. (These are the only objects with typeof !== 'object'                                          // 97
    // which we match.)                                                                                              // 98
    matchJSONValue: function (obj) {                                                                                 // 99
      return _.has(obj, '$InfNaN') && _.size(obj) === 1;                                                             // 100
    },                                                                                                               // 101
    matchObject: isInfOrNan,                                                                                         // 102
    toJSONValue: function (obj) {                                                                                    // 103
      var sign;                                                                                                      // 104
      if (_.isNaN(obj))                                                                                              // 105
        sign = 0;                                                                                                    // 106
      else if (obj === Infinity)                                                                                     // 107
        sign = 1;                                                                                                    // 108
      else                                                                                                           // 109
        sign = -1;                                                                                                   // 110
      return {$InfNaN: sign};                                                                                        // 111
    },                                                                                                               // 112
    fromJSONValue: function (obj) {                                                                                  // 113
      return obj.$InfNaN/0;                                                                                          // 114
    }                                                                                                                // 115
  },                                                                                                                 // 116
  { // Binary                                                                                                        // 117
    matchJSONValue: function (obj) {                                                                                 // 118
      return _.has(obj, '$binary') && _.size(obj) === 1;                                                             // 119
    },                                                                                                               // 120
    matchObject: function (obj) {                                                                                    // 121
      return typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array                                          // 122
        || (obj && _.has(obj, '$Uint8ArrayPolyfill'));                                                               // 123
    },                                                                                                               // 124
    toJSONValue: function (obj) {                                                                                    // 125
      return {$binary: Base64.encode(obj)};                                                                          // 126
    },                                                                                                               // 127
    fromJSONValue: function (obj) {                                                                                  // 128
      return Base64.decode(obj.$binary);                                                                             // 129
    }                                                                                                                // 130
  },                                                                                                                 // 131
  { // Escaping one level                                                                                            // 132
    matchJSONValue: function (obj) {                                                                                 // 133
      return _.has(obj, '$escape') && _.size(obj) === 1;                                                             // 134
    },                                                                                                               // 135
    matchObject: function (obj) {                                                                                    // 136
      if (_.isEmpty(obj) || _.size(obj) > 2) {                                                                       // 137
        return false;                                                                                                // 138
      }                                                                                                              // 139
      return _.any(builtinConverters, function (converter) {                                                         // 140
        return converter.matchJSONValue(obj);                                                                        // 141
      });                                                                                                            // 142
    },                                                                                                               // 143
    toJSONValue: function (obj) {                                                                                    // 144
      var newObj = {};                                                                                               // 145
      _.each(obj, function (value, key) {                                                                            // 146
        newObj[key] = EJSON.toJSONValue(value);                                                                      // 147
      });                                                                                                            // 148
      return {$escape: newObj};                                                                                      // 149
    },                                                                                                               // 150
    fromJSONValue: function (obj) {                                                                                  // 151
      var newObj = {};                                                                                               // 152
      _.each(obj.$escape, function (value, key) {                                                                    // 153
        newObj[key] = EJSON.fromJSONValue(value);                                                                    // 154
      });                                                                                                            // 155
      return newObj;                                                                                                 // 156
    }                                                                                                                // 157
  },                                                                                                                 // 158
  { // Custom                                                                                                        // 159
    matchJSONValue: function (obj) {                                                                                 // 160
      return _.has(obj, '$type') && _.has(obj, '$value') && _.size(obj) === 2;                                       // 161
    },                                                                                                               // 162
    matchObject: function (obj) {                                                                                    // 163
      return EJSON._isCustomType(obj);                                                                               // 164
    },                                                                                                               // 165
    toJSONValue: function (obj) {                                                                                    // 166
      var jsonValue = Meteor._noYieldsAllowed(function () {                                                          // 167
        return obj.toJSONValue();                                                                                    // 168
      });                                                                                                            // 169
      return {$type: obj.typeName(), $value: jsonValue};                                                             // 170
    },                                                                                                               // 171
    fromJSONValue: function (obj) {                                                                                  // 172
      var typeName = obj.$type;                                                                                      // 173
      if (!_.has(customTypes, typeName))                                                                             // 174
        throw new Error("Custom EJSON type " + typeName + " is not defined");                                        // 175
      var converter = customTypes[typeName];                                                                         // 176
      return Meteor._noYieldsAllowed(function () {                                                                   // 177
        return converter(obj.$value);                                                                                // 178
      });                                                                                                            // 179
    }                                                                                                                // 180
  }                                                                                                                  // 181
];                                                                                                                   // 182
                                                                                                                     // 183
EJSON._isCustomType = function (obj) {                                                                               // 184
  return obj &&                                                                                                      // 185
    typeof obj.toJSONValue === 'function' &&                                                                         // 186
    typeof obj.typeName === 'function' &&                                                                            // 187
    _.has(customTypes, obj.typeName());                                                                              // 188
};                                                                                                                   // 189
                                                                                                                     // 190
EJSON._getTypes = function () {                                                                                      // 191
  return customTypes;                                                                                                // 192
};                                                                                                                   // 193
                                                                                                                     // 194
EJSON._getConverters = function () {                                                                                 // 195
  return builtinConverters;                                                                                          // 196
};                                                                                                                   // 197
                                                                                                                     // 198
// for both arrays and objects, in-place modification.                                                               // 199
var adjustTypesToJSONValue =                                                                                         // 200
EJSON._adjustTypesToJSONValue = function (obj) {                                                                     // 201
  // Is it an atom that we need to adjust?                                                                           // 202
  if (obj === null)                                                                                                  // 203
    return null;                                                                                                     // 204
  var maybeChanged = toJSONValueHelper(obj);                                                                         // 205
  if (maybeChanged !== undefined)                                                                                    // 206
    return maybeChanged;                                                                                             // 207
                                                                                                                     // 208
  // Other atoms are unchanged.                                                                                      // 209
  if (typeof obj !== 'object')                                                                                       // 210
    return obj;                                                                                                      // 211
                                                                                                                     // 212
  // Iterate over array or object structure.                                                                         // 213
  _.each(obj, function (value, key) {                                                                                // 214
    if (typeof value !== 'object' && value !== undefined &&                                                          // 215
        !isInfOrNan(value))                                                                                          // 216
      return; // continue                                                                                            // 217
                                                                                                                     // 218
    var changed = toJSONValueHelper(value);                                                                          // 219
    if (changed) {                                                                                                   // 220
      obj[key] = changed;                                                                                            // 221
      return; // on to the next key                                                                                  // 222
    }                                                                                                                // 223
    // if we get here, value is an object but not adjustable                                                         // 224
    // at this level.  recurse.                                                                                      // 225
    adjustTypesToJSONValue(value);                                                                                   // 226
  });                                                                                                                // 227
  return obj;                                                                                                        // 228
};                                                                                                                   // 229
                                                                                                                     // 230
// Either return the JSON-compatible version of the argument, or undefined (if                                       // 231
// the item isn't itself replaceable, but maybe some fields in it are)                                               // 232
var toJSONValueHelper = function (item) {                                                                            // 233
  for (var i = 0; i < builtinConverters.length; i++) {                                                               // 234
    var converter = builtinConverters[i];                                                                            // 235
    if (converter.matchObject(item)) {                                                                               // 236
      return converter.toJSONValue(item);                                                                            // 237
    }                                                                                                                // 238
  }                                                                                                                  // 239
  return undefined;                                                                                                  // 240
};                                                                                                                   // 241
                                                                                                                     // 242
/**                                                                                                                  // 243
 * @summary Serialize an EJSON-compatible value into its plain JSON representation.                                  // 244
 * @locus Anywhere                                                                                                   // 245
 * @param {EJSON} val A value to serialize to plain JSON.                                                            // 246
 */                                                                                                                  // 247
EJSON.toJSONValue = function (item) {                                                                                // 248
  var changed = toJSONValueHelper(item);                                                                             // 249
  if (changed !== undefined)                                                                                         // 250
    return changed;                                                                                                  // 251
  if (typeof item === 'object') {                                                                                    // 252
    item = EJSON.clone(item);                                                                                        // 253
    adjustTypesToJSONValue(item);                                                                                    // 254
  }                                                                                                                  // 255
  return item;                                                                                                       // 256
};                                                                                                                   // 257
                                                                                                                     // 258
// for both arrays and objects. Tries its best to just                                                               // 259
// use the object you hand it, but may return something                                                              // 260
// different if the object you hand it itself needs changing.                                                        // 261
//                                                                                                                   // 262
var adjustTypesFromJSONValue =                                                                                       // 263
EJSON._adjustTypesFromJSONValue = function (obj) {                                                                   // 264
  if (obj === null)                                                                                                  // 265
    return null;                                                                                                     // 266
  var maybeChanged = fromJSONValueHelper(obj);                                                                       // 267
  if (maybeChanged !== obj)                                                                                          // 268
    return maybeChanged;                                                                                             // 269
                                                                                                                     // 270
  // Other atoms are unchanged.                                                                                      // 271
  if (typeof obj !== 'object')                                                                                       // 272
    return obj;                                                                                                      // 273
                                                                                                                     // 274
  _.each(obj, function (value, key) {                                                                                // 275
    if (typeof value === 'object') {                                                                                 // 276
      var changed = fromJSONValueHelper(value);                                                                      // 277
      if (value !== changed) {                                                                                       // 278
        obj[key] = changed;                                                                                          // 279
        return;                                                                                                      // 280
      }                                                                                                              // 281
      // if we get here, value is an object but not adjustable                                                       // 282
      // at this level.  recurse.                                                                                    // 283
      adjustTypesFromJSONValue(value);                                                                               // 284
    }                                                                                                                // 285
  });                                                                                                                // 286
  return obj;                                                                                                        // 287
};                                                                                                                   // 288
                                                                                                                     // 289
// Either return the argument changed to have the non-json                                                           // 290
// rep of itself (the Object version) or the argument itself.                                                        // 291
                                                                                                                     // 292
// DOES NOT RECURSE.  For actually getting the fully-changed value, use                                              // 293
// EJSON.fromJSONValue                                                                                               // 294
var fromJSONValueHelper = function (value) {                                                                         // 295
  if (typeof value === 'object' && value !== null) {                                                                 // 296
    if (_.size(value) <= 2                                                                                           // 297
        && _.all(value, function (v, k) {                                                                            // 298
          return typeof k === 'string' && k.substr(0, 1) === '$';                                                    // 299
        })) {                                                                                                        // 300
      for (var i = 0; i < builtinConverters.length; i++) {                                                           // 301
        var converter = builtinConverters[i];                                                                        // 302
        if (converter.matchJSONValue(value)) {                                                                       // 303
          return converter.fromJSONValue(value);                                                                     // 304
        }                                                                                                            // 305
      }                                                                                                              // 306
    }                                                                                                                // 307
  }                                                                                                                  // 308
  return value;                                                                                                      // 309
};                                                                                                                   // 310
                                                                                                                     // 311
/**                                                                                                                  // 312
 * @summary Deserialize an EJSON value from its plain JSON representation.                                           // 313
 * @locus Anywhere                                                                                                   // 314
 * @param {JSONCompatible} val A value to deserialize into EJSON.                                                    // 315
 */                                                                                                                  // 316
EJSON.fromJSONValue = function (item) {                                                                              // 317
  var changed = fromJSONValueHelper(item);                                                                           // 318
  if (changed === item && typeof item === 'object') {                                                                // 319
    item = EJSON.clone(item);                                                                                        // 320
    adjustTypesFromJSONValue(item);                                                                                  // 321
    return item;                                                                                                     // 322
  } else {                                                                                                           // 323
    return changed;                                                                                                  // 324
  }                                                                                                                  // 325
};                                                                                                                   // 326
                                                                                                                     // 327
/**                                                                                                                  // 328
 * @summary Serialize a value to a string.                                                                           // 329
                                                                                                                     // 330
For EJSON values, the serialization fully represents the value. For non-EJSON values, serializes the same way as `JSON.stringify`.
 * @locus Anywhere                                                                                                   // 332
 * @param {EJSON} val A value to stringify.                                                                          // 333
 * @param {Object} [options]                                                                                         // 334
 * @param {Boolean | Integer | String} options.indent Indents objects and arrays for easy readability.  When `true`, indents by 2 spaces; when an integer, indents by that number of spaces; and when a string, uses the string as the indentation pattern.
 * @param {Boolean} options.canonical When `true`, stringifies keys in an object in sorted order.                    // 336
 */                                                                                                                  // 337
EJSON.stringify = function (item, options) {                                                                         // 338
  var json = EJSON.toJSONValue(item);                                                                                // 339
  if (options && (options.canonical || options.indent)) {                                                            // 340
    return EJSON._canonicalStringify(json, options);                                                                 // 341
  } else {                                                                                                           // 342
    return JSON.stringify(json);                                                                                     // 343
  }                                                                                                                  // 344
};                                                                                                                   // 345
                                                                                                                     // 346
/**                                                                                                                  // 347
 * @summary Parse a string into an EJSON value. Throws an error if the string is not valid EJSON.                    // 348
 * @locus Anywhere                                                                                                   // 349
 * @param {String} str A string to parse into an EJSON value.                                                        // 350
 */                                                                                                                  // 351
EJSON.parse = function (item) {                                                                                      // 352
  if (typeof item !== 'string')                                                                                      // 353
    throw new Error("EJSON.parse argument should be a string");                                                      // 354
  return EJSON.fromJSONValue(JSON.parse(item));                                                                      // 355
};                                                                                                                   // 356
                                                                                                                     // 357
/**                                                                                                                  // 358
 * @summary Returns true if `x` is a buffer of binary data, as returned from [`EJSON.newBinary`](#ejson_new_binary).
 * @param {Object} x The variable to check.                                                                          // 360
 * @locus Anywhere                                                                                                   // 361
 */                                                                                                                  // 362
EJSON.isBinary = function (obj) {                                                                                    // 363
  return !!((typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array) ||                                      // 364
    (obj && obj.$Uint8ArrayPolyfill));                                                                               // 365
};                                                                                                                   // 366
                                                                                                                     // 367
/**                                                                                                                  // 368
 * @summary Return true if `a` and `b` are equal to each other.  Return false otherwise.  Uses the `equals` method on `a` if present, otherwise performs a deep comparison.
 * @locus Anywhere                                                                                                   // 370
 * @param {EJSON} a                                                                                                  // 371
 * @param {EJSON} b                                                                                                  // 372
 * @param {Object} [options]                                                                                         // 373
 * @param {Boolean} options.keyOrderSensitive Compare in key sensitive order, if supported by the JavaScript implementation.  For example, `{a: 1, b: 2}` is equal to `{b: 2, a: 1}` only when `keyOrderSensitive` is `false`.  The default is `false`.
 */                                                                                                                  // 375
EJSON.equals = function (a, b, options) {                                                                            // 376
  var i;                                                                                                             // 377
  var keyOrderSensitive = !!(options && options.keyOrderSensitive);                                                  // 378
  if (a === b)                                                                                                       // 379
    return true;                                                                                                     // 380
  if (_.isNaN(a) && _.isNaN(b))                                                                                      // 381
    return true; // This differs from the IEEE spec for NaN equality, b/c we don't want                              // 382
                 // anything ever with a NaN to be poisoned from becoming equal to anything.                         // 383
  if (!a || !b) // if either one is falsy, they'd have to be === to be equal                                         // 384
    return false;                                                                                                    // 385
  if (!(typeof a === 'object' && typeof b === 'object'))                                                             // 386
    return false;                                                                                                    // 387
  if (a instanceof Date && b instanceof Date)                                                                        // 388
    return a.valueOf() === b.valueOf();                                                                              // 389
  if (EJSON.isBinary(a) && EJSON.isBinary(b)) {                                                                      // 390
    if (a.length !== b.length)                                                                                       // 391
      return false;                                                                                                  // 392
    for (i = 0; i < a.length; i++) {                                                                                 // 393
      if (a[i] !== b[i])                                                                                             // 394
        return false;                                                                                                // 395
    }                                                                                                                // 396
    return true;                                                                                                     // 397
  }                                                                                                                  // 398
  if (typeof (a.equals) === 'function')                                                                              // 399
    return a.equals(b, options);                                                                                     // 400
  if (typeof (b.equals) === 'function')                                                                              // 401
    return b.equals(a, options);                                                                                     // 402
  if (a instanceof Array) {                                                                                          // 403
    if (!(b instanceof Array))                                                                                       // 404
      return false;                                                                                                  // 405
    if (a.length !== b.length)                                                                                       // 406
      return false;                                                                                                  // 407
    for (i = 0; i < a.length; i++) {                                                                                 // 408
      if (!EJSON.equals(a[i], b[i], options))                                                                        // 409
        return false;                                                                                                // 410
    }                                                                                                                // 411
    return true;                                                                                                     // 412
  }                                                                                                                  // 413
  // fallback for custom types that don't implement their own equals                                                 // 414
  switch (EJSON._isCustomType(a) + EJSON._isCustomType(b)) {                                                         // 415
    case 1: return false;                                                                                            // 416
    case 2: return EJSON.equals(EJSON.toJSONValue(a), EJSON.toJSONValue(b));                                         // 417
  }                                                                                                                  // 418
  // fall back to structural equality of objects                                                                     // 419
  var ret;                                                                                                           // 420
  if (keyOrderSensitive) {                                                                                           // 421
    var bKeys = [];                                                                                                  // 422
    _.each(b, function (val, x) {                                                                                    // 423
        bKeys.push(x);                                                                                               // 424
    });                                                                                                              // 425
    i = 0;                                                                                                           // 426
    ret = _.all(a, function (val, x) {                                                                               // 427
      if (i >= bKeys.length) {                                                                                       // 428
        return false;                                                                                                // 429
      }                                                                                                              // 430
      if (x !== bKeys[i]) {                                                                                          // 431
        return false;                                                                                                // 432
      }                                                                                                              // 433
      if (!EJSON.equals(val, b[bKeys[i]], options)) {                                                                // 434
        return false;                                                                                                // 435
      }                                                                                                              // 436
      i++;                                                                                                           // 437
      return true;                                                                                                   // 438
    });                                                                                                              // 439
    return ret && i === bKeys.length;                                                                                // 440
  } else {                                                                                                           // 441
    i = 0;                                                                                                           // 442
    ret = _.all(a, function (val, key) {                                                                             // 443
      if (!_.has(b, key)) {                                                                                          // 444
        return false;                                                                                                // 445
      }                                                                                                              // 446
      if (!EJSON.equals(val, b[key], options)) {                                                                     // 447
        return false;                                                                                                // 448
      }                                                                                                              // 449
      i++;                                                                                                           // 450
      return true;                                                                                                   // 451
    });                                                                                                              // 452
    return ret && _.size(b) === i;                                                                                   // 453
  }                                                                                                                  // 454
};                                                                                                                   // 455
                                                                                                                     // 456
/**                                                                                                                  // 457
 * @summary Return a deep copy of `val`.                                                                             // 458
 * @locus Anywhere                                                                                                   // 459
 * @param {EJSON} val A value to copy.                                                                               // 460
 */                                                                                                                  // 461
EJSON.clone = function (v) {                                                                                         // 462
  var ret;                                                                                                           // 463
  if (typeof v !== "object")                                                                                         // 464
    return v;                                                                                                        // 465
  if (v === null)                                                                                                    // 466
    return null; // null has typeof "object"                                                                         // 467
  if (v instanceof Date)                                                                                             // 468
    return new Date(v.getTime());                                                                                    // 469
  // RegExps are not really EJSON elements (eg we don't define a serialization                                       // 470
  // for them), but they're immutable anyway, so we can support them in clone.                                       // 471
  if (v instanceof RegExp)                                                                                           // 472
    return v;                                                                                                        // 473
  if (EJSON.isBinary(v)) {                                                                                           // 474
    ret = EJSON.newBinary(v.length);                                                                                 // 475
    for (var i = 0; i < v.length; i++) {                                                                             // 476
      ret[i] = v[i];                                                                                                 // 477
    }                                                                                                                // 478
    return ret;                                                                                                      // 479
  }                                                                                                                  // 480
  // XXX: Use something better than underscore's isArray                                                             // 481
  if (_.isArray(v) || _.isArguments(v)) {                                                                            // 482
    // For some reason, _.map doesn't work in this context on Opera (weird test                                      // 483
    // failures).                                                                                                    // 484
    ret = [];                                                                                                        // 485
    for (i = 0; i < v.length; i++)                                                                                   // 486
      ret[i] = EJSON.clone(v[i]);                                                                                    // 487
    return ret;                                                                                                      // 488
  }                                                                                                                  // 489
  // handle general user-defined typed Objects if they have a clone method                                           // 490
  if (typeof v.clone === 'function') {                                                                               // 491
    return v.clone();                                                                                                // 492
  }                                                                                                                  // 493
  // handle other custom types                                                                                       // 494
  if (EJSON._isCustomType(v)) {                                                                                      // 495
    return EJSON.fromJSONValue(EJSON.clone(EJSON.toJSONValue(v)), true);                                             // 496
  }                                                                                                                  // 497
  // handle other objects                                                                                            // 498
  ret = {};                                                                                                          // 499
  _.each(v, function (value, key) {                                                                                  // 500
    ret[key] = EJSON.clone(value);                                                                                   // 501
  });                                                                                                                // 502
  return ret;                                                                                                        // 503
};                                                                                                                   // 504
                                                                                                                     // 505
/**                                                                                                                  // 506
 * @summary Allocate a new buffer of binary data that EJSON can serialize.                                           // 507
 * @locus Anywhere                                                                                                   // 508
 * @param {Number} size The number of bytes of binary data to allocate.                                              // 509
 */                                                                                                                  // 510
// EJSON.newBinary is the public documented API for this functionality,                                              // 511
// but the implementation is in the 'base64' package to avoid                                                        // 512
// introducing a circular dependency. (If the implementation were here,                                              // 513
// then 'base64' would have to use EJSON.newBinary, and 'ejson' would                                                // 514
// also have to use 'base64'.)                                                                                       // 515
EJSON.newBinary = Base64.newBinary;                                                                                  // 516
                                                                                                                     // 517
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// packages/ejson/stringify.js                                                                                       //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
// Based on json2.js from https://github.com/douglascrockford/JSON-js                                                // 1
//                                                                                                                   // 2
//    json2.js                                                                                                       // 3
//    2012-10-08                                                                                                     // 4
//                                                                                                                   // 5
//    Public Domain.                                                                                                 // 6
//                                                                                                                   // 7
//    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.                                                        // 8
                                                                                                                     // 9
function quote(string) {                                                                                             // 10
  return JSON.stringify(string);                                                                                     // 11
}                                                                                                                    // 12
                                                                                                                     // 13
var str = function (key, holder, singleIndent, outerIndent, canonical) {                                             // 14
                                                                                                                     // 15
  // Produce a string from holder[key].                                                                              // 16
                                                                                                                     // 17
  var i;          // The loop counter.                                                                               // 18
  var k;          // The member key.                                                                                 // 19
  var v;          // The member value.                                                                               // 20
  var length;                                                                                                        // 21
  var innerIndent = outerIndent;                                                                                     // 22
  var partial;                                                                                                       // 23
  var value = holder[key];                                                                                           // 24
                                                                                                                     // 25
  // What happens next depends on the value's type.                                                                  // 26
                                                                                                                     // 27
  switch (typeof value) {                                                                                            // 28
  case 'string':                                                                                                     // 29
    return quote(value);                                                                                             // 30
  case 'number':                                                                                                     // 31
    // JSON numbers must be finite. Encode non-finite numbers as null.                                               // 32
    return isFinite(value) ? String(value) : 'null';                                                                 // 33
  case 'boolean':                                                                                                    // 34
    return String(value);                                                                                            // 35
  // If the type is 'object', we might be dealing with an object or an array or                                      // 36
  // null.                                                                                                           // 37
  case 'object':                                                                                                     // 38
    // Due to a specification blunder in ECMAScript, typeof null is 'object',                                        // 39
    // so watch out for that case.                                                                                   // 40
    if (!value) {                                                                                                    // 41
      return 'null';                                                                                                 // 42
    }                                                                                                                // 43
    // Make an array to hold the partial results of stringifying this object value.                                  // 44
    innerIndent = outerIndent + singleIndent;                                                                        // 45
    partial = [];                                                                                                    // 46
                                                                                                                     // 47
    // Is the value an array?                                                                                        // 48
    if (_.isArray(value) || _.isArguments(value)) {                                                                  // 49
                                                                                                                     // 50
      // The value is an array. Stringify every element. Use null as a placeholder                                   // 51
      // for non-JSON values.                                                                                        // 52
                                                                                                                     // 53
      length = value.length;                                                                                         // 54
      for (i = 0; i < length; i += 1) {                                                                              // 55
        partial[i] = str(i, value, singleIndent, innerIndent, canonical) || 'null';                                  // 56
      }                                                                                                              // 57
                                                                                                                     // 58
      // Join all of the elements together, separated with commas, and wrap them in                                  // 59
      // brackets.                                                                                                   // 60
                                                                                                                     // 61
      if (partial.length === 0) {                                                                                    // 62
        v = '[]';                                                                                                    // 63
      } else if (innerIndent) {                                                                                      // 64
        v = '[\n' + innerIndent + partial.join(',\n' + innerIndent) + '\n' + outerIndent + ']';                      // 65
      } else {                                                                                                       // 66
        v = '[' + partial.join(',') + ']';                                                                           // 67
      }                                                                                                              // 68
      return v;                                                                                                      // 69
    }                                                                                                                // 70
                                                                                                                     // 71
                                                                                                                     // 72
    // Iterate through all of the keys in the object.                                                                // 73
    var keys = _.keys(value);                                                                                        // 74
    if (canonical)                                                                                                   // 75
      keys = keys.sort();                                                                                            // 76
    _.each(keys, function (k) {                                                                                      // 77
      v = str(k, value, singleIndent, innerIndent, canonical);                                                       // 78
      if (v) {                                                                                                       // 79
        partial.push(quote(k) + (innerIndent ? ': ' : ':') + v);                                                     // 80
      }                                                                                                              // 81
    });                                                                                                              // 82
                                                                                                                     // 83
                                                                                                                     // 84
    // Join all of the member texts together, separated with commas,                                                 // 85
    // and wrap them in braces.                                                                                      // 86
                                                                                                                     // 87
    if (partial.length === 0) {                                                                                      // 88
      v = '{}';                                                                                                      // 89
    } else if (innerIndent) {                                                                                        // 90
      v = '{\n' + innerIndent + partial.join(',\n' + innerIndent) + '\n' + outerIndent + '}';                        // 91
    } else {                                                                                                         // 92
      v = '{' + partial.join(',') + '}';                                                                             // 93
    }                                                                                                                // 94
    return v;                                                                                                        // 95
  }                                                                                                                  // 96
}                                                                                                                    // 97
                                                                                                                     // 98
// If the JSON object does not yet have a stringify method, give it one.                                             // 99
                                                                                                                     // 100
EJSON._canonicalStringify = function (value, options) {                                                              // 101
  // Make a fake root object containing our value under the key of ''.                                               // 102
  // Return the result of stringifying the value.                                                                    // 103
  options = _.extend({                                                                                               // 104
    indent: "",                                                                                                      // 105
    canonical: false                                                                                                 // 106
  }, options);                                                                                                       // 107
  if (options.indent === true) {                                                                                     // 108
    options.indent = "  ";                                                                                           // 109
  } else if (typeof options.indent === 'number') {                                                                   // 110
    var newIndent = "";                                                                                              // 111
    for (var i = 0; i < options.indent; i++) {                                                                       // 112
      newIndent += ' ';                                                                                              // 113
    }                                                                                                                // 114
    options.indent = newIndent;                                                                                      // 115
  }                                                                                                                  // 116
  return str('', {'': value}, options.indent, "", options.canonical);                                                // 117
};                                                                                                                   // 118
                                                                                                                     // 119
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.ejson = {
  EJSON: EJSON,
  EJSONTest: EJSONTest
};

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var _ = Package.underscore._;
var EJSON = Package.ejson.EJSON;

/* Package-scope variables */
var check, Match;

(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                    //
// packages/check/match.js                                                                            //
//                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                      //
// XXX docs                                                                                           // 1
                                                                                                      // 2
// Things we explicitly do NOT support:                                                               // 3
//    - heterogenous arrays                                                                           // 4
                                                                                                      // 5
var currentArgumentChecker = new Meteor.EnvironmentVariable;                                          // 6
                                                                                                      // 7
/**                                                                                                   // 8
 * @summary Check that a value matches a [pattern](#matchpatterns).                                   // 9
 * If the value does not match the pattern, throw a `Match.Error`.                                    // 10
 *                                                                                                    // 11
 * Particularly useful to assert that arguments to a function have the right                          // 12
 * types and structure.                                                                               // 13
 * @locus Anywhere                                                                                    // 14
 * @param {Any} value The value to check                                                              // 15
 * @param {MatchPattern} pattern The pattern to match                                                 // 16
 * `value` against                                                                                    // 17
 */                                                                                                   // 18
check = function (value, pattern) {                                                                   // 19
  // Record that check got called, if somebody cared.                                                 // 20
  //                                                                                                  // 21
  // We use getOrNullIfOutsideFiber so that it's OK to call check()                                   // 22
  // from non-Fiber server contexts; the downside is that if you forget to                            // 23
  // bindEnvironment on some random callback in your method/publisher,                                // 24
  // it might not find the argumentChecker and you'll get an error about                              // 25
  // not checking an argument that it looks like you're checking (instead                             // 26
  // of just getting a "Node code must run in a Fiber" error).                                        // 27
  var argChecker = currentArgumentChecker.getOrNullIfOutsideFiber();                                  // 28
  if (argChecker)                                                                                     // 29
    argChecker.checking(value);                                                                       // 30
  var result = testSubtree(value, pattern);                                                           // 31
  if (result) {                                                                                       // 32
    var err = new Match.Error(result.message);                                                        // 33
    if (result.path) {                                                                                // 34
      err.message += " in field " + result.path;                                                      // 35
      err.path = result.path;                                                                         // 36
    }                                                                                                 // 37
    throw err;                                                                                        // 38
  }                                                                                                   // 39
};                                                                                                    // 40
                                                                                                      // 41
/**                                                                                                   // 42
 * @namespace Match                                                                                   // 43
 * @summary The namespace for all Match types and methods.                                            // 44
 */                                                                                                   // 45
Match = {                                                                                             // 46
  Optional: function (pattern) {                                                                      // 47
    return new Optional(pattern);                                                                     // 48
  },                                                                                                  // 49
  OneOf: function (/*arguments*/) {                                                                   // 50
    return new OneOf(_.toArray(arguments));                                                           // 51
  },                                                                                                  // 52
  Any: ['__any__'],                                                                                   // 53
  Where: function (condition) {                                                                       // 54
    return new Where(condition);                                                                      // 55
  },                                                                                                  // 56
  ObjectIncluding: function (pattern) {                                                               // 57
    return new ObjectIncluding(pattern);                                                              // 58
  },                                                                                                  // 59
  ObjectWithValues: function (pattern) {                                                              // 60
    return new ObjectWithValues(pattern);                                                             // 61
  },                                                                                                  // 62
  // Matches only signed 32-bit integers                                                              // 63
  Integer: ['__integer__'],                                                                           // 64
                                                                                                      // 65
  // XXX matchers should know how to describe themselves for errors                                   // 66
  Error: Meteor.makeErrorType("Match.Error", function (msg) {                                         // 67
    this.message = "Match error: " + msg;                                                             // 68
    // The path of the value that failed to match. Initially empty, this gets                         // 69
    // populated by catching and rethrowing the exception as it goes back up the                      // 70
    // stack.                                                                                         // 71
    // E.g.: "vals[3].entity.created"                                                                 // 72
    this.path = "";                                                                                   // 73
    // If this gets sent over DDP, don't give full internal details but at least                      // 74
    // provide something better than 500 Internal server error.                                       // 75
    this.sanitizedError = new Meteor.Error(400, "Match failed");                                      // 76
  }),                                                                                                 // 77
                                                                                                      // 78
  // Tests to see if value matches pattern. Unlike check, it merely returns true                      // 79
  // or false (unless an error other than Match.Error was thrown). It does not                        // 80
  // interact with _failIfArgumentsAreNotAllChecked.                                                  // 81
  // XXX maybe also implement a Match.match which returns more information about                      // 82
  //     failures but without using exception handling or doing what check()                          // 83
  //     does with _failIfArgumentsAreNotAllChecked and Meteor.Error conversion                       // 84
                                                                                                      // 85
  /**                                                                                                 // 86
   * @summary Returns true if the value matches the pattern.                                          // 87
   * @locus Anywhere                                                                                  // 88
   * @param {Any} value The value to check                                                            // 89
   * @param {MatchPattern} pattern The pattern to match `value` against                               // 90
   */                                                                                                 // 91
  test: function (value, pattern) {                                                                   // 92
    return !testSubtree(value, pattern);                                                              // 93
  },                                                                                                  // 94
                                                                                                      // 95
  // Runs `f.apply(context, args)`. If check() is not called on every element of                      // 96
  // `args` (either directly or in the first level of an array), throws an error                      // 97
  // (using `description` in the message).                                                            // 98
  //                                                                                                  // 99
  _failIfArgumentsAreNotAllChecked: function (f, context, args, description) {                        // 100
    var argChecker = new ArgumentChecker(args, description);                                          // 101
    var result = currentArgumentChecker.withValue(argChecker, function () {                           // 102
      return f.apply(context, args);                                                                  // 103
    });                                                                                               // 104
    // If f didn't itself throw, make sure it checked all of its arguments.                           // 105
    argChecker.throwUnlessAllArgumentsHaveBeenChecked();                                              // 106
    return result;                                                                                    // 107
  }                                                                                                   // 108
};                                                                                                    // 109
                                                                                                      // 110
var Optional = function (pattern) {                                                                   // 111
  this.pattern = pattern;                                                                             // 112
};                                                                                                    // 113
                                                                                                      // 114
var OneOf = function (choices) {                                                                      // 115
  if (_.isEmpty(choices))                                                                             // 116
    throw new Error("Must provide at least one choice to Match.OneOf");                               // 117
  this.choices = choices;                                                                             // 118
};                                                                                                    // 119
                                                                                                      // 120
var Where = function (condition) {                                                                    // 121
  this.condition = condition;                                                                         // 122
};                                                                                                    // 123
                                                                                                      // 124
var ObjectIncluding = function (pattern) {                                                            // 125
  this.pattern = pattern;                                                                             // 126
};                                                                                                    // 127
                                                                                                      // 128
var ObjectWithValues = function (pattern) {                                                           // 129
  this.pattern = pattern;                                                                             // 130
};                                                                                                    // 131
                                                                                                      // 132
var typeofChecks = [                                                                                  // 133
  [String, "string"],                                                                                 // 134
  [Number, "number"],                                                                                 // 135
  [Boolean, "boolean"],                                                                               // 136
  // While we don't allow undefined in EJSON, this is good for optional                               // 137
  // arguments with OneOf.                                                                            // 138
  [undefined, "undefined"]                                                                            // 139
];                                                                                                    // 140
                                                                                                      // 141
// Return `false` if it matches. Otherwise, return an object with a `message` and a `path` field.     // 142
var testSubtree = function (value, pattern) {                                                         // 143
  // Match anything!                                                                                  // 144
  if (pattern === Match.Any)                                                                          // 145
    return false;                                                                                     // 146
                                                                                                      // 147
  // Basic atomic types.                                                                              // 148
  // Do not match boxed objects (e.g. String, Boolean)                                                // 149
  for (var i = 0; i < typeofChecks.length; ++i) {                                                     // 150
    if (pattern === typeofChecks[i][0]) {                                                             // 151
      if (typeof value === typeofChecks[i][1])                                                        // 152
        return false;                                                                                 // 153
      return {                                                                                        // 154
        message: "Expected " + typeofChecks[i][1] + ", got " + typeof value,                          // 155
        path: ""                                                                                      // 156
      };                                                                                              // 157
    }                                                                                                 // 158
  }                                                                                                   // 159
  if (pattern === null) {                                                                             // 160
    if (value === null)                                                                               // 161
      return false;                                                                                   // 162
    return {                                                                                          // 163
      message: "Expected null, got " + EJSON.stringify(value),                                        // 164
      path: ""                                                                                        // 165
    };                                                                                                // 166
  }                                                                                                   // 167
                                                                                                      // 168
  // Strings, numbers, and booleans match literally. Goes well with Match.OneOf.                      // 169
  if (typeof pattern === "string" || typeof pattern === "number" || typeof pattern === "boolean") {   // 170
    if (value === pattern)                                                                            // 171
      return false;                                                                                   // 172
    return {                                                                                          // 173
      message: "Expected " + pattern + ", got " + EJSON.stringify(value),                             // 174
      path: ""                                                                                        // 175
    };                                                                                                // 176
  }                                                                                                   // 177
                                                                                                      // 178
  // Match.Integer is special type encoded with array                                                 // 179
  if (pattern === Match.Integer) {                                                                    // 180
    // There is no consistent and reliable way to check if variable is a 64-bit                       // 181
    // integer. One of the popular solutions is to get reminder of division by 1                      // 182
    // but this method fails on really large floats with big precision.                               // 183
    // E.g.: 1.348192308491824e+23 % 1 === 0 in V8                                                    // 184
    // Bitwise operators work consistantly but always cast variable to 32-bit                         // 185
    // signed integer according to JavaScript specs.                                                  // 186
    if (typeof value === "number" && (value | 0) === value)                                           // 187
      return false;                                                                                   // 188
    return {                                                                                          // 189
      message: "Expected Integer, got " + (value instanceof Object ? EJSON.stringify(value) : value),
      path: ""                                                                                        // 191
    };                                                                                                // 192
  }                                                                                                   // 193
                                                                                                      // 194
  // "Object" is shorthand for Match.ObjectIncluding({});                                             // 195
  if (pattern === Object)                                                                             // 196
    pattern = Match.ObjectIncluding({});                                                              // 197
                                                                                                      // 198
  // Array (checked AFTER Any, which is implemented as an Array).                                     // 199
  if (pattern instanceof Array) {                                                                     // 200
    if (pattern.length !== 1) {                                                                       // 201
      return {                                                                                        // 202
        message: "Bad pattern: arrays must have one type element" + EJSON.stringify(pattern),         // 203
        path: ""                                                                                      // 204
      };                                                                                              // 205
    }                                                                                                 // 206
    if (!_.isArray(value) && !_.isArguments(value)) {                                                 // 207
      return {                                                                                        // 208
        message: "Expected array, got " + EJSON.stringify(value),                                     // 209
        path: ""                                                                                      // 210
      };                                                                                              // 211
    }                                                                                                 // 212
                                                                                                      // 213
    for (var i = 0, length = value.length; i < length; i++) {                                         // 214
      var result = testSubtree(value[i], pattern[0]);                                                 // 215
      if (result) {                                                                                   // 216
        result.path = _prependPath(i, result.path);                                                   // 217
        return result;                                                                                // 218
      }                                                                                               // 219
    }                                                                                                 // 220
    return false;                                                                                     // 221
  }                                                                                                   // 222
                                                                                                      // 223
  // Arbitrary validation checks. The condition can return false or throw a                           // 224
  // Match.Error (ie, it can internally use check()) to fail.                                         // 225
  if (pattern instanceof Where) {                                                                     // 226
    var result;                                                                                       // 227
    try {                                                                                             // 228
      result = pattern.condition(value);                                                              // 229
    } catch (err) {                                                                                   // 230
      if (!(err instanceof Match.Error))                                                              // 231
        throw err;                                                                                    // 232
      return {                                                                                        // 233
        message: err.message,                                                                         // 234
        path: err.path                                                                                // 235
      };                                                                                              // 236
    }                                                                                                 // 237
    if (pattern.condition(value))                                                                     // 238
      return false;                                                                                   // 239
    // XXX this error is terrible                                                                     // 240
    return {                                                                                          // 241
      message: "Failed Match.Where validation",                                                       // 242
      path: ""                                                                                        // 243
    };                                                                                                // 244
  }                                                                                                   // 245
                                                                                                      // 246
                                                                                                      // 247
  if (pattern instanceof Optional)                                                                    // 248
    pattern = Match.OneOf(undefined, pattern.pattern);                                                // 249
                                                                                                      // 250
  if (pattern instanceof OneOf) {                                                                     // 251
    for (var i = 0; i < pattern.choices.length; ++i) {                                                // 252
      var result = testSubtree(value, pattern.choices[i]);                                            // 253
      if (!result) {                                                                                  // 254
        // No error? Yay, return.                                                                     // 255
        return false;                                                                                 // 256
      }                                                                                               // 257
      // Match errors just mean try another choice.                                                   // 258
    }                                                                                                 // 259
    // XXX this error is terrible                                                                     // 260
    return {                                                                                          // 261
      message: "Failed Match.OneOf or Match.Optional validation",                                     // 262
      path: ""                                                                                        // 263
    };                                                                                                // 264
  }                                                                                                   // 265
                                                                                                      // 266
  // A function that isn't something we special-case is assumed to be a                               // 267
  // constructor.                                                                                     // 268
  if (pattern instanceof Function) {                                                                  // 269
    if (value instanceof pattern)                                                                     // 270
      return false;                                                                                   // 271
    return {                                                                                          // 272
      message: "Expected " + (pattern.name ||"particular constructor"),                               // 273
      path: ""                                                                                        // 274
    };                                                                                                // 275
  }                                                                                                   // 276
                                                                                                      // 277
  var unknownKeysAllowed = false;                                                                     // 278
  var unknownKeyPattern;                                                                              // 279
  if (pattern instanceof ObjectIncluding) {                                                           // 280
    unknownKeysAllowed = true;                                                                        // 281
    pattern = pattern.pattern;                                                                        // 282
  }                                                                                                   // 283
  if (pattern instanceof ObjectWithValues) {                                                          // 284
    unknownKeysAllowed = true;                                                                        // 285
    unknownKeyPattern = [pattern.pattern];                                                            // 286
    pattern = {};  // no required keys                                                                // 287
  }                                                                                                   // 288
                                                                                                      // 289
  if (typeof pattern !== "object") {                                                                  // 290
    return {                                                                                          // 291
      message: "Bad pattern: unknown pattern type",                                                   // 292
      path: ""                                                                                        // 293
    };                                                                                                // 294
  }                                                                                                   // 295
                                                                                                      // 296
  // An object, with required and optional keys. Note that this does NOT do                           // 297
  // structural matches against objects of special types that happen to match                         // 298
  // the pattern: this really needs to be a plain old {Object}!                                       // 299
  if (typeof value !== 'object') {                                                                    // 300
    return {                                                                                          // 301
      message: "Expected object, got " + typeof value,                                                // 302
      path: ""                                                                                        // 303
    };                                                                                                // 304
  }                                                                                                   // 305
  if (value === null) {                                                                               // 306
    return {                                                                                          // 307
      message: "Expected object, got null",                                                           // 308
      path: ""                                                                                        // 309
    };                                                                                                // 310
  }                                                                                                   // 311
  if (value.constructor !== Object) {                                                                 // 312
    return {                                                                                          // 313
      message: "Expected plain object",                                                               // 314
      path: ""                                                                                        // 315
    };                                                                                                // 316
  }                                                                                                   // 317
                                                                                                      // 318
  var requiredPatterns = {};                                                                          // 319
  var optionalPatterns = {};                                                                          // 320
  _.each(pattern, function (subPattern, key) {                                                        // 321
    if (subPattern instanceof Optional)                                                               // 322
      optionalPatterns[key] = subPattern.pattern;                                                     // 323
    else                                                                                              // 324
      requiredPatterns[key] = subPattern;                                                             // 325
  });                                                                                                 // 326
                                                                                                      // 327
  for (var keys = _.keys(value), i = 0, length = keys.length; i < length; i++) {                      // 328
    var key = keys[i];                                                                                // 329
    var subValue = value[key];                                                                        // 330
    if (_.has(requiredPatterns, key)) {                                                               // 331
      var result = testSubtree(subValue, requiredPatterns[key]);                                      // 332
      if (result) {                                                                                   // 333
        result.path = _prependPath(key, result.path);                                                 // 334
        return result;                                                                                // 335
      }                                                                                               // 336
      delete requiredPatterns[key];                                                                   // 337
    } else if (_.has(optionalPatterns, key)) {                                                        // 338
      var result = testSubtree(subValue, optionalPatterns[key]);                                      // 339
      if (result) {                                                                                   // 340
        result.path = _prependPath(key, result.path);                                                 // 341
        return result;                                                                                // 342
      }                                                                                               // 343
    } else {                                                                                          // 344
      if (!unknownKeysAllowed) {                                                                      // 345
        return {                                                                                      // 346
          message: "Unknown key",                                                                     // 347
          path: key                                                                                   // 348
        };                                                                                            // 349
      }                                                                                               // 350
      if (unknownKeyPattern) {                                                                        // 351
        var result = testSubtree(subValue, unknownKeyPattern[0]);                                     // 352
        if (result) {                                                                                 // 353
          result.path = _prependPath(key, result.path);                                               // 354
          return result;                                                                              // 355
        }                                                                                             // 356
      }                                                                                               // 357
    }                                                                                                 // 358
  }                                                                                                   // 359
                                                                                                      // 360
  var keys = _.keys(requiredPatterns);                                                                // 361
  if (keys.length) {                                                                                  // 362
    return {                                                                                          // 363
      message: "Missing key '" + keys[0] + "'",                                                       // 364
      path: ""                                                                                        // 365
    };                                                                                                // 366
  }                                                                                                   // 367
};                                                                                                    // 368
                                                                                                      // 369
var ArgumentChecker = function (args, description) {                                                  // 370
  var self = this;                                                                                    // 371
  // Make a SHALLOW copy of the arguments. (We'll be doing identity checks                            // 372
  // against its contents.)                                                                           // 373
  self.args = _.clone(args);                                                                          // 374
  // Since the common case will be to check arguments in order, and we splice                         // 375
  // out arguments when we check them, make it so we splice out from the end                          // 376
  // rather than the beginning.                                                                       // 377
  self.args.reverse();                                                                                // 378
  self.description = description;                                                                     // 379
};                                                                                                    // 380
                                                                                                      // 381
_.extend(ArgumentChecker.prototype, {                                                                 // 382
  checking: function (value) {                                                                        // 383
    var self = this;                                                                                  // 384
    if (self._checkingOneValue(value))                                                                // 385
      return;                                                                                         // 386
    // Allow check(arguments, [String]) or check(arguments.slice(1), [String])                        // 387
    // or check([foo, bar], [String]) to count... but only if value wasn't                            // 388
    // itself an argument.                                                                            // 389
    if (_.isArray(value) || _.isArguments(value)) {                                                   // 390
      _.each(value, _.bind(self._checkingOneValue, self));                                            // 391
    }                                                                                                 // 392
  },                                                                                                  // 393
  _checkingOneValue: function (value) {                                                               // 394
    var self = this;                                                                                  // 395
    for (var i = 0; i < self.args.length; ++i) {                                                      // 396
      // Is this value one of the arguments? (This can have a false positive if                       // 397
      // the argument is an interned primitive, but it's still a good enough                          // 398
      // check.)                                                                                      // 399
      // (NaN is not === to itself, so we have to check specially.)                                   // 400
      if (value === self.args[i] || (_.isNaN(value) && _.isNaN(self.args[i]))) {                      // 401
        self.args.splice(i, 1);                                                                       // 402
        return true;                                                                                  // 403
      }                                                                                               // 404
    }                                                                                                 // 405
    return false;                                                                                     // 406
  },                                                                                                  // 407
  throwUnlessAllArgumentsHaveBeenChecked: function () {                                               // 408
    var self = this;                                                                                  // 409
    if (!_.isEmpty(self.args))                                                                        // 410
      throw new Error("Did not check() all arguments during " +                                       // 411
                      self.description);                                                              // 412
  }                                                                                                   // 413
});                                                                                                   // 414
                                                                                                      // 415
var _jsKeywords = ["do", "if", "in", "for", "let", "new", "try", "var", "case",                       // 416
  "else", "enum", "eval", "false", "null", "this", "true", "void", "with",                            // 417
  "break", "catch", "class", "const", "super", "throw", "while", "yield",                             // 418
  "delete", "export", "import", "public", "return", "static", "switch",                               // 419
  "typeof", "default", "extends", "finally", "package", "private", "continue",                        // 420
  "debugger", "function", "arguments", "interface", "protected", "implements",                        // 421
  "instanceof"];                                                                                      // 422
                                                                                                      // 423
// Assumes the base of path is already escaped properly                                               // 424
// returns key + base                                                                                 // 425
var _prependPath = function (key, base) {                                                             // 426
  if ((typeof key) === "number" || key.match(/^[0-9]+$/))                                             // 427
    key = "[" + key + "]";                                                                            // 428
  else if (!key.match(/^[a-z_$][0-9a-z_$]*$/i) || _.contains(_jsKeywords, key))                       // 429
    key = JSON.stringify([key]);                                                                      // 430
                                                                                                      // 431
  if (base && base[0] !== "[")                                                                        // 432
    return key + '.' + base;                                                                          // 433
  return key + base;                                                                                  // 434
};                                                                                                    // 435
                                                                                                      // 436
                                                                                                      // 437
////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.check = {
  check: check,
  Match: Match
};

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var _ = Package.underscore._;
var ECMAScript = Package.ecmascript.ECMAScript;
var babelHelpers = Package['babel-runtime'].babelHelpers;
var Symbol = Package['ecmascript-runtime'].Symbol;
var Map = Package['ecmascript-runtime'].Map;
var Set = Package['ecmascript-runtime'].Set;
var Promise = Package.promise.Promise;

/* Package-scope variables */
var Random;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/random/random.js                                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// We use cryptographically strong PRNGs (crypto.getRandomBytes() on the server,                                       //
// window.crypto.getRandomValues() in the browser) when available. If these                                            //
// PRNGs fail, we fall back to the Alea PRNG, which is not cryptographically                                           //
// strong, and we seed it with various sources such as the date, Math.random,                                          //
// and window size on the client.  When using crypto.getRandomValues(), our                                            //
// primitive is hexString(), from which we construct fraction(). When using                                            //
// window.crypto.getRandomValues() or alea, the primitive is fraction and we use                                       //
// that to construct hex string.                                                                                       //
                                                                                                                       //
if (Meteor.isServer) var nodeCrypto = Npm.require('crypto');                                                           // 10
                                                                                                                       //
// see http://baagoe.org/en/wiki/Better_random_numbers_for_javascript                                                  //
// for a full discussion and Alea implementation.                                                                      //
var Alea = function () {                                                                                               // 15
  function Mash() {                                                                                                    // 16
    var n = 0xefc8249d;                                                                                                // 17
                                                                                                                       //
    var mash = function (data) {                                                                                       // 19
      data = data.toString();                                                                                          // 20
      for (var i = 0; i < data.length; i++) {                                                                          // 21
        n += data.charCodeAt(i);                                                                                       // 22
        var h = 0.02519603282416938 * n;                                                                               // 23
        n = h >>> 0;                                                                                                   // 24
        h -= n;                                                                                                        // 25
        h *= n;                                                                                                        // 26
        n = h >>> 0;                                                                                                   // 27
        h -= n;                                                                                                        // 28
        n += h * 0x100000000; // 2^32                                                                                  // 29
      }                                                                                                                //
      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32                                                              // 31
    };                                                                                                                 //
                                                                                                                       //
    mash.version = 'Mash 0.9';                                                                                         // 34
    return mash;                                                                                                       // 35
  }                                                                                                                    //
                                                                                                                       //
  return (function (args) {                                                                                            // 38
    var s0 = 0;                                                                                                        // 39
    var s1 = 0;                                                                                                        // 40
    var s2 = 0;                                                                                                        // 41
    var c = 1;                                                                                                         // 42
                                                                                                                       //
    if (args.length == 0) {                                                                                            // 44
      args = [+new Date()];                                                                                            // 45
    }                                                                                                                  //
    var mash = Mash();                                                                                                 // 47
    s0 = mash(' ');                                                                                                    // 48
    s1 = mash(' ');                                                                                                    // 49
    s2 = mash(' ');                                                                                                    // 50
                                                                                                                       //
    for (var i = 0; i < args.length; i++) {                                                                            // 52
      s0 -= mash(args[i]);                                                                                             // 53
      if (s0 < 0) {                                                                                                    // 54
        s0 += 1;                                                                                                       // 55
      }                                                                                                                //
      s1 -= mash(args[i]);                                                                                             // 57
      if (s1 < 0) {                                                                                                    // 58
        s1 += 1;                                                                                                       // 59
      }                                                                                                                //
      s2 -= mash(args[i]);                                                                                             // 61
      if (s2 < 0) {                                                                                                    // 62
        s2 += 1;                                                                                                       // 63
      }                                                                                                                //
    }                                                                                                                  //
    mash = null;                                                                                                       // 66
                                                                                                                       //
    var random = function () {                                                                                         // 68
      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32                                                      // 69
      s0 = s1;                                                                                                         // 70
      s1 = s2;                                                                                                         // 71
      return s2 = t - (c = t | 0);                                                                                     // 72
    };                                                                                                                 //
    random.uint32 = function () {                                                                                      // 74
      return random() * 0x100000000; // 2^32                                                                           // 75
    };                                                                                                                 //
    random.fract53 = function () {                                                                                     // 77
      return random() + (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53                                   // 78
    };                                                                                                                 //
    random.version = 'Alea 0.9';                                                                                       // 81
    random.args = args;                                                                                                // 82
    return random;                                                                                                     // 83
  })(Array.prototype.slice.call(arguments));                                                                           //
};                                                                                                                     //
                                                                                                                       //
var UNMISTAKABLE_CHARS = "23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz";                                    // 88
var BASE64_CHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" + "0123456789-_";                            // 89
                                                                                                                       //
// `type` is one of `RandomGenerator.Type` as defined below.                                                           //
//                                                                                                                     //
// options:                                                                                                            //
// - seeds: (required, only for RandomGenerator.Type.ALEA) an array                                                    //
//   whose items will be `toString`ed and used as the seed to the Alea                                                 //
//   algorithm                                                                                                         //
var RandomGenerator = function (type, options) {                                                                       // 98
  var self = this;                                                                                                     // 99
  self.type = type;                                                                                                    // 100
                                                                                                                       //
  if (!RandomGenerator.Type[type]) {                                                                                   // 102
    throw new Error("Unknown random generator type: " + type);                                                         // 103
  }                                                                                                                    //
                                                                                                                       //
  if (type === RandomGenerator.Type.ALEA) {                                                                            // 106
    if (!options.seeds) {                                                                                              // 107
      throw new Error("No seeds were provided for Alea PRNG");                                                         // 108
    }                                                                                                                  //
    self.alea = Alea.apply(null, options.seeds);                                                                       // 110
  }                                                                                                                    //
};                                                                                                                     //
                                                                                                                       //
// Types of PRNGs supported by the `RandomGenerator` class                                                             //
RandomGenerator.Type = {                                                                                               // 115
  // Use Node's built-in `crypto.getRandomBytes` (cryptographically                                                    //
  // secure but not seedable, runs only on the server). Reverts to                                                     //
  // `crypto.getPseudoRandomBytes` in the extremely uncommon case that                                                 //
  // there isn't enough entropy yet                                                                                    //
  NODE_CRYPTO: "NODE_CRYPTO",                                                                                          // 120
                                                                                                                       //
  // Use non-IE browser's built-in `window.crypto.getRandomValues`                                                     //
  // (cryptographically secure but not seedable, runs only in the                                                      //
  // browser).                                                                                                         //
  BROWSER_CRYPTO: "BROWSER_CRYPTO",                                                                                    // 125
                                                                                                                       //
  // Use the *fast*, seedaable and not cryptographically secure                                                        //
  // Alea algorithm                                                                                                    //
  ALEA: "ALEA"                                                                                                         // 129
};                                                                                                                     //
                                                                                                                       //
RandomGenerator.prototype.fraction = function () {                                                                     // 132
  var self = this;                                                                                                     // 133
  if (self.type === RandomGenerator.Type.ALEA) {                                                                       // 134
    return self.alea();                                                                                                // 135
  } else if (self.type === RandomGenerator.Type.NODE_CRYPTO) {                                                         //
    var numerator = parseInt(self.hexString(8), 16);                                                                   // 137
    return numerator * 2.3283064365386963e-10; // 2^-32                                                                // 138
  } else if (self.type === RandomGenerator.Type.BROWSER_CRYPTO) {                                                      //
      var array = new Uint32Array(1);                                                                                  // 140
      window.crypto.getRandomValues(array);                                                                            // 141
      return array[0] * 2.3283064365386963e-10; // 2^-32                                                               // 142
    } else {                                                                                                           //
        throw new Error('Unknown random generator type: ' + self.type);                                                // 144
      }                                                                                                                //
};                                                                                                                     //
                                                                                                                       //
RandomGenerator.prototype.hexString = function (digits) {                                                              // 148
  var self = this;                                                                                                     // 149
  if (self.type === RandomGenerator.Type.NODE_CRYPTO) {                                                                // 150
    var numBytes = Math.ceil(digits / 2);                                                                              // 151
    var bytes;                                                                                                         // 152
    // Try to get cryptographically strong randomness. Fall back to                                                    //
    // non-cryptographically strong if not available.                                                                  //
    try {                                                                                                              // 155
      bytes = nodeCrypto.randomBytes(numBytes);                                                                        // 156
    } catch (e) {                                                                                                      //
      // XXX should re-throw any error except insufficient entropy                                                     //
      bytes = nodeCrypto.pseudoRandomBytes(numBytes);                                                                  // 159
    }                                                                                                                  //
    var result = bytes.toString("hex");                                                                                // 161
    // If the number of digits is odd, we'll have generated an extra 4 bits                                            //
    // of randomness, so we need to trim the last digit.                                                               //
    return result.substring(0, digits);                                                                                // 164
  } else {                                                                                                             //
    return this._randomString(digits, "0123456789abcdef");                                                             // 166
  }                                                                                                                    //
};                                                                                                                     //
                                                                                                                       //
RandomGenerator.prototype._randomString = function (charsCount, alphabet) {                                            // 170
  var self = this;                                                                                                     // 172
  var digits = [];                                                                                                     // 173
  for (var i = 0; i < charsCount; i++) {                                                                               // 174
    digits[i] = self.choice(alphabet);                                                                                 // 175
  }                                                                                                                    //
  return digits.join("");                                                                                              // 177
};                                                                                                                     //
                                                                                                                       //
RandomGenerator.prototype.id = function (charsCount) {                                                                 // 180
  var self = this;                                                                                                     // 181
  // 17 characters is around 96 bits of entropy, which is the amount of                                                //
  // state in the Alea PRNG.                                                                                           //
  if (charsCount === undefined) charsCount = 17;                                                                       // 184
                                                                                                                       //
  return self._randomString(charsCount, UNMISTAKABLE_CHARS);                                                           // 187
};                                                                                                                     //
                                                                                                                       //
RandomGenerator.prototype.secret = function (charsCount) {                                                             // 190
  var self = this;                                                                                                     // 191
  // Default to 256 bits of entropy, or 43 characters at 6 bits per                                                    //
  // character.                                                                                                        //
  if (charsCount === undefined) charsCount = 43;                                                                       // 194
  return self._randomString(charsCount, BASE64_CHARS);                                                                 // 196
};                                                                                                                     //
                                                                                                                       //
RandomGenerator.prototype.choice = function (arrayOrString) {                                                          // 199
  var index = Math.floor(this.fraction() * arrayOrString.length);                                                      // 200
  if (typeof arrayOrString === "string") return arrayOrString.substr(index, 1);else return arrayOrString[index];       // 201
};                                                                                                                     //
                                                                                                                       //
// instantiate RNG.  Heuristically collect entropy from various sources when a                                         //
// cryptographic PRNG isn't available.                                                                                 //
                                                                                                                       //
// client sources                                                                                                      //
var height = typeof window !== 'undefined' && window.innerHeight || typeof document !== 'undefined' && document.documentElement && document.documentElement.clientHeight || typeof document !== 'undefined' && document.body && document.body.clientHeight || 1;
                                                                                                                       //
var width = typeof window !== 'undefined' && window.innerWidth || typeof document !== 'undefined' && document.documentElement && document.documentElement.clientWidth || typeof document !== 'undefined' && document.body && document.body.clientWidth || 1;
                                                                                                                       //
var agent = typeof navigator !== 'undefined' && navigator.userAgent || "";                                             // 229
                                                                                                                       //
function createAleaGeneratorWithGeneratedSeed() {                                                                      // 231
  return new RandomGenerator(RandomGenerator.Type.ALEA, { seeds: [new Date(), height, width, agent, Math.random()] });
};                                                                                                                     //
                                                                                                                       //
if (Meteor.isServer) {                                                                                                 // 237
  Random = new RandomGenerator(RandomGenerator.Type.NODE_CRYPTO);                                                      // 238
} else {                                                                                                               //
  if (typeof window !== "undefined" && window.crypto && window.crypto.getRandomValues) {                               // 240
    Random = new RandomGenerator(RandomGenerator.Type.BROWSER_CRYPTO);                                                 // 242
  } else {                                                                                                             //
    // On IE 10 and below, there's no browser crypto API                                                               //
    // available. Fall back to Alea                                                                                    //
    //                                                                                                                 //
    // XXX looks like at the moment, we use Alea in IE 11 as well,                                                     //
    // which has `window.msCrypto` instead of `window.crypto`.                                                         //
    Random = createAleaGeneratorWithGeneratedSeed();                                                                   // 249
  }                                                                                                                    //
}                                                                                                                      //
                                                                                                                       //
// Create a non-cryptographically secure PRNG with a given seed (using                                                 //
// the Alea algorithm)                                                                                                 //
Random.createWithSeeds = function () {                                                                                 // 255
  for (var _len = arguments.length, seeds = Array(_len), _key = 0; _key < _len; _key++) {                              //
    seeds[_key] = arguments[_key];                                                                                     // 255
  }                                                                                                                    //
                                                                                                                       //
  if (seeds.length === 0) {                                                                                            // 256
    throw new Error("No seeds were provided");                                                                         // 257
  }                                                                                                                    //
  return new RandomGenerator(RandomGenerator.Type.ALEA, { seeds: seeds });                                             // 259
};                                                                                                                     //
                                                                                                                       //
// Used like `Random`, but much faster and not cryptographically                                                       //
// secure                                                                                                              //
Random.insecure = createAleaGeneratorWithGeneratedSeed();                                                              // 264
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/random/deprecated.js                                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Before this package existed, we used to use this Meteor.uuid()                                                      //
// implementing the RFC 4122 v4 UUID. It is no longer documented                                                       //
// and will go away.                                                                                                   //
// XXX COMPAT WITH 0.5.6                                                                                               //
Meteor.uuid = function () {                                                                                            // 5
  var HEX_DIGITS = "0123456789abcdef";                                                                                 // 6
  var s = [];                                                                                                          // 7
  for (var i = 0; i < 36; i++) {                                                                                       // 8
    s[i] = Random.choice(HEX_DIGITS);                                                                                  // 9
  }                                                                                                                    //
  s[14] = "4";                                                                                                         // 11
  s[19] = HEX_DIGITS.substr(parseInt(s[19], 16) & 0x3 | 0x8, 1);                                                       // 12
  s[8] = s[13] = s[18] = s[23] = "-";                                                                                  // 13
                                                                                                                       //
  var uuid = s.join("");                                                                                               // 15
  return uuid;                                                                                                         // 16
};                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.random = {
  Random: Random
};

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

/* Package-scope variables */
var Tracker, Deps;

(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
// packages/tracker/tracker.js                                                                                        //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                      //
/////////////////////////////////////////////////////                                                                 // 1
// Package docs at http://docs.meteor.com/#tracker //                                                                 // 2
/////////////////////////////////////////////////////                                                                 // 3
                                                                                                                      // 4
/**                                                                                                                   // 5
 * @namespace Tracker                                                                                                 // 6
 * @summary The namespace for Tracker-related methods.                                                                // 7
 */                                                                                                                   // 8
Tracker = {};                                                                                                         // 9
                                                                                                                      // 10
// http://docs.meteor.com/#tracker_active                                                                             // 11
                                                                                                                      // 12
/**                                                                                                                   // 13
 * @summary True if there is a current computation, meaning that dependencies on reactive data sources will be tracked and potentially cause the current computation to be rerun.
 * @locus Client                                                                                                      // 15
 * @type {Boolean}                                                                                                    // 16
 */                                                                                                                   // 17
Tracker.active = false;                                                                                               // 18
                                                                                                                      // 19
// http://docs.meteor.com/#tracker_currentcomputation                                                                 // 20
                                                                                                                      // 21
/**                                                                                                                   // 22
 * @summary The current computation, or `null` if there isn't one.  The current computation is the [`Tracker.Computation`](#tracker_computation) object created by the innermost active call to `Tracker.autorun`, and it's the computation that gains dependencies when reactive data sources are accessed.
 * @locus Client                                                                                                      // 24
 * @type {Tracker.Computation}                                                                                        // 25
 */                                                                                                                   // 26
Tracker.currentComputation = null;                                                                                    // 27
                                                                                                                      // 28
// References to all computations created within the Tracker by id.                                                   // 29
// Keeping these references on an underscore property gives more control to                                           // 30
// tooling and packages extending Tracker without increasing the API surface.                                         // 31
// These can used to monkey-patch computations, their functions, use                                                  // 32
// computation ids for tracking, etc.                                                                                 // 33
Tracker._computations = {};                                                                                           // 34
                                                                                                                      // 35
var setCurrentComputation = function (c) {                                                                            // 36
  Tracker.currentComputation = c;                                                                                     // 37
  Tracker.active = !! c;                                                                                              // 38
};                                                                                                                    // 39
                                                                                                                      // 40
var _debugFunc = function () {                                                                                        // 41
  // We want this code to work without Meteor, and also without                                                       // 42
  // "console" (which is technically non-standard and may be missing                                                  // 43
  // on some browser we come across, like it was on IE 7).                                                            // 44
  //                                                                                                                  // 45
  // Lazy evaluation because `Meteor` does not exist right away.(??)                                                  // 46
  return (typeof Meteor !== "undefined" ? Meteor._debug :                                                             // 47
          ((typeof console !== "undefined") && console.error ?                                                        // 48
           function () { console.error.apply(console, arguments); } :                                                 // 49
           function () {}));                                                                                          // 50
};                                                                                                                    // 51
                                                                                                                      // 52
var _maybeSuppressMoreLogs = function (messagesLength) {                                                              // 53
  // Sometimes when running tests, we intentionally suppress logs on expected                                         // 54
  // printed errors. Since the current implementation of _throwOrLog can log                                          // 55
  // multiple separate log messages, suppress all of them if at least one suppress                                    // 56
  // is expected as we still want them to count as one.                                                               // 57
  if (typeof Meteor !== "undefined") {                                                                                // 58
    if (Meteor._suppressed_log_expected()) {                                                                          // 59
      Meteor._suppress_log(messagesLength - 1);                                                                       // 60
    }                                                                                                                 // 61
  }                                                                                                                   // 62
};                                                                                                                    // 63
                                                                                                                      // 64
var _throwOrLog = function (from, e) {                                                                                // 65
  if (throwFirstError) {                                                                                              // 66
    throw e;                                                                                                          // 67
  } else {                                                                                                            // 68
    var printArgs = ["Exception from Tracker " + from + " function:"];                                                // 69
    if (e.stack && e.message && e.name) {                                                                             // 70
      var idx = e.stack.indexOf(e.message);                                                                           // 71
      if (idx < 0 || idx > e.name.length + 2) { // check for "Error: "                                                // 72
        // message is not part of the stack                                                                           // 73
        var message = e.name + ": " + e.message;                                                                      // 74
        printArgs.push(message);                                                                                      // 75
      }                                                                                                               // 76
    }                                                                                                                 // 77
    printArgs.push(e.stack);                                                                                          // 78
    _maybeSuppressMoreLogs(printArgs.length);                                                                         // 79
                                                                                                                      // 80
    for (var i = 0; i < printArgs.length; i++) {                                                                      // 81
      _debugFunc()(printArgs[i]);                                                                                     // 82
    }                                                                                                                 // 83
  }                                                                                                                   // 84
};                                                                                                                    // 85
                                                                                                                      // 86
// Takes a function `f`, and wraps it in a `Meteor._noYieldsAllowed`                                                  // 87
// block if we are running on the server. On the client, returns the                                                  // 88
// original function (since `Meteor._noYieldsAllowed` is a                                                            // 89
// no-op). This has the benefit of not adding an unnecessary stack                                                    // 90
// frame on the client.                                                                                               // 91
var withNoYieldsAllowed = function (f) {                                                                              // 92
  if ((typeof Meteor === 'undefined') || Meteor.isClient) {                                                           // 93
    return f;                                                                                                         // 94
  } else {                                                                                                            // 95
    return function () {                                                                                              // 96
      var args = arguments;                                                                                           // 97
      Meteor._noYieldsAllowed(function () {                                                                           // 98
        f.apply(null, args);                                                                                          // 99
      });                                                                                                             // 100
    };                                                                                                                // 101
  }                                                                                                                   // 102
};                                                                                                                    // 103
                                                                                                                      // 104
var nextId = 1;                                                                                                       // 105
// computations whose callbacks we should call at flush time                                                          // 106
var pendingComputations = [];                                                                                         // 107
// `true` if a Tracker.flush is scheduled, or if we are in Tracker.flush now                                          // 108
var willFlush = false;                                                                                                // 109
// `true` if we are in Tracker.flush now                                                                              // 110
var inFlush = false;                                                                                                  // 111
// `true` if we are computing a computation now, either first time                                                    // 112
// or recompute.  This matches Tracker.active unless we are inside                                                    // 113
// Tracker.nonreactive, which nullfies currentComputation even though                                                 // 114
// an enclosing computation may still be running.                                                                     // 115
var inCompute = false;                                                                                                // 116
// `true` if the `_throwFirstError` option was passed in to the call                                                  // 117
// to Tracker.flush that we are in. When set, throw rather than log the                                               // 118
// first error encountered while flushing. Before throwing the error,                                                 // 119
// finish flushing (from a finally block), logging any subsequent                                                     // 120
// errors.                                                                                                            // 121
var throwFirstError = false;                                                                                          // 122
                                                                                                                      // 123
var afterFlushCallbacks = [];                                                                                         // 124
                                                                                                                      // 125
var requireFlush = function () {                                                                                      // 126
  if (! willFlush) {                                                                                                  // 127
    // We want this code to work without Meteor, see debugFunc above                                                  // 128
    if (typeof Meteor !== "undefined")                                                                                // 129
      Meteor._setImmediate(Tracker._runFlush);                                                                        // 130
    else                                                                                                              // 131
      setTimeout(Tracker._runFlush, 0);                                                                               // 132
    willFlush = true;                                                                                                 // 133
  }                                                                                                                   // 134
};                                                                                                                    // 135
                                                                                                                      // 136
// Tracker.Computation constructor is visible but private                                                             // 137
// (throws an error if you try to call it)                                                                            // 138
var constructingComputation = false;                                                                                  // 139
                                                                                                                      // 140
//                                                                                                                    // 141
// http://docs.meteor.com/#tracker_computation                                                                        // 142
                                                                                                                      // 143
/**                                                                                                                   // 144
 * @summary A Computation object represents code that is repeatedly rerun                                             // 145
 * in response to                                                                                                     // 146
 * reactive data changes. Computations don't have return values; they just                                            // 147
 * perform actions, such as rerendering a template on the screen. Computations                                        // 148
 * are created using Tracker.autorun. Use stop to prevent further rerunning of a                                      // 149
 * computation.                                                                                                       // 150
 * @instancename computation                                                                                          // 151
 */                                                                                                                   // 152
Tracker.Computation = function (f, parent, onError) {                                                                 // 153
  if (! constructingComputation)                                                                                      // 154
    throw new Error(                                                                                                  // 155
      "Tracker.Computation constructor is private; use Tracker.autorun");                                             // 156
  constructingComputation = false;                                                                                    // 157
                                                                                                                      // 158
  var self = this;                                                                                                    // 159
                                                                                                                      // 160
  // http://docs.meteor.com/#computation_stopped                                                                      // 161
                                                                                                                      // 162
  /**                                                                                                                 // 163
   * @summary True if this computation has been stopped.                                                              // 164
   * @locus Client                                                                                                    // 165
   * @memberOf Tracker.Computation                                                                                    // 166
   * @instance                                                                                                        // 167
   * @name  stopped                                                                                                   // 168
   */                                                                                                                 // 169
  self.stopped = false;                                                                                               // 170
                                                                                                                      // 171
  // http://docs.meteor.com/#computation_invalidated                                                                  // 172
                                                                                                                      // 173
  /**                                                                                                                 // 174
   * @summary True if this computation has been invalidated (and not yet rerun), or if it has been stopped.           // 175
   * @locus Client                                                                                                    // 176
   * @memberOf Tracker.Computation                                                                                    // 177
   * @instance                                                                                                        // 178
   * @name  invalidated                                                                                               // 179
   * @type {Boolean}                                                                                                  // 180
   */                                                                                                                 // 181
  self.invalidated = false;                                                                                           // 182
                                                                                                                      // 183
  // http://docs.meteor.com/#computation_firstrun                                                                     // 184
                                                                                                                      // 185
  /**                                                                                                                 // 186
   * @summary True during the initial run of the computation at the time `Tracker.autorun` is called, and false on subsequent reruns and at other times.
   * @locus Client                                                                                                    // 188
   * @memberOf Tracker.Computation                                                                                    // 189
   * @instance                                                                                                        // 190
   * @name  firstRun                                                                                                  // 191
   * @type {Boolean}                                                                                                  // 192
   */                                                                                                                 // 193
  self.firstRun = true;                                                                                               // 194
                                                                                                                      // 195
  self._id = nextId++;                                                                                                // 196
  self._onInvalidateCallbacks = [];                                                                                   // 197
  self._onStopCallbacks = [];                                                                                         // 198
  // the plan is at some point to use the parent relation                                                             // 199
  // to constrain the order that computations are processed                                                           // 200
  self._parent = parent;                                                                                              // 201
  self._func = f;                                                                                                     // 202
  self._onError = onError;                                                                                            // 203
  self._recomputing = false;                                                                                          // 204
                                                                                                                      // 205
  // Register the computation within the global Tracker.                                                              // 206
  Tracker._computations[self._id] = self;                                                                             // 207
                                                                                                                      // 208
  var errored = true;                                                                                                 // 209
  try {                                                                                                               // 210
    self._compute();                                                                                                  // 211
    errored = false;                                                                                                  // 212
  } finally {                                                                                                         // 213
    self.firstRun = false;                                                                                            // 214
    if (errored)                                                                                                      // 215
      self.stop();                                                                                                    // 216
  }                                                                                                                   // 217
};                                                                                                                    // 218
                                                                                                                      // 219
// http://docs.meteor.com/#computation_oninvalidate                                                                   // 220
                                                                                                                      // 221
/**                                                                                                                   // 222
 * @summary Registers `callback` to run when this computation is next invalidated, or runs it immediately if the computation is already invalidated.  The callback is run exactly once and not upon future invalidations unless `onInvalidate` is called again after the computation becomes valid again.
 * @locus Client                                                                                                      // 224
 * @param {Function} callback Function to be called on invalidation. Receives one argument, the computation that was invalidated.
 */                                                                                                                   // 226
Tracker.Computation.prototype.onInvalidate = function (f) {                                                           // 227
  var self = this;                                                                                                    // 228
                                                                                                                      // 229
  if (typeof f !== 'function')                                                                                        // 230
    throw new Error("onInvalidate requires a function");                                                              // 231
                                                                                                                      // 232
  if (self.invalidated) {                                                                                             // 233
    Tracker.nonreactive(function () {                                                                                 // 234
      withNoYieldsAllowed(f)(self);                                                                                   // 235
    });                                                                                                               // 236
  } else {                                                                                                            // 237
    self._onInvalidateCallbacks.push(f);                                                                              // 238
  }                                                                                                                   // 239
};                                                                                                                    // 240
                                                                                                                      // 241
/**                                                                                                                   // 242
 * @summary Registers `callback` to run when this computation is stopped, or runs it immediately if the computation is already stopped.  The callback is run after any `onInvalidate` callbacks.
 * @locus Client                                                                                                      // 244
 * @param {Function} callback Function to be called on stop. Receives one argument, the computation that was stopped.
 */                                                                                                                   // 246
Tracker.Computation.prototype.onStop = function (f) {                                                                 // 247
  var self = this;                                                                                                    // 248
                                                                                                                      // 249
  if (typeof f !== 'function')                                                                                        // 250
    throw new Error("onStop requires a function");                                                                    // 251
                                                                                                                      // 252
  if (self.stopped) {                                                                                                 // 253
    Tracker.nonreactive(function () {                                                                                 // 254
      withNoYieldsAllowed(f)(self);                                                                                   // 255
    });                                                                                                               // 256
  } else {                                                                                                            // 257
    self._onStopCallbacks.push(f);                                                                                    // 258
  }                                                                                                                   // 259
};                                                                                                                    // 260
                                                                                                                      // 261
// http://docs.meteor.com/#computation_invalidate                                                                     // 262
                                                                                                                      // 263
/**                                                                                                                   // 264
 * @summary Invalidates this computation so that it will be rerun.                                                    // 265
 * @locus Client                                                                                                      // 266
 */                                                                                                                   // 267
Tracker.Computation.prototype.invalidate = function () {                                                              // 268
  var self = this;                                                                                                    // 269
  if (! self.invalidated) {                                                                                           // 270
    // if we're currently in _recompute(), don't enqueue                                                              // 271
    // ourselves, since we'll rerun immediately anyway.                                                               // 272
    if (! self._recomputing && ! self.stopped) {                                                                      // 273
      requireFlush();                                                                                                 // 274
      pendingComputations.push(this);                                                                                 // 275
    }                                                                                                                 // 276
                                                                                                                      // 277
    self.invalidated = true;                                                                                          // 278
                                                                                                                      // 279
    // callbacks can't add callbacks, because                                                                         // 280
    // self.invalidated === true.                                                                                     // 281
    for(var i = 0, f; f = self._onInvalidateCallbacks[i]; i++) {                                                      // 282
      Tracker.nonreactive(function () {                                                                               // 283
        withNoYieldsAllowed(f)(self);                                                                                 // 284
      });                                                                                                             // 285
    }                                                                                                                 // 286
    self._onInvalidateCallbacks = [];                                                                                 // 287
  }                                                                                                                   // 288
};                                                                                                                    // 289
                                                                                                                      // 290
// http://docs.meteor.com/#computation_stop                                                                           // 291
                                                                                                                      // 292
/**                                                                                                                   // 293
 * @summary Prevents this computation from rerunning.                                                                 // 294
 * @locus Client                                                                                                      // 295
 */                                                                                                                   // 296
Tracker.Computation.prototype.stop = function () {                                                                    // 297
  var self = this;                                                                                                    // 298
                                                                                                                      // 299
  if (! self.stopped) {                                                                                               // 300
    self.stopped = true;                                                                                              // 301
    self.invalidate();                                                                                                // 302
    // Unregister from global Tracker.                                                                                // 303
    delete Tracker._computations[self._id];                                                                           // 304
    for(var i = 0, f; f = self._onStopCallbacks[i]; i++) {                                                            // 305
      Tracker.nonreactive(function () {                                                                               // 306
        withNoYieldsAllowed(f)(self);                                                                                 // 307
      });                                                                                                             // 308
    }                                                                                                                 // 309
    self._onStopCallbacks = [];                                                                                       // 310
  }                                                                                                                   // 311
};                                                                                                                    // 312
                                                                                                                      // 313
Tracker.Computation.prototype._compute = function () {                                                                // 314
  var self = this;                                                                                                    // 315
  self.invalidated = false;                                                                                           // 316
                                                                                                                      // 317
  var previous = Tracker.currentComputation;                                                                          // 318
  setCurrentComputation(self);                                                                                        // 319
  var previousInCompute = inCompute;                                                                                  // 320
  inCompute = true;                                                                                                   // 321
  try {                                                                                                               // 322
    withNoYieldsAllowed(self._func)(self);                                                                            // 323
  } finally {                                                                                                         // 324
    setCurrentComputation(previous);                                                                                  // 325
    inCompute = previousInCompute;                                                                                    // 326
  }                                                                                                                   // 327
};                                                                                                                    // 328
                                                                                                                      // 329
Tracker.Computation.prototype._needsRecompute = function () {                                                         // 330
  var self = this;                                                                                                    // 331
  return self.invalidated && ! self.stopped;                                                                          // 332
};                                                                                                                    // 333
                                                                                                                      // 334
Tracker.Computation.prototype._recompute = function () {                                                              // 335
  var self = this;                                                                                                    // 336
                                                                                                                      // 337
  self._recomputing = true;                                                                                           // 338
  try {                                                                                                               // 339
    if (self._needsRecompute()) {                                                                                     // 340
      try {                                                                                                           // 341
        self._compute();                                                                                              // 342
      } catch (e) {                                                                                                   // 343
        if (self._onError) {                                                                                          // 344
          self._onError(e);                                                                                           // 345
        } else {                                                                                                      // 346
          _throwOrLog("recompute", e);                                                                                // 347
        }                                                                                                             // 348
      }                                                                                                               // 349
    }                                                                                                                 // 350
  } finally {                                                                                                         // 351
    self._recomputing = false;                                                                                        // 352
  }                                                                                                                   // 353
};                                                                                                                    // 354
                                                                                                                      // 355
//                                                                                                                    // 356
// http://docs.meteor.com/#tracker_dependency                                                                         // 357
                                                                                                                      // 358
/**                                                                                                                   // 359
 * @summary A Dependency represents an atomic unit of reactive data that a                                            // 360
 * computation might depend on. Reactive data sources such as Session or                                              // 361
 * Minimongo internally create different Dependency objects for different                                             // 362
 * pieces of data, each of which may be depended on by multiple computations.                                         // 363
 * When the data changes, the computations are invalidated.                                                           // 364
 * @class                                                                                                             // 365
 * @instanceName dependency                                                                                           // 366
 */                                                                                                                   // 367
Tracker.Dependency = function () {                                                                                    // 368
  this._dependentsById = {};                                                                                          // 369
};                                                                                                                    // 370
                                                                                                                      // 371
// http://docs.meteor.com/#dependency_depend                                                                          // 372
//                                                                                                                    // 373
// Adds `computation` to this set if it is not already                                                                // 374
// present.  Returns true if `computation` is a new member of the set.                                                // 375
// If no argument, defaults to currentComputation, or does nothing                                                    // 376
// if there is no currentComputation.                                                                                 // 377
                                                                                                                      // 378
/**                                                                                                                   // 379
 * @summary Declares that the current computation (or `fromComputation` if given) depends on `dependency`.  The computation will be invalidated the next time `dependency` changes.
                                                                                                                      // 381
If there is no current computation and `depend()` is called with no arguments, it does nothing and returns false.     // 382
                                                                                                                      // 383
Returns true if the computation is a new dependent of `dependency` rather than an existing one.                       // 384
 * @locus Client                                                                                                      // 385
 * @param {Tracker.Computation} [fromComputation] An optional computation declared to depend on `dependency` instead of the current computation.
 * @returns {Boolean}                                                                                                 // 387
 */                                                                                                                   // 388
Tracker.Dependency.prototype.depend = function (computation) {                                                        // 389
  if (! computation) {                                                                                                // 390
    if (! Tracker.active)                                                                                             // 391
      return false;                                                                                                   // 392
                                                                                                                      // 393
    computation = Tracker.currentComputation;                                                                         // 394
  }                                                                                                                   // 395
  var self = this;                                                                                                    // 396
  var id = computation._id;                                                                                           // 397
  if (! (id in self._dependentsById)) {                                                                               // 398
    self._dependentsById[id] = computation;                                                                           // 399
    computation.onInvalidate(function () {                                                                            // 400
      delete self._dependentsById[id];                                                                                // 401
    });                                                                                                               // 402
    return true;                                                                                                      // 403
  }                                                                                                                   // 404
  return false;                                                                                                       // 405
};                                                                                                                    // 406
                                                                                                                      // 407
// http://docs.meteor.com/#dependency_changed                                                                         // 408
                                                                                                                      // 409
/**                                                                                                                   // 410
 * @summary Invalidate all dependent computations immediately and remove them as dependents.                          // 411
 * @locus Client                                                                                                      // 412
 */                                                                                                                   // 413
Tracker.Dependency.prototype.changed = function () {                                                                  // 414
  var self = this;                                                                                                    // 415
  for (var id in self._dependentsById)                                                                                // 416
    self._dependentsById[id].invalidate();                                                                            // 417
};                                                                                                                    // 418
                                                                                                                      // 419
// http://docs.meteor.com/#dependency_hasdependents                                                                   // 420
                                                                                                                      // 421
/**                                                                                                                   // 422
 * @summary True if this Dependency has one or more dependent Computations, which would be invalidated if this Dependency were to change.
 * @locus Client                                                                                                      // 424
 * @returns {Boolean}                                                                                                 // 425
 */                                                                                                                   // 426
Tracker.Dependency.prototype.hasDependents = function () {                                                            // 427
  var self = this;                                                                                                    // 428
  for(var id in self._dependentsById)                                                                                 // 429
    return true;                                                                                                      // 430
  return false;                                                                                                       // 431
};                                                                                                                    // 432
                                                                                                                      // 433
// http://docs.meteor.com/#tracker_flush                                                                              // 434
                                                                                                                      // 435
/**                                                                                                                   // 436
 * @summary Process all reactive updates immediately and ensure that all invalidated computations are rerun.          // 437
 * @locus Client                                                                                                      // 438
 */                                                                                                                   // 439
Tracker.flush = function (options) {                                                                                  // 440
  Tracker._runFlush({ finishSynchronously: true,                                                                      // 441
                      throwFirstError: options && options._throwFirstError });                                        // 442
};                                                                                                                    // 443
                                                                                                                      // 444
// Run all pending computations and afterFlush callbacks.  If we were not called                                      // 445
// directly via Tracker.flush, this may return before they're all done to allow                                       // 446
// the event loop to run a little before continuing.                                                                  // 447
Tracker._runFlush = function (options) {                                                                              // 448
  // XXX What part of the comment below is still true? (We no longer                                                  // 449
  // have Spark)                                                                                                      // 450
  //                                                                                                                  // 451
  // Nested flush could plausibly happen if, say, a flush causes                                                      // 452
  // DOM mutation, which causes a "blur" event, which runs an                                                         // 453
  // app event handler that calls Tracker.flush.  At the moment                                                       // 454
  // Spark blocks event handlers during DOM mutation anyway,                                                          // 455
  // because the LiveRange tree isn't valid.  And we don't have                                                       // 456
  // any useful notion of a nested flush.                                                                             // 457
  //                                                                                                                  // 458
  // https://app.asana.com/0/159908330244/385138233856                                                                // 459
  if (inFlush)                                                                                                        // 460
    throw new Error("Can't call Tracker.flush while flushing");                                                       // 461
                                                                                                                      // 462
  if (inCompute)                                                                                                      // 463
    throw new Error("Can't flush inside Tracker.autorun");                                                            // 464
                                                                                                                      // 465
  options = options || {};                                                                                            // 466
                                                                                                                      // 467
  inFlush = true;                                                                                                     // 468
  willFlush = true;                                                                                                   // 469
  throwFirstError = !! options.throwFirstError;                                                                       // 470
                                                                                                                      // 471
  var recomputedCount = 0;                                                                                            // 472
  var finishedTry = false;                                                                                            // 473
  try {                                                                                                               // 474
    while (pendingComputations.length ||                                                                              // 475
           afterFlushCallbacks.length) {                                                                              // 476
                                                                                                                      // 477
      // recompute all pending computations                                                                           // 478
      while (pendingComputations.length) {                                                                            // 479
        var comp = pendingComputations.shift();                                                                       // 480
        comp._recompute();                                                                                            // 481
        if (comp._needsRecompute()) {                                                                                 // 482
          pendingComputations.unshift(comp);                                                                          // 483
        }                                                                                                             // 484
                                                                                                                      // 485
        if (! options.finishSynchronously && ++recomputedCount > 1000) {                                              // 486
          finishedTry = true;                                                                                         // 487
          return;                                                                                                     // 488
        }                                                                                                             // 489
      }                                                                                                               // 490
                                                                                                                      // 491
      if (afterFlushCallbacks.length) {                                                                               // 492
        // call one afterFlush callback, which may                                                                    // 493
        // invalidate more computations                                                                               // 494
        var func = afterFlushCallbacks.shift();                                                                       // 495
        try {                                                                                                         // 496
          func();                                                                                                     // 497
        } catch (e) {                                                                                                 // 498
          _throwOrLog("afterFlush", e);                                                                               // 499
        }                                                                                                             // 500
      }                                                                                                               // 501
    }                                                                                                                 // 502
    finishedTry = true;                                                                                               // 503
  } finally {                                                                                                         // 504
    if (! finishedTry) {                                                                                              // 505
      // we're erroring due to throwFirstError being true.                                                            // 506
      inFlush = false; // needed before calling `Tracker.flush()` again                                               // 507
      // finish flushing                                                                                              // 508
      Tracker._runFlush({                                                                                             // 509
        finishSynchronously: options.finishSynchronously,                                                             // 510
        throwFirstError: false                                                                                        // 511
      });                                                                                                             // 512
    }                                                                                                                 // 513
    willFlush = false;                                                                                                // 514
    inFlush = false;                                                                                                  // 515
    if (pendingComputations.length || afterFlushCallbacks.length) {                                                   // 516
      // We're yielding because we ran a bunch of computations and we aren't                                          // 517
      // required to finish synchronously, so we'd like to give the event loop a                                      // 518
      // chance. We should flush again soon.                                                                          // 519
      if (options.finishSynchronously) {                                                                              // 520
        throw new Error("still have more to do?");  // shouldn't happen                                               // 521
      }                                                                                                               // 522
      setTimeout(requireFlush, 10);                                                                                   // 523
    }                                                                                                                 // 524
  }                                                                                                                   // 525
};                                                                                                                    // 526
                                                                                                                      // 527
// http://docs.meteor.com/#tracker_autorun                                                                            // 528
//                                                                                                                    // 529
// Run f(). Record its dependencies. Rerun it whenever the                                                            // 530
// dependencies change.                                                                                               // 531
//                                                                                                                    // 532
// Returns a new Computation, which is also passed to f.                                                              // 533
//                                                                                                                    // 534
// Links the computation to the current computation                                                                   // 535
// so that it is stopped if the current computation is invalidated.                                                   // 536
                                                                                                                      // 537
/**                                                                                                                   // 538
 * @callback Tracker.ComputationFunction                                                                              // 539
 * @param {Tracker.Computation}                                                                                       // 540
 */                                                                                                                   // 541
/**                                                                                                                   // 542
 * @summary Run a function now and rerun it later whenever its dependencies                                           // 543
 * change. Returns a Computation object that can be used to stop or observe the                                       // 544
 * rerunning.                                                                                                         // 545
 * @locus Client                                                                                                      // 546
 * @param {Tracker.ComputationFunction} runFunc The function to run. It receives                                      // 547
 * one argument: the Computation object that will be returned.                                                        // 548
 * @param {Object} [options]                                                                                          // 549
 * @param {Function} options.onError Optional. The function to run when an error                                      // 550
 * happens in the Computation. The only argument it recieves is the Error                                             // 551
 * thrown. Defaults to the error being logged to the console.                                                         // 552
 * @returns {Tracker.Computation}                                                                                     // 553
 */                                                                                                                   // 554
Tracker.autorun = function (f, options) {                                                                             // 555
  if (typeof f !== 'function')                                                                                        // 556
    throw new Error('Tracker.autorun requires a function argument');                                                  // 557
                                                                                                                      // 558
  options = options || {};                                                                                            // 559
                                                                                                                      // 560
  constructingComputation = true;                                                                                     // 561
  var c = new Tracker.Computation(                                                                                    // 562
    f, Tracker.currentComputation, options.onError);                                                                  // 563
                                                                                                                      // 564
  if (Tracker.active)                                                                                                 // 565
    Tracker.onInvalidate(function () {                                                                                // 566
      c.stop();                                                                                                       // 567
    });                                                                                                               // 568
                                                                                                                      // 569
  return c;                                                                                                           // 570
};                                                                                                                    // 571
                                                                                                                      // 572
// http://docs.meteor.com/#tracker_nonreactive                                                                        // 573
//                                                                                                                    // 574
// Run `f` with no current computation, returning the return value                                                    // 575
// of `f`.  Used to turn off reactivity for the duration of `f`,                                                      // 576
// so that reactive data sources accessed by `f` will not result in any                                               // 577
// computations being invalidated.                                                                                    // 578
                                                                                                                      // 579
/**                                                                                                                   // 580
 * @summary Run a function without tracking dependencies.                                                             // 581
 * @locus Client                                                                                                      // 582
 * @param {Function} func A function to call immediately.                                                             // 583
 */                                                                                                                   // 584
Tracker.nonreactive = function (f) {                                                                                  // 585
  var previous = Tracker.currentComputation;                                                                          // 586
  setCurrentComputation(null);                                                                                        // 587
  try {                                                                                                               // 588
    return f();                                                                                                       // 589
  } finally {                                                                                                         // 590
    setCurrentComputation(previous);                                                                                  // 591
  }                                                                                                                   // 592
};                                                                                                                    // 593
                                                                                                                      // 594
// http://docs.meteor.com/#tracker_oninvalidate                                                                       // 595
                                                                                                                      // 596
/**                                                                                                                   // 597
 * @summary Registers a new [`onInvalidate`](#computation_oninvalidate) callback on the current computation (which must exist), to be called immediately when the current computation is invalidated or stopped.
 * @locus Client                                                                                                      // 599
 * @param {Function} callback A callback function that will be invoked as `func(c)`, where `c` is the computation on which the callback is registered.
 */                                                                                                                   // 601
Tracker.onInvalidate = function (f) {                                                                                 // 602
  if (! Tracker.active)                                                                                               // 603
    throw new Error("Tracker.onInvalidate requires a currentComputation");                                            // 604
                                                                                                                      // 605
  Tracker.currentComputation.onInvalidate(f);                                                                         // 606
};                                                                                                                    // 607
                                                                                                                      // 608
// http://docs.meteor.com/#tracker_afterflush                                                                         // 609
                                                                                                                      // 610
/**                                                                                                                   // 611
 * @summary Schedules a function to be called during the next flush, or later in the current flush if one is in progress, after all invalidated computations have been rerun.  The function will be run once and not on subsequent flushes unless `afterFlush` is called again.
 * @locus Client                                                                                                      // 613
 * @param {Function} callback A function to call at flush time.                                                       // 614
 */                                                                                                                   // 615
Tracker.afterFlush = function (f) {                                                                                   // 616
  afterFlushCallbacks.push(f);                                                                                        // 617
  requireFlush();                                                                                                     // 618
};                                                                                                                    // 619
                                                                                                                      // 620
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
// packages/tracker/deprecated.js                                                                                     //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                      //
// Deprecated functions.                                                                                              // 1
                                                                                                                      // 2
// These functions used to be on the Meteor object (and worked slightly                                               // 3
// differently).                                                                                                      // 4
// XXX COMPAT WITH 0.5.7                                                                                              // 5
Meteor.flush = Tracker.flush;                                                                                         // 6
Meteor.autorun = Tracker.autorun;                                                                                     // 7
                                                                                                                      // 8
// We used to require a special "autosubscribe" call to reactively subscribe to                                       // 9
// things. Now, it works with autorun.                                                                                // 10
// XXX COMPAT WITH 0.5.4                                                                                              // 11
Meteor.autosubscribe = Tracker.autorun;                                                                               // 12
                                                                                                                      // 13
// This Tracker API briefly existed in 0.5.8 and 0.5.9                                                                // 14
// XXX COMPAT WITH 0.5.9                                                                                              // 15
Tracker.depend = function (d) {                                                                                       // 16
  return d.depend();                                                                                                  // 17
};                                                                                                                    // 18
                                                                                                                      // 19
Deps = Tracker;                                                                                                       // 20
                                                                                                                      // 21
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.tracker = {
  Tracker: Tracker,
  Deps: Deps
};

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var _ = Package.underscore._;
var Random = Package.random.Random;

/* Package-scope variables */
var Retry;

(function(){

/////////////////////////////////////////////////////////////////////////////
//                                                                         //
// packages/retry/retry.js                                                 //
//                                                                         //
/////////////////////////////////////////////////////////////////////////////
                                                                           //
// Retry logic with an exponential backoff.                                // 1
//                                                                         // 2
// options:                                                                // 3
//  baseTimeout: time for initial reconnect attempt (ms).                  // 4
//  exponent: exponential factor to increase timeout each attempt.         // 5
//  maxTimeout: maximum time between retries (ms).                         // 6
//  minCount: how many times to reconnect "instantly".                     // 7
//  minTimeout: time to wait for the first `minCount` retries (ms).        // 8
//  fuzz: factor to randomize retry times by (to avoid retry storms).      // 9
                                                                           // 10
Retry = function (options) {                                               // 11
  var self = this;                                                         // 12
  _.extend(self, _.defaults(_.clone(options || {}), {                      // 13
    baseTimeout: 1000, // 1 second                                         // 14
    exponent: 2.2,                                                         // 15
    // The default is high-ish to ensure a server can recover from a       // 16
    // failure caused by load.                                             // 17
    maxTimeout: 5 * 60000, // 5 minutes                                    // 18
    minTimeout: 10,                                                        // 19
    minCount: 2,                                                           // 20
    fuzz: 0.5 // +- 25%                                                    // 21
  }));                                                                     // 22
  self.retryTimer = null;                                                  // 23
};                                                                         // 24
                                                                           // 25
_.extend(Retry.prototype, {                                                // 26
                                                                           // 27
  // Reset a pending retry, if any.                                        // 28
  clear: function () {                                                     // 29
    var self = this;                                                       // 30
    if (self.retryTimer)                                                   // 31
      clearTimeout(self.retryTimer);                                       // 32
    self.retryTimer = null;                                                // 33
  },                                                                       // 34
                                                                           // 35
  // Calculate how long to wait in milliseconds to retry, based on the     // 36
  // `count` of which retry this is.                                       // 37
  _timeout: function (count) {                                             // 38
    var self = this;                                                       // 39
                                                                           // 40
    if (count < self.minCount)                                             // 41
      return self.minTimeout;                                              // 42
                                                                           // 43
    var timeout = Math.min(                                                // 44
      self.maxTimeout,                                                     // 45
      self.baseTimeout * Math.pow(self.exponent, count));                  // 46
    // fuzz the timeout randomly, to avoid reconnect storms when a         // 47
    // server goes down.                                                   // 48
    timeout = timeout * ((Random.fraction() * self.fuzz) +                 // 49
                         (1 - self.fuzz/2));                               // 50
    return timeout;                                                        // 51
  },                                                                       // 52
                                                                           // 53
  // Call `fn` after a delay, based on the `count` of which retry this is.
  retryLater: function (count, fn) {                                       // 55
    var self = this;                                                       // 56
    var timeout = self._timeout(count);                                    // 57
    if (self.retryTimer)                                                   // 58
      clearTimeout(self.retryTimer);                                       // 59
    self.retryTimer = Meteor.setTimeout(fn, timeout);                      // 60
    return timeout;                                                        // 61
  }                                                                        // 62
                                                                           // 63
});                                                                        // 64
                                                                           // 65
/////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.retry = {
  Retry: Retry
};

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var _ = Package.underscore._;
var EJSON = Package.ejson.EJSON;

/* Package-scope variables */
var IdMap;

(function(){

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// packages/id-map/id-map.js                                                  //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
                                                                              //
IdMap = function (idStringify, idParse) {                                     // 1
  var self = this;                                                            // 2
  self._map = {};                                                             // 3
  self._idStringify = idStringify || JSON.stringify;                          // 4
  self._idParse = idParse || JSON.parse;                                      // 5
};                                                                            // 6
                                                                              // 7
// Some of these methods are designed to match methods on OrderedDict, since  // 8
// (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.
// (Conceivably, this should be replaced with "UnorderedDict" with a specific
// set of methods that overlap between the two.)                              // 11
                                                                              // 12
_.extend(IdMap.prototype, {                                                   // 13
  get: function (id) {                                                        // 14
    var self = this;                                                          // 15
    var key = self._idStringify(id);                                          // 16
    return self._map[key];                                                    // 17
  },                                                                          // 18
  set: function (id, value) {                                                 // 19
    var self = this;                                                          // 20
    var key = self._idStringify(id);                                          // 21
    self._map[key] = value;                                                   // 22
  },                                                                          // 23
  remove: function (id) {                                                     // 24
    var self = this;                                                          // 25
    var key = self._idStringify(id);                                          // 26
    delete self._map[key];                                                    // 27
  },                                                                          // 28
  has: function (id) {                                                        // 29
    var self = this;                                                          // 30
    var key = self._idStringify(id);                                          // 31
    return _.has(self._map, key);                                             // 32
  },                                                                          // 33
  empty: function () {                                                        // 34
    var self = this;                                                          // 35
    return _.isEmpty(self._map);                                              // 36
  },                                                                          // 37
  clear: function () {                                                        // 38
    var self = this;                                                          // 39
    self._map = {};                                                           // 40
  },                                                                          // 41
  // Iterates over the items in the map. Return `false` to break the loop.    // 42
  forEach: function (iterator) {                                              // 43
    var self = this;                                                          // 44
    // don't use _.each, because we can't break out of it.                    // 45
    var keys = _.keys(self._map);                                             // 46
    for (var i = 0; i < keys.length; i++) {                                   // 47
      var breakIfFalse = iterator.call(null, self._map[keys[i]],              // 48
                                       self._idParse(keys[i]));               // 49
      if (breakIfFalse === false)                                             // 50
        return;                                                               // 51
    }                                                                         // 52
  },                                                                          // 53
  size: function () {                                                         // 54
    var self = this;                                                          // 55
    return _.size(self._map);                                                 // 56
  },                                                                          // 57
  setDefault: function (id, def) {                                            // 58
    var self = this;                                                          // 59
    var key = self._idStringify(id);                                          // 60
    if (_.has(self._map, key))                                                // 61
      return self._map[key];                                                  // 62
    self._map[key] = def;                                                     // 63
    return def;                                                               // 64
  },                                                                          // 65
  // Assumes that values are EJSON-cloneable, and that we don't need to clone
  // IDs (ie, that nobody is going to mutate an ObjectId).                    // 67
  clone: function () {                                                        // 68
    var self = this;                                                          // 69
    var clone = new IdMap(self._idStringify, self._idParse);                  // 70
    self.forEach(function (value, id) {                                       // 71
      clone.set(id, EJSON.clone(value));                                      // 72
    });                                                                       // 73
    return clone;                                                             // 74
  }                                                                           // 75
});                                                                           // 76
                                                                              // 77
                                                                              // 78
////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['id-map'] = {
  IdMap: IdMap
};

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var _ = Package.underscore._;

/* Package-scope variables */
var OrderedDict;

(function(){

///////////////////////////////////////////////////////////////////////////////////
//                                                                               //
// packages/ordered-dict/ordered_dict.js                                         //
//                                                                               //
///////////////////////////////////////////////////////////////////////////////////
                                                                                 //
// This file defines an ordered dictionary abstraction that is useful for        // 1
// maintaining a dataset backed by observeChanges.  It supports ordering items   // 2
// by specifying the item they now come before.                                  // 3
                                                                                 // 4
// The implementation is a dictionary that contains nodes of a doubly-linked     // 5
// list as its values.                                                           // 6
                                                                                 // 7
// constructs a new element struct                                               // 8
// next and prev are whole elements, not keys.                                   // 9
var element = function (key, value, next, prev) {                                // 10
  return {                                                                       // 11
    key: key,                                                                    // 12
    value: value,                                                                // 13
    next: next,                                                                  // 14
    prev: prev                                                                   // 15
  };                                                                             // 16
};                                                                               // 17
OrderedDict = function (/* ... */) {                                             // 18
  var self = this;                                                               // 19
  self._dict = {};                                                               // 20
  self._first = null;                                                            // 21
  self._last = null;                                                             // 22
  self._size = 0;                                                                // 23
  var args = _.toArray(arguments);                                               // 24
  self._stringify = function (x) { return x; };                                  // 25
  if (typeof args[0] === 'function')                                             // 26
    self._stringify = args.shift();                                              // 27
  _.each(args, function (kv) {                                                   // 28
    self.putBefore(kv[0], kv[1], null);                                          // 29
  });                                                                            // 30
};                                                                               // 31
                                                                                 // 32
_.extend(OrderedDict.prototype, {                                                // 33
  // the "prefix keys with a space" thing comes from here                        // 34
  // https://github.com/documentcloud/underscore/issues/376#issuecomment-2815649
  _k: function (key) { return " " + this._stringify(key); },                     // 36
                                                                                 // 37
  empty: function () {                                                           // 38
    var self = this;                                                             // 39
    return !self._first;                                                         // 40
  },                                                                             // 41
  size: function () {                                                            // 42
    var self = this;                                                             // 43
    return self._size;                                                           // 44
  },                                                                             // 45
  _linkEltIn: function (elt) {                                                   // 46
    var self = this;                                                             // 47
    if (!elt.next) {                                                             // 48
      elt.prev = self._last;                                                     // 49
      if (self._last)                                                            // 50
        self._last.next = elt;                                                   // 51
      self._last = elt;                                                          // 52
    } else {                                                                     // 53
      elt.prev = elt.next.prev;                                                  // 54
      elt.next.prev = elt;                                                       // 55
      if (elt.prev)                                                              // 56
        elt.prev.next = elt;                                                     // 57
    }                                                                            // 58
    if (self._first === null || self._first === elt.next)                        // 59
      self._first = elt;                                                         // 60
  },                                                                             // 61
  _linkEltOut: function (elt) {                                                  // 62
    var self = this;                                                             // 63
    if (elt.next)                                                                // 64
      elt.next.prev = elt.prev;                                                  // 65
    if (elt.prev)                                                                // 66
      elt.prev.next = elt.next;                                                  // 67
    if (elt === self._last)                                                      // 68
      self._last = elt.prev;                                                     // 69
    if (elt === self._first)                                                     // 70
      self._first = elt.next;                                                    // 71
  },                                                                             // 72
  putBefore: function (key, item, before) {                                      // 73
    var self = this;                                                             // 74
    if (self._dict[self._k(key)])                                                // 75
      throw new Error("Item " + key + " already present in OrderedDict");        // 76
    var elt = before ?                                                           // 77
          element(key, item, self._dict[self._k(before)]) :                      // 78
          element(key, item, null);                                              // 79
    if (elt.next === undefined)                                                  // 80
      throw new Error("could not find item to put this one before");             // 81
    self._linkEltIn(elt);                                                        // 82
    self._dict[self._k(key)] = elt;                                              // 83
    self._size++;                                                                // 84
  },                                                                             // 85
  append: function (key, item) {                                                 // 86
    var self = this;                                                             // 87
    self.putBefore(key, item, null);                                             // 88
  },                                                                             // 89
  remove: function (key) {                                                       // 90
    var self = this;                                                             // 91
    var elt = self._dict[self._k(key)];                                          // 92
    if (elt === undefined)                                                       // 93
      throw new Error("Item " + key + " not present in OrderedDict");            // 94
    self._linkEltOut(elt);                                                       // 95
    self._size--;                                                                // 96
    delete self._dict[self._k(key)];                                             // 97
    return elt.value;                                                            // 98
  },                                                                             // 99
  get: function (key) {                                                          // 100
    var self = this;                                                             // 101
    if (self.has(key))                                                           // 102
        return self._dict[self._k(key)].value;                                   // 103
    return undefined;                                                            // 104
  },                                                                             // 105
  has: function (key) {                                                          // 106
    var self = this;                                                             // 107
    return _.has(self._dict, self._k(key));                                      // 108
  },                                                                             // 109
  // Iterate through the items in this dictionary in order, calling              // 110
  // iter(value, key, index) on each one.                                        // 111
                                                                                 // 112
  // Stops whenever iter returns OrderedDict.BREAK, or after the last element.   // 113
  forEach: function (iter) {                                                     // 114
    var self = this;                                                             // 115
    var i = 0;                                                                   // 116
    var elt = self._first;                                                       // 117
    while (elt !== null) {                                                       // 118
      var b = iter(elt.value, elt.key, i);                                       // 119
      if (b === OrderedDict.BREAK)                                               // 120
        return;                                                                  // 121
      elt = elt.next;                                                            // 122
      i++;                                                                       // 123
    }                                                                            // 124
  },                                                                             // 125
  first: function () {                                                           // 126
    var self = this;                                                             // 127
    if (self.empty())                                                            // 128
      return undefined;                                                          // 129
    return self._first.key;                                                      // 130
  },                                                                             // 131
  firstValue: function () {                                                      // 132
    var self = this;                                                             // 133
    if (self.empty())                                                            // 134
      return undefined;                                                          // 135
    return self._first.value;                                                    // 136
  },                                                                             // 137
  last: function () {                                                            // 138
    var self = this;                                                             // 139
    if (self.empty())                                                            // 140
      return undefined;                                                          // 141
    return self._last.key;                                                       // 142
  },                                                                             // 143
  lastValue: function () {                                                       // 144
    var self = this;                                                             // 145
    if (self.empty())                                                            // 146
      return undefined;                                                          // 147
    return self._last.value;                                                     // 148
  },                                                                             // 149
  prev: function (key) {                                                         // 150
    var self = this;                                                             // 151
    if (self.has(key)) {                                                         // 152
      var elt = self._dict[self._k(key)];                                        // 153
      if (elt.prev)                                                              // 154
        return elt.prev.key;                                                     // 155
    }                                                                            // 156
    return null;                                                                 // 157
  },                                                                             // 158
  next: function (key) {                                                         // 159
    var self = this;                                                             // 160
    if (self.has(key)) {                                                         // 161
      var elt = self._dict[self._k(key)];                                        // 162
      if (elt.next)                                                              // 163
        return elt.next.key;                                                     // 164
    }                                                                            // 165
    return null;                                                                 // 166
  },                                                                             // 167
  moveBefore: function (key, before) {                                           // 168
    var self = this;                                                             // 169
    var elt = self._dict[self._k(key)];                                          // 170
    var eltBefore = before ? self._dict[self._k(before)] : null;                 // 171
    if (elt === undefined)                                                       // 172
      throw new Error("Item to move is not present");                            // 173
    if (eltBefore === undefined) {                                               // 174
      throw new Error("Could not find element to move this one before");         // 175
    }                                                                            // 176
    if (eltBefore === elt.next) // no moving necessary                           // 177
      return;                                                                    // 178
    // remove from its old place                                                 // 179
    self._linkEltOut(elt);                                                       // 180
    // patch into its new place                                                  // 181
    elt.next = eltBefore;                                                        // 182
    self._linkEltIn(elt);                                                        // 183
  },                                                                             // 184
  // Linear, sadly.                                                              // 185
  indexOf: function (key) {                                                      // 186
    var self = this;                                                             // 187
    var ret = null;                                                              // 188
    self.forEach(function (v, k, i) {                                            // 189
      if (self._k(k) === self._k(key)) {                                         // 190
        ret = i;                                                                 // 191
        return OrderedDict.BREAK;                                                // 192
      }                                                                          // 193
      return undefined;                                                          // 194
    });                                                                          // 195
    return ret;                                                                  // 196
  },                                                                             // 197
  _checkRep: function () {                                                       // 198
    var self = this;                                                             // 199
    _.each(self._dict, function (k, v) {                                         // 200
      if (v.next === v)                                                          // 201
        throw new Error("Next is a loop");                                       // 202
      if (v.prev === v)                                                          // 203
        throw new Error("Prev is a loop");                                       // 204
    });                                                                          // 205
  }                                                                              // 206
                                                                                 // 207
});                                                                              // 208
OrderedDict.BREAK = {"break": true};                                             // 209
                                                                                 // 210
///////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['ordered-dict'] = {
  OrderedDict: OrderedDict
};

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

/* Package-scope variables */
var module, GeoJSON;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                         //
// packages/geojson-utils/pre.js                                                                           //
//                                                                                                         //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                           //
// Define an object named exports. This will cause geojson-utils.js to put `gju`                           // 1
// as a field on it, instead of in the global namespace.  See also post.js.                                // 2
module = {exports:{}};                                                                                     // 3
                                                                                                           // 4
                                                                                                           // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                         //
// packages/geojson-utils/geojson-utils.js                                                                 //
//                                                                                                         //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                           //
(function () {                                                                                             // 1
  var gju = {};                                                                                            // 2
                                                                                                           // 3
  // Export the geojson object for **CommonJS**                                                            // 4
  if (typeof module !== 'undefined' && module.exports) {                                                   // 5
    module.exports = gju;                                                                                  // 6
  }                                                                                                        // 7
                                                                                                           // 8
  // adapted from http://www.kevlindev.com/gui/math/intersection/Intersection.js                           // 9
  gju.lineStringsIntersect = function (l1, l2) {                                                           // 10
    var intersects = [];                                                                                   // 11
    for (var i = 0; i <= l1.coordinates.length - 2; ++i) {                                                 // 12
      for (var j = 0; j <= l2.coordinates.length - 2; ++j) {                                               // 13
        var a1 = {                                                                                         // 14
          x: l1.coordinates[i][1],                                                                         // 15
          y: l1.coordinates[i][0]                                                                          // 16
        },                                                                                                 // 17
          a2 = {                                                                                           // 18
            x: l1.coordinates[i + 1][1],                                                                   // 19
            y: l1.coordinates[i + 1][0]                                                                    // 20
          },                                                                                               // 21
          b1 = {                                                                                           // 22
            x: l2.coordinates[j][1],                                                                       // 23
            y: l2.coordinates[j][0]                                                                        // 24
          },                                                                                               // 25
          b2 = {                                                                                           // 26
            x: l2.coordinates[j + 1][1],                                                                   // 27
            y: l2.coordinates[j + 1][0]                                                                    // 28
          },                                                                                               // 29
          ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),                            // 30
          ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),                            // 31
          u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);                             // 32
        if (u_b != 0) {                                                                                    // 33
          var ua = ua_t / u_b,                                                                             // 34
            ub = ub_t / u_b;                                                                               // 35
          if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {                                                  // 36
            intersects.push({                                                                              // 37
              'type': 'Point',                                                                             // 38
              'coordinates': [a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)]                        // 39
            });                                                                                            // 40
          }                                                                                                // 41
        }                                                                                                  // 42
      }                                                                                                    // 43
    }                                                                                                      // 44
    if (intersects.length == 0) intersects = false;                                                        // 45
    return intersects;                                                                                     // 46
  }                                                                                                        // 47
                                                                                                           // 48
  // Bounding Box                                                                                          // 49
                                                                                                           // 50
  function boundingBoxAroundPolyCoords (coords) {                                                          // 51
    var xAll = [], yAll = []                                                                               // 52
                                                                                                           // 53
    for (var i = 0; i < coords[0].length; i++) {                                                           // 54
      xAll.push(coords[0][i][1])                                                                           // 55
      yAll.push(coords[0][i][0])                                                                           // 56
    }                                                                                                      // 57
                                                                                                           // 58
    xAll = xAll.sort(function (a,b) { return a - b })                                                      // 59
    yAll = yAll.sort(function (a,b) { return a - b })                                                      // 60
                                                                                                           // 61
    return [ [xAll[0], yAll[0]], [xAll[xAll.length - 1], yAll[yAll.length - 1]] ]                          // 62
  }                                                                                                        // 63
                                                                                                           // 64
  gju.pointInBoundingBox = function (point, bounds) {                                                      // 65
    return !(point.coordinates[1] < bounds[0][0] || point.coordinates[1] > bounds[1][0] || point.coordinates[0] < bounds[0][1] || point.coordinates[0] > bounds[1][1]) 
  }                                                                                                        // 67
                                                                                                           // 68
  // Point in Polygon                                                                                      // 69
  // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html#Listing the Vertices           // 70
                                                                                                           // 71
  function pnpoly (x,y,coords) {                                                                           // 72
    var vert = [ [0,0] ]                                                                                   // 73
                                                                                                           // 74
    for (var i = 0; i < coords.length; i++) {                                                              // 75
      for (var j = 0; j < coords[i].length; j++) {                                                         // 76
        vert.push(coords[i][j])                                                                            // 77
      }                                                                                                    // 78
      vert.push([0,0])                                                                                     // 79
    }                                                                                                      // 80
                                                                                                           // 81
    var inside = false                                                                                     // 82
    for (var i = 0, j = vert.length - 1; i < vert.length; j = i++) {                                       // 83
      if (((vert[i][0] > y) != (vert[j][0] > y)) && (x < (vert[j][1] - vert[i][1]) * (y - vert[i][0]) / (vert[j][0] - vert[i][0]) + vert[i][1])) inside = !inside
    }                                                                                                      // 85
                                                                                                           // 86
    return inside                                                                                          // 87
  }                                                                                                        // 88
                                                                                                           // 89
  gju.pointInPolygon = function (p, poly) {                                                                // 90
    var coords = (poly.type == "Polygon") ? [ poly.coordinates ] : poly.coordinates                        // 91
                                                                                                           // 92
    var insideBox = false                                                                                  // 93
    for (var i = 0; i < coords.length; i++) {                                                              // 94
      if (gju.pointInBoundingBox(p, boundingBoxAroundPolyCoords(coords[i]))) insideBox = true              // 95
    }                                                                                                      // 96
    if (!insideBox) return false                                                                           // 97
                                                                                                           // 98
    var insidePoly = false                                                                                 // 99
    for (var i = 0; i < coords.length; i++) {                                                              // 100
      if (pnpoly(p.coordinates[1], p.coordinates[0], coords[i])) insidePoly = true                         // 101
    }                                                                                                      // 102
                                                                                                           // 103
    return insidePoly                                                                                      // 104
  }                                                                                                        // 105
                                                                                                           // 106
  gju.numberToRadius = function (number) {                                                                 // 107
    return number * Math.PI / 180;                                                                         // 108
  }                                                                                                        // 109
                                                                                                           // 110
  gju.numberToDegree = function (number) {                                                                 // 111
    return number * 180 / Math.PI;                                                                         // 112
  }                                                                                                        // 113
                                                                                                           // 114
  // written with help from @tautologe                                                                     // 115
  gju.drawCircle = function (radiusInMeters, centerPoint, steps) {                                         // 116
    var center = [centerPoint.coordinates[1], centerPoint.coordinates[0]],                                 // 117
      dist = (radiusInMeters / 1000) / 6371,                                                               // 118
      // convert meters to radiant                                                                         // 119
      radCenter = [gju.numberToRadius(center[0]), gju.numberToRadius(center[1])],                          // 120
      steps = steps || 15,                                                                                 // 121
      // 15 sided circle                                                                                   // 122
      poly = [[center[0], center[1]]];                                                                     // 123
    for (var i = 0; i < steps; i++) {                                                                      // 124
      var brng = 2 * Math.PI * i / steps;                                                                  // 125
      var lat = Math.asin(Math.sin(radCenter[0]) * Math.cos(dist)                                          // 126
              + Math.cos(radCenter[0]) * Math.sin(dist) * Math.cos(brng));                                 // 127
      var lng = radCenter[1] + Math.atan2(Math.sin(brng) * Math.sin(dist) * Math.cos(radCenter[0]),        // 128
                                          Math.cos(dist) - Math.sin(radCenter[0]) * Math.sin(lat));        // 129
      poly[i] = [];                                                                                        // 130
      poly[i][1] = gju.numberToDegree(lat);                                                                // 131
      poly[i][0] = gju.numberToDegree(lng);                                                                // 132
    }                                                                                                      // 133
    return {                                                                                               // 134
      "type": "Polygon",                                                                                   // 135
      "coordinates": [poly]                                                                                // 136
    };                                                                                                     // 137
  }                                                                                                        // 138
                                                                                                           // 139
  // assumes rectangle starts at lower left point                                                          // 140
  gju.rectangleCentroid = function (rectangle) {                                                           // 141
    var bbox = rectangle.coordinates[0];                                                                   // 142
    var xmin = bbox[0][0],                                                                                 // 143
      ymin = bbox[0][1],                                                                                   // 144
      xmax = bbox[2][0],                                                                                   // 145
      ymax = bbox[2][1];                                                                                   // 146
    var xwidth = xmax - xmin;                                                                              // 147
    var ywidth = ymax - ymin;                                                                              // 148
    return {                                                                                               // 149
      'type': 'Point',                                                                                     // 150
      'coordinates': [xmin + xwidth / 2, ymin + ywidth / 2]                                                // 151
    };                                                                                                     // 152
  }                                                                                                        // 153
                                                                                                           // 154
  // from http://www.movable-type.co.uk/scripts/latlong.html                                               // 155
  gju.pointDistance = function (pt1, pt2) {                                                                // 156
    var lon1 = pt1.coordinates[0],                                                                         // 157
      lat1 = pt1.coordinates[1],                                                                           // 158
      lon2 = pt2.coordinates[0],                                                                           // 159
      lat2 = pt2.coordinates[1],                                                                           // 160
      dLat = gju.numberToRadius(lat2 - lat1),                                                              // 161
      dLon = gju.numberToRadius(lon2 - lon1),                                                              // 162
      a = Math.pow(Math.sin(dLat / 2), 2) + Math.cos(gju.numberToRadius(lat1))                             // 163
        * Math.cos(gju.numberToRadius(lat2)) * Math.pow(Math.sin(dLon / 2), 2),                            // 164
      c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));                                                  // 165
    // Earth radius is 6371 km                                                                             // 166
    return (6371 * c) * 1000; // returns meters                                                            // 167
  },                                                                                                       // 168
                                                                                                           // 169
  // checks if geometry lies entirely within a circle                                                      // 170
  // works with Point, LineString, Polygon                                                                 // 171
  gju.geometryWithinRadius = function (geometry, center, radius) {                                         // 172
    if (geometry.type == 'Point') {                                                                        // 173
      return gju.pointDistance(geometry, center) <= radius;                                                // 174
    } else if (geometry.type == 'LineString' || geometry.type == 'Polygon') {                              // 175
      var point = {};                                                                                      // 176
      var coordinates;                                                                                     // 177
      if (geometry.type == 'Polygon') {                                                                    // 178
        // it's enough to check the exterior ring of the Polygon                                           // 179
        coordinates = geometry.coordinates[0];                                                             // 180
      } else {                                                                                             // 181
        coordinates = geometry.coordinates;                                                                // 182
      }                                                                                                    // 183
      for (var i in coordinates) {                                                                         // 184
        point.coordinates = coordinates[i];                                                                // 185
        if (gju.pointDistance(point, center) > radius) {                                                   // 186
          return false;                                                                                    // 187
        }                                                                                                  // 188
      }                                                                                                    // 189
    }                                                                                                      // 190
    return true;                                                                                           // 191
  }                                                                                                        // 192
                                                                                                           // 193
  // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt                                   // 194
  gju.area = function (polygon) {                                                                          // 195
    var area = 0;                                                                                          // 196
    // TODO: polygon holes at coordinates[1]                                                               // 197
    var points = polygon.coordinates[0];                                                                   // 198
    var j = points.length - 1;                                                                             // 199
    var p1, p2;                                                                                            // 200
                                                                                                           // 201
    for (var i = 0; i < points.length; j = i++) {                                                          // 202
      var p1 = {                                                                                           // 203
        x: points[i][1],                                                                                   // 204
        y: points[i][0]                                                                                    // 205
      };                                                                                                   // 206
      var p2 = {                                                                                           // 207
        x: points[j][1],                                                                                   // 208
        y: points[j][0]                                                                                    // 209
      };                                                                                                   // 210
      area += p1.x * p2.y;                                                                                 // 211
      area -= p1.y * p2.x;                                                                                 // 212
    }                                                                                                      // 213
                                                                                                           // 214
    area /= 2;                                                                                             // 215
    return area;                                                                                           // 216
  },                                                                                                       // 217
                                                                                                           // 218
  // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt                                   // 219
  gju.centroid = function (polygon) {                                                                      // 220
    var f, x = 0,                                                                                          // 221
      y = 0;                                                                                               // 222
    // TODO: polygon holes at coordinates[1]                                                               // 223
    var points = polygon.coordinates[0];                                                                   // 224
    var j = points.length - 1;                                                                             // 225
    var p1, p2;                                                                                            // 226
                                                                                                           // 227
    for (var i = 0; i < points.length; j = i++) {                                                          // 228
      var p1 = {                                                                                           // 229
        x: points[i][1],                                                                                   // 230
        y: points[i][0]                                                                                    // 231
      };                                                                                                   // 232
      var p2 = {                                                                                           // 233
        x: points[j][1],                                                                                   // 234
        y: points[j][0]                                                                                    // 235
      };                                                                                                   // 236
      f = p1.x * p2.y - p2.x * p1.y;                                                                       // 237
      x += (p1.x + p2.x) * f;                                                                              // 238
      y += (p1.y + p2.y) * f;                                                                              // 239
    }                                                                                                      // 240
                                                                                                           // 241
    f = gju.area(polygon) * 6;                                                                             // 242
    return {                                                                                               // 243
      'type': 'Point',                                                                                     // 244
      'coordinates': [y / f, x / f]                                                                        // 245
    };                                                                                                     // 246
  },                                                                                                       // 247
                                                                                                           // 248
  gju.simplify = function (source, kink) { /* source[] array of geojson points */                          // 249
    /* kink	in metres, kinks above this depth kept  */                                                     // 250
    /* kink depth is the height of the triangle abc where a-b and b-c are two consecutive line segments */
    kink = kink || 20;                                                                                     // 252
    source = source.map(function (o) {                                                                     // 253
      return {                                                                                             // 254
        lng: o.coordinates[0],                                                                             // 255
        lat: o.coordinates[1]                                                                              // 256
      }                                                                                                    // 257
    });                                                                                                    // 258
                                                                                                           // 259
    var n_source, n_stack, n_dest, start, end, i, sig;                                                     // 260
    var dev_sqr, max_dev_sqr, band_sqr;                                                                    // 261
    var x12, y12, d12, x13, y13, d13, x23, y23, d23;                                                       // 262
    var F = (Math.PI / 180.0) * 0.5;                                                                       // 263
    var index = new Array(); /* aray of indexes of source points to include in the reduced line */         // 264
    var sig_start = new Array(); /* indices of start & end of working section */                           // 265
    var sig_end = new Array();                                                                             // 266
                                                                                                           // 267
    /* check for simple cases */                                                                           // 268
                                                                                                           // 269
    if (source.length < 3) return (source); /* one or two points */                                        // 270
                                                                                                           // 271
    /* more complex case. initialize stack */                                                              // 272
                                                                                                           // 273
    n_source = source.length;                                                                              // 274
    band_sqr = kink * 360.0 / (2.0 * Math.PI * 6378137.0); /* Now in degrees */                            // 275
    band_sqr *= band_sqr;                                                                                  // 276
    n_dest = 0;                                                                                            // 277
    sig_start[0] = 0;                                                                                      // 278
    sig_end[0] = n_source - 1;                                                                             // 279
    n_stack = 1;                                                                                           // 280
                                                                                                           // 281
    /* while the stack is not empty  ... */                                                                // 282
    while (n_stack > 0) {                                                                                  // 283
                                                                                                           // 284
      /* ... pop the top-most entries off the stacks */                                                    // 285
                                                                                                           // 286
      start = sig_start[n_stack - 1];                                                                      // 287
      end = sig_end[n_stack - 1];                                                                          // 288
      n_stack--;                                                                                           // 289
                                                                                                           // 290
      if ((end - start) > 1) { /* any intermediate points ? */                                             // 291
                                                                                                           // 292
        /* ... yes, so find most deviant intermediate point to                                             // 293
        either side of line joining start & end points */                                                  // 294
                                                                                                           // 295
        x12 = (source[end].lng() - source[start].lng());                                                   // 296
        y12 = (source[end].lat() - source[start].lat());                                                   // 297
        if (Math.abs(x12) > 180.0) x12 = 360.0 - Math.abs(x12);                                            // 298
        x12 *= Math.cos(F * (source[end].lat() + source[start].lat())); /* use avg lat to reduce lng */    // 299
        d12 = (x12 * x12) + (y12 * y12);                                                                   // 300
                                                                                                           // 301
        for (i = start + 1, sig = start, max_dev_sqr = -1.0; i < end; i++) {                               // 302
                                                                                                           // 303
          x13 = source[i].lng() - source[start].lng();                                                     // 304
          y13 = source[i].lat() - source[start].lat();                                                     // 305
          if (Math.abs(x13) > 180.0) x13 = 360.0 - Math.abs(x13);                                          // 306
          x13 *= Math.cos(F * (source[i].lat() + source[start].lat()));                                    // 307
          d13 = (x13 * x13) + (y13 * y13);                                                                 // 308
                                                                                                           // 309
          x23 = source[i].lng() - source[end].lng();                                                       // 310
          y23 = source[i].lat() - source[end].lat();                                                       // 311
          if (Math.abs(x23) > 180.0) x23 = 360.0 - Math.abs(x23);                                          // 312
          x23 *= Math.cos(F * (source[i].lat() + source[end].lat()));                                      // 313
          d23 = (x23 * x23) + (y23 * y23);                                                                 // 314
                                                                                                           // 315
          if (d13 >= (d12 + d23)) dev_sqr = d23;                                                           // 316
          else if (d23 >= (d12 + d13)) dev_sqr = d13;                                                      // 317
          else dev_sqr = (x13 * y12 - y13 * x12) * (x13 * y12 - y13 * x12) / d12; // solve triangle        // 318
          if (dev_sqr > max_dev_sqr) {                                                                     // 319
            sig = i;                                                                                       // 320
            max_dev_sqr = dev_sqr;                                                                         // 321
          }                                                                                                // 322
        }                                                                                                  // 323
                                                                                                           // 324
        if (max_dev_sqr < band_sqr) { /* is there a sig. intermediate point ? */                           // 325
          /* ... no, so transfer current start point */                                                    // 326
          index[n_dest] = start;                                                                           // 327
          n_dest++;                                                                                        // 328
        } else { /* ... yes, so push two sub-sections on stack for further processing */                   // 329
          n_stack++;                                                                                       // 330
          sig_start[n_stack - 1] = sig;                                                                    // 331
          sig_end[n_stack - 1] = end;                                                                      // 332
          n_stack++;                                                                                       // 333
          sig_start[n_stack - 1] = start;                                                                  // 334
          sig_end[n_stack - 1] = sig;                                                                      // 335
        }                                                                                                  // 336
      } else { /* ... no intermediate points, so transfer current start point */                           // 337
        index[n_dest] = start;                                                                             // 338
        n_dest++;                                                                                          // 339
      }                                                                                                    // 340
    }                                                                                                      // 341
                                                                                                           // 342
    /* transfer last point */                                                                              // 343
    index[n_dest] = n_source - 1;                                                                          // 344
    n_dest++;                                                                                              // 345
                                                                                                           // 346
    /* make return array */                                                                                // 347
    var r = new Array();                                                                                   // 348
    for (var i = 0; i < n_dest; i++)                                                                       // 349
      r.push(source[index[i]]);                                                                            // 350
                                                                                                           // 351
    return r.map(function (o) {                                                                            // 352
      return {                                                                                             // 353
        type: "Point",                                                                                     // 354
        coordinates: [o.lng, o.lat]                                                                        // 355
      }                                                                                                    // 356
    });                                                                                                    // 357
  }                                                                                                        // 358
                                                                                                           // 359
  // http://www.movable-type.co.uk/scripts/latlong.html#destPoint                                          // 360
  gju.destinationPoint = function (pt, brng, dist) {                                                       // 361
    dist = dist/6371;  // convert dist to angular distance in radians                                      // 362
    brng = gju.numberToRadius(brng);                                                                       // 363
                                                                                                           // 364
    var lat1 = gju.numberToRadius(pt.coordinates[0]);                                                      // 365
    var lon1 = gju.numberToRadius(pt.coordinates[1]);                                                      // 366
                                                                                                           // 367
    var lat2 = Math.asin( Math.sin(lat1)*Math.cos(dist) +                                                  // 368
                          Math.cos(lat1)*Math.sin(dist)*Math.cos(brng) );                                  // 369
    var lon2 = lon1 + Math.atan2(Math.sin(brng)*Math.sin(dist)*Math.cos(lat1),                             // 370
                                 Math.cos(dist)-Math.sin(lat1)*Math.sin(lat2));                            // 371
    lon2 = (lon2+3*Math.PI) % (2*Math.PI) - Math.PI;  // normalise to -180..+180º                          // 372
                                                                                                           // 373
    return {                                                                                               // 374
      'type': 'Point',                                                                                     // 375
      'coordinates': [gju.numberToDegree(lat2), gju.numberToDegree(lon2)]                                  // 376
    };                                                                                                     // 377
  };                                                                                                       // 378
                                                                                                           // 379
})();                                                                                                      // 380
                                                                                                           // 381
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                         //
// packages/geojson-utils/post.js                                                                          //
//                                                                                                         //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                           //
// This exports object was created in pre.js.  Now copy the `exports` object                               // 1
// from it into the package-scope variable `GeoJSON`, which will get exported.                             // 2
GeoJSON = module.exports;                                                                                  // 3
                                                                                                           // 4
                                                                                                           // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['geojson-utils'] = {
  GeoJSON: GeoJSON
};

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var _ = Package.underscore._;
var EJSON = Package.ejson.EJSON;

/* Package-scope variables */
var DiffSequence;

(function(){

/////////////////////////////////////////////////////////////////////////////////////
//                                                                                 //
// packages/diff-sequence/diff.js                                                  //
//                                                                                 //
/////////////////////////////////////////////////////////////////////////////////////
                                                                                   //
DiffSequence = {};                                                                 // 1
                                                                                   // 2
// ordered: bool.                                                                  // 3
// old_results and new_results: collections of documents.                          // 4
//    if ordered, they are arrays.                                                 // 5
//    if unordered, they are IdMaps                                                // 6
DiffSequence.diffQueryChanges = function (ordered, oldResults, newResults,         // 7
                                              observer, options) {                 // 8
  if (ordered)                                                                     // 9
    DiffSequence.diffQueryOrderedChanges(                                          // 10
      oldResults, newResults, observer, options);                                  // 11
  else                                                                             // 12
    DiffSequence.diffQueryUnorderedChanges(                                        // 13
      oldResults, newResults, observer, options);                                  // 14
};                                                                                 // 15
                                                                                   // 16
DiffSequence.diffQueryUnorderedChanges = function (oldResults, newResults,         // 17
                                                       observer, options) {        // 18
  options = options || {};                                                         // 19
  var projectionFn = options.projectionFn || EJSON.clone;                          // 20
                                                                                   // 21
  if (observer.movedBefore) {                                                      // 22
    throw new Error("_diffQueryUnordered called with a movedBefore observer!");    // 23
  }                                                                                // 24
                                                                                   // 25
  newResults.forEach(function (newDoc, id) {                                       // 26
    var oldDoc = oldResults.get(id);                                               // 27
    if (oldDoc) {                                                                  // 28
      if (observer.changed && !EJSON.equals(oldDoc, newDoc)) {                     // 29
        var projectedNew = projectionFn(newDoc);                                   // 30
        var projectedOld = projectionFn(oldDoc);                                   // 31
        var changedFields =                                                        // 32
              DiffSequence.makeChangedFields(projectedNew, projectedOld);          // 33
        if (! _.isEmpty(changedFields)) {                                          // 34
          observer.changed(id, changedFields);                                     // 35
        }                                                                          // 36
      }                                                                            // 37
    } else if (observer.added) {                                                   // 38
      var fields = projectionFn(newDoc);                                           // 39
      delete fields._id;                                                           // 40
      observer.added(newDoc._id, fields);                                          // 41
    }                                                                              // 42
  });                                                                              // 43
                                                                                   // 44
  if (observer.removed) {                                                          // 45
    oldResults.forEach(function (oldDoc, id) {                                     // 46
      if (!newResults.has(id))                                                     // 47
        observer.removed(id);                                                      // 48
    });                                                                            // 49
  }                                                                                // 50
};                                                                                 // 51
                                                                                   // 52
                                                                                   // 53
DiffSequence.diffQueryOrderedChanges = function (old_results, new_results,         // 54
                                                     observer, options) {          // 55
  options = options || {};                                                         // 56
  var projectionFn = options.projectionFn || EJSON.clone;                          // 57
                                                                                   // 58
  var new_presence_of_id = {};                                                     // 59
  _.each(new_results, function (doc) {                                             // 60
    if (new_presence_of_id[doc._id])                                               // 61
      Meteor._debug("Duplicate _id in new_results");                               // 62
    new_presence_of_id[doc._id] = true;                                            // 63
  });                                                                              // 64
                                                                                   // 65
  var old_index_of_id = {};                                                        // 66
  _.each(old_results, function (doc, i) {                                          // 67
    if (doc._id in old_index_of_id)                                                // 68
      Meteor._debug("Duplicate _id in old_results");                               // 69
    old_index_of_id[doc._id] = i;                                                  // 70
  });                                                                              // 71
                                                                                   // 72
  // ALGORITHM:                                                                    // 73
  //                                                                               // 74
  // To determine which docs should be considered "moved" (and which               // 75
  // merely change position because of other docs moving) we run                   // 76
  // a "longest common subsequence" (LCS) algorithm.  The LCS of the               // 77
  // old doc IDs and the new doc IDs gives the docs that should NOT be             // 78
  // considered moved.                                                             // 79
                                                                                   // 80
  // To actually call the appropriate callbacks to get from the old state to the   // 81
  // new state:                                                                    // 82
                                                                                   // 83
  // First, we call removed() on all the items that only appear in the old         // 84
  // state.                                                                        // 85
                                                                                   // 86
  // Then, once we have the items that should not move, we walk through the new    // 87
  // results array group-by-group, where a "group" is a set of items that have     // 88
  // moved, anchored on the end by an item that should not move.  One by one, we   // 89
  // move each of those elements into place "before" the anchoring end-of-group    // 90
  // item, and fire changed events on them if necessary.  Then we fire a changed   // 91
  // event on the anchor, and move on to the next group.  There is always at       // 92
  // least one group; the last group is anchored by a virtual "null" id at the     // 93
  // end.                                                                          // 94
                                                                                   // 95
  // Asymptotically: O(N k) where k is number of ops, or potentially               // 96
  // O(N log N) if inner loop of LCS were made to be binary search.                // 97
                                                                                   // 98
                                                                                   // 99
  //////// LCS (longest common sequence, with respect to _id)                      // 100
  // (see Wikipedia article on Longest Increasing Subsequence,                     // 101
  // where the LIS is taken of the sequence of old indices of the                  // 102
  // docs in new_results)                                                          // 103
  //                                                                               // 104
  // unmoved: the output of the algorithm; members of the LCS,                     // 105
  // in the form of indices into new_results                                       // 106
  var unmoved = [];                                                                // 107
  // max_seq_len: length of LCS found so far                                       // 108
  var max_seq_len = 0;                                                             // 109
  // seq_ends[i]: the index into new_results of the last doc in a                  // 110
  // common subsequence of length of i+1 <= max_seq_len                            // 111
  var N = new_results.length;                                                      // 112
  var seq_ends = new Array(N);                                                     // 113
  // ptrs:  the common subsequence ending with new_results[n] extends              // 114
  // a common subsequence ending with new_results[ptr[n]], unless                  // 115
  // ptr[n] is -1.                                                                 // 116
  var ptrs = new Array(N);                                                         // 117
  // virtual sequence of old indices of new results                                // 118
  var old_idx_seq = function(i_new) {                                              // 119
    return old_index_of_id[new_results[i_new]._id];                                // 120
  };                                                                               // 121
  // for each item in new_results, use it to extend a common subsequence           // 122
  // of length j <= max_seq_len                                                    // 123
  for(var i=0; i<N; i++) {                                                         // 124
    if (old_index_of_id[new_results[i]._id] !== undefined) {                       // 125
      var j = max_seq_len;                                                         // 126
      // this inner loop would traditionally be a binary search,                   // 127
      // but scanning backwards we will likely find a subseq to extend             // 128
      // pretty soon, bounded for example by the total number of ops.              // 129
      // If this were to be changed to a binary search, we'd still want            // 130
      // to scan backwards a bit as an optimization.                               // 131
      while (j > 0) {                                                              // 132
        if (old_idx_seq(seq_ends[j-1]) < old_idx_seq(i))                           // 133
          break;                                                                   // 134
        j--;                                                                       // 135
      }                                                                            // 136
                                                                                   // 137
      ptrs[i] = (j === 0 ? -1 : seq_ends[j-1]);                                    // 138
      seq_ends[j] = i;                                                             // 139
      if (j+1 > max_seq_len)                                                       // 140
        max_seq_len = j+1;                                                         // 141
    }                                                                              // 142
  }                                                                                // 143
                                                                                   // 144
  // pull out the LCS/LIS into unmoved                                             // 145
  var idx = (max_seq_len === 0 ? -1 : seq_ends[max_seq_len-1]);                    // 146
  while (idx >= 0) {                                                               // 147
    unmoved.push(idx);                                                             // 148
    idx = ptrs[idx];                                                               // 149
  }                                                                                // 150
  // the unmoved item list is built backwards, so fix that                         // 151
  unmoved.reverse();                                                               // 152
                                                                                   // 153
  // the last group is always anchored by the end of the result list, which is     // 154
  // an id of "null"                                                               // 155
  unmoved.push(new_results.length);                                                // 156
                                                                                   // 157
  _.each(old_results, function (doc) {                                             // 158
    if (!new_presence_of_id[doc._id])                                              // 159
      observer.removed && observer.removed(doc._id);                               // 160
  });                                                                              // 161
  // for each group of things in the new_results that is anchored by an unmoved    // 162
  // element, iterate through the things before it.                                // 163
  var startOfGroup = 0;                                                            // 164
  _.each(unmoved, function (endOfGroup) {                                          // 165
    var groupId = new_results[endOfGroup] ? new_results[endOfGroup]._id : null;    // 166
    var oldDoc, newDoc, fields, projectedNew, projectedOld;                        // 167
    for (var i = startOfGroup; i < endOfGroup; i++) {                              // 168
      newDoc = new_results[i];                                                     // 169
      if (!_.has(old_index_of_id, newDoc._id)) {                                   // 170
        fields = projectionFn(newDoc);                                             // 171
        delete fields._id;                                                         // 172
        observer.addedBefore && observer.addedBefore(newDoc._id, fields, groupId);
        observer.added && observer.added(newDoc._id, fields);                      // 174
      } else {                                                                     // 175
        // moved                                                                   // 176
        oldDoc = old_results[old_index_of_id[newDoc._id]];                         // 177
        projectedNew = projectionFn(newDoc);                                       // 178
        projectedOld = projectionFn(oldDoc);                                       // 179
        fields = DiffSequence.makeChangedFields(projectedNew, projectedOld);       // 180
        if (!_.isEmpty(fields)) {                                                  // 181
          observer.changed && observer.changed(newDoc._id, fields);                // 182
        }                                                                          // 183
        observer.movedBefore && observer.movedBefore(newDoc._id, groupId);         // 184
      }                                                                            // 185
    }                                                                              // 186
    if (groupId) {                                                                 // 187
      newDoc = new_results[endOfGroup];                                            // 188
      oldDoc = old_results[old_index_of_id[newDoc._id]];                           // 189
      projectedNew = projectionFn(newDoc);                                         // 190
      projectedOld = projectionFn(oldDoc);                                         // 191
      fields = DiffSequence.makeChangedFields(projectedNew, projectedOld);         // 192
      if (!_.isEmpty(fields)) {                                                    // 193
        observer.changed && observer.changed(newDoc._id, fields);                  // 194
      }                                                                            // 195
    }                                                                              // 196
    startOfGroup = endOfGroup+1;                                                   // 197
  });                                                                              // 198
                                                                                   // 199
                                                                                   // 200
};                                                                                 // 201
                                                                                   // 202
                                                                                   // 203
// General helper for diff-ing two objects.                                        // 204
// callbacks is an object like so:                                                 // 205
// { leftOnly: function (key, leftValue) {...},                                    // 206
//   rightOnly: function (key, rightValue) {...},                                  // 207
//   both: function (key, leftValue, rightValue) {...},                            // 208
// }                                                                               // 209
DiffSequence.diffObjects = function (left, right, callbacks) {                     // 210
  _.each(left, function (leftValue, key) {                                         // 211
    if (_.has(right, key))                                                         // 212
      callbacks.both && callbacks.both(key, leftValue, right[key]);                // 213
    else                                                                           // 214
      callbacks.leftOnly && callbacks.leftOnly(key, leftValue);                    // 215
  });                                                                              // 216
  if (callbacks.rightOnly) {                                                       // 217
    _.each(right, function(rightValue, key) {                                      // 218
      if (!_.has(left, key))                                                       // 219
        callbacks.rightOnly(key, rightValue);                                      // 220
    });                                                                            // 221
  }                                                                                // 222
};                                                                                 // 223
                                                                                   // 224
                                                                                   // 225
DiffSequence.makeChangedFields = function (newDoc, oldDoc) {                       // 226
  var fields = {};                                                                 // 227
  DiffSequence.diffObjects(oldDoc, newDoc, {                                       // 228
    leftOnly: function (key, value) {                                              // 229
      fields[key] = undefined;                                                     // 230
    },                                                                             // 231
    rightOnly: function (key, value) {                                             // 232
      fields[key] = value;                                                         // 233
    },                                                                             // 234
    both: function (key, leftValue, rightValue) {                                  // 235
      if (!EJSON.equals(leftValue, rightValue))                                    // 236
        fields[key] = rightValue;                                                  // 237
    }                                                                              // 238
  });                                                                              // 239
  return fields;                                                                   // 240
};                                                                                 // 241
                                                                                   // 242
DiffSequence.applyChanges = function (doc, changeFields) {                         // 243
  _.each(changeFields, function (value, key) {                                     // 244
    if (value === undefined)                                                       // 245
      delete doc[key];                                                             // 246
    else                                                                           // 247
      doc[key] = value;                                                            // 248
  });                                                                              // 249
};                                                                                 // 250
                                                                                   // 251
                                                                                   // 252
/////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['diff-sequence'] = {
  DiffSequence: DiffSequence
};

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var EJSON = Package.ejson.EJSON;
var IdMap = Package['id-map'].IdMap;
var Random = Package.random.Random;

/* Package-scope variables */
var MongoID;

(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                    //
// packages/mongo-id/id.js                                                                            //
//                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                      //
MongoID = {};                                                                                         // 1
                                                                                                      // 2
MongoID._looksLikeObjectID = function (str) {                                                         // 3
  return str.length === 24 && str.match(/^[0-9a-f]*$/);                                               // 4
};                                                                                                    // 5
                                                                                                      // 6
MongoID.ObjectID = function (hexString) {                                                             // 7
  //random-based impl of Mongo ObjectID                                                               // 8
  var self = this;                                                                                    // 9
  if (hexString) {                                                                                    // 10
    hexString = hexString.toLowerCase();                                                              // 11
    if (!MongoID._looksLikeObjectID(hexString)) {                                                     // 12
      throw new Error("Invalid hexadecimal string for creating an ObjectID");                         // 13
    }                                                                                                 // 14
    // meant to work with _.isEqual(), which relies on structural equality                            // 15
    self._str = hexString;                                                                            // 16
  } else {                                                                                            // 17
    self._str = Random.hexString(24);                                                                 // 18
  }                                                                                                   // 19
};                                                                                                    // 20
                                                                                                      // 21
MongoID.ObjectID.prototype.toString = function () {                                                   // 22
  var self = this;                                                                                    // 23
  return "ObjectID(\"" + self._str + "\")";                                                           // 24
};                                                                                                    // 25
                                                                                                      // 26
MongoID.ObjectID.prototype.equals = function (other) {                                                // 27
  var self = this;                                                                                    // 28
  return other instanceof MongoID.ObjectID &&                                                         // 29
    self.valueOf() === other.valueOf();                                                               // 30
};                                                                                                    // 31
                                                                                                      // 32
MongoID.ObjectID.prototype.clone = function () {                                                      // 33
  var self = this;                                                                                    // 34
  return new MongoID.ObjectID(self._str);                                                             // 35
};                                                                                                    // 36
                                                                                                      // 37
MongoID.ObjectID.prototype.typeName = function() {                                                    // 38
  return "oid";                                                                                       // 39
};                                                                                                    // 40
                                                                                                      // 41
MongoID.ObjectID.prototype.getTimestamp = function() {                                                // 42
  var self = this;                                                                                    // 43
  return parseInt(self._str.substr(0, 8), 16);                                                        // 44
};                                                                                                    // 45
                                                                                                      // 46
MongoID.ObjectID.prototype.valueOf =                                                                  // 47
    MongoID.ObjectID.prototype.toJSONValue =                                                          // 48
    MongoID.ObjectID.prototype.toHexString =                                                          // 49
    function () { return this._str; };                                                                // 50
                                                                                                      // 51
EJSON.addType("oid",  function (str) {                                                                // 52
  return new MongoID.ObjectID(str);                                                                   // 53
});                                                                                                   // 54
                                                                                                      // 55
MongoID.idStringify = function (id) {                                                                 // 56
  if (id instanceof MongoID.ObjectID) {                                                               // 57
    return id.valueOf();                                                                              // 58
  } else if (typeof id === 'string') {                                                                // 59
    if (id === "") {                                                                                  // 60
      return id;                                                                                      // 61
    } else if (id.substr(0, 1) === "-" || // escape previously dashed strings                         // 62
               id.substr(0, 1) === "~" || // escape escaped numbers, true, false                      // 63
               MongoID._looksLikeObjectID(id) || // escape object-id-form strings                     // 64
               id.substr(0, 1) === '{') { // escape object-form strings, for maybe implementing later
      return "-" + id;                                                                                // 66
    } else {                                                                                          // 67
      return id; // other strings go through unchanged.                                               // 68
    }                                                                                                 // 69
  } else if (id === undefined) {                                                                      // 70
    return '-';                                                                                       // 71
  } else if (typeof id === 'object' && id !== null) {                                                 // 72
    throw new Error("Meteor does not currently support objects other than ObjectID as ids");          // 73
  } else { // Numbers, true, false, null                                                              // 74
    return "~" + JSON.stringify(id);                                                                  // 75
  }                                                                                                   // 76
};                                                                                                    // 77
                                                                                                      // 78
                                                                                                      // 79
MongoID.idParse = function (id) {                                                                     // 80
  if (id === "") {                                                                                    // 81
    return id;                                                                                        // 82
  } else if (id === '-') {                                                                            // 83
    return undefined;                                                                                 // 84
  } else if (id.substr(0, 1) === '-') {                                                               // 85
    return id.substr(1);                                                                              // 86
  } else if (id.substr(0, 1) === '~') {                                                               // 87
    return JSON.parse(id.substr(1));                                                                  // 88
  } else if (MongoID._looksLikeObjectID(id)) {                                                        // 89
    return new MongoID.ObjectID(id);                                                                  // 90
  } else {                                                                                            // 91
    return id;                                                                                        // 92
  }                                                                                                   // 93
};                                                                                                    // 94
                                                                                                      // 95
                                                                                                      // 96
////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['mongo-id'] = {
  MongoID: MongoID
};

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var _ = Package.underscore._;
var EJSON = Package.ejson.EJSON;
var IdMap = Package['id-map'].IdMap;
var OrderedDict = Package['ordered-dict'].OrderedDict;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var MongoID = Package['mongo-id'].MongoID;
var Random = Package.random.Random;
var DiffSequence = Package['diff-sequence'].DiffSequence;
var GeoJSON = Package['geojson-utils'].GeoJSON;

/* Package-scope variables */
var LocalCollection, Minimongo, MinimongoTest, MinimongoError, isArray, isPlainObject, isIndexable, isOperatorObject, isNumericKey, regexpElementMatcher, equalityElementMatcher, ELEMENT_OPERATORS, makeLookupFunction, expandArraysInBranches, projectionDetails, pathsToTree;

(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                            //
// packages/minimongo/minimongo.js                                                                            //
//                                                                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                              //
// XXX type checking on selectors (graceful error if malformed)                                               // 1
                                                                                                              // 2
// LocalCollection: a set of documents that supports queries and modifiers.                                   // 3
                                                                                                              // 4
// Cursor: a specification for a particular subset of documents, w/                                           // 5
// a defined order, limit, and offset.  creating a Cursor with LocalCollection.find(),                        // 6
                                                                                                              // 7
// ObserveHandle: the return value of a live query.                                                           // 8
                                                                                                              // 9
LocalCollection = function (name) {                                                                           // 10
  var self = this;                                                                                            // 11
  self.name = name;                                                                                           // 12
  // _id -> document (also containing id)                                                                     // 13
  self._docs = new LocalCollection._IdMap;                                                                    // 14
                                                                                                              // 15
  self._observeQueue = new Meteor._SynchronousQueue();                                                        // 16
                                                                                                              // 17
  self.next_qid = 1; // live query id generator                                                               // 18
                                                                                                              // 19
  // qid -> live query object. keys:                                                                          // 20
  //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.                                  // 21
  //  results: array (ordered) or object (unordered) of current results                                       // 22
  //    (aliased with self._docs!)                                                                            // 23
  //  resultsSnapshot: snapshot of results. null if not paused.                                               // 24
  //  cursor: Cursor object for the query.                                                                    // 25
  //  selector, sorter, (callbacks): functions                                                                // 26
  self.queries = {};                                                                                          // 27
                                                                                                              // 28
  // null if not saving originals; an IdMap from id to original document value if                             // 29
  // saving originals. See comments before saveOriginals().                                                   // 30
  self._savedOriginals = null;                                                                                // 31
                                                                                                              // 32
  // True when observers are paused and we should not send callbacks.                                         // 33
  self.paused = false;                                                                                        // 34
};                                                                                                            // 35
                                                                                                              // 36
Minimongo = {};                                                                                               // 37
                                                                                                              // 38
// Object exported only for unit testing.                                                                     // 39
// Use it to export private functions to test in Tinytest.                                                    // 40
MinimongoTest = {};                                                                                           // 41
                                                                                                              // 42
MinimongoError = function (message) {                                                                         // 43
  var e = new Error(message);                                                                                 // 44
  e.name = "MinimongoError";                                                                                  // 45
  return e;                                                                                                   // 46
};                                                                                                            // 47
                                                                                                              // 48
                                                                                                              // 49
// options may include sort, skip, limit, reactive                                                            // 50
// sort may be any of these forms:                                                                            // 51
//     {a: 1, b: -1}                                                                                          // 52
//     [["a", "asc"], ["b", "desc"]]                                                                          // 53
//     ["a", ["b", "desc"]]                                                                                   // 54
//   (in the first form you're beholden to key enumeration order in                                           // 55
//   your javascript VM)                                                                                      // 56
//                                                                                                            // 57
// reactive: if given, and false, don't register with Tracker (default                                        // 58
// is true)                                                                                                   // 59
//                                                                                                            // 60
// XXX possibly should support retrieving a subset of fields? and                                             // 61
// have it be a hint (ignored on the client, when not copying the                                             // 62
// doc?)                                                                                                      // 63
//                                                                                                            // 64
// XXX sort does not yet support subkeys ('a.b') .. fix that!                                                 // 65
// XXX add one more sort form: "key"                                                                          // 66
// XXX tests                                                                                                  // 67
LocalCollection.prototype.find = function (selector, options) {                                               // 68
  // default syntax for everything is to omit the selector argument.                                          // 69
  // but if selector is explicitly passed in as false or undefined, we                                        // 70
  // want a selector that matches nothing.                                                                    // 71
  if (arguments.length === 0)                                                                                 // 72
    selector = {};                                                                                            // 73
                                                                                                              // 74
  return new LocalCollection.Cursor(this, selector, options);                                                 // 75
};                                                                                                            // 76
                                                                                                              // 77
// don't call this ctor directly.  use LocalCollection.find().                                                // 78
                                                                                                              // 79
LocalCollection.Cursor = function (collection, selector, options) {                                           // 80
  var self = this;                                                                                            // 81
  if (!options) options = {};                                                                                 // 82
                                                                                                              // 83
  self.collection = collection;                                                                               // 84
  self.sorter = null;                                                                                         // 85
  self.matcher = new Minimongo.Matcher(selector);                                                             // 86
                                                                                                              // 87
  if (LocalCollection._selectorIsId(selector)) {                                                              // 88
    // stash for fast path                                                                                    // 89
    self._selectorId = selector;                                                                              // 90
  } else if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {                                        // 91
    // also do the fast path for { _id: idString }                                                            // 92
    self._selectorId = selector._id;                                                                          // 93
  } else {                                                                                                    // 94
    self._selectorId = undefined;                                                                             // 95
    if (self.matcher.hasGeoQuery() || options.sort) {                                                         // 96
      self.sorter = new Minimongo.Sorter(options.sort || [],                                                  // 97
                                         { matcher: self.matcher });                                          // 98
    }                                                                                                         // 99
  }                                                                                                           // 100
                                                                                                              // 101
  self.skip = options.skip;                                                                                   // 102
  self.limit = options.limit;                                                                                 // 103
  self.fields = options.fields;                                                                               // 104
                                                                                                              // 105
  self._projectionFn = LocalCollection._compileProjection(self.fields || {});                                 // 106
                                                                                                              // 107
  self._transform = LocalCollection.wrapTransform(options.transform);                                         // 108
                                                                                                              // 109
  // by default, queries register w/ Tracker when it is available.                                            // 110
  if (typeof Tracker !== "undefined")                                                                         // 111
    self.reactive = (options.reactive === undefined) ? true : options.reactive;                               // 112
};                                                                                                            // 113
                                                                                                              // 114
// Since we don't actually have a "nextObject" interface, there's really no                                   // 115
// reason to have a "rewind" interface.  All it did was make multiple calls                                   // 116
// to fetch/map/forEach return nothing the second time.                                                       // 117
// XXX COMPAT WITH 0.8.1                                                                                      // 118
LocalCollection.Cursor.prototype.rewind = function () {                                                       // 119
};                                                                                                            // 120
                                                                                                              // 121
LocalCollection.prototype.findOne = function (selector, options) {                                            // 122
  if (arguments.length === 0)                                                                                 // 123
    selector = {};                                                                                            // 124
                                                                                                              // 125
  // NOTE: by setting limit 1 here, we end up using very inefficient                                          // 126
  // code that recomputes the whole query on each update. The upside is                                       // 127
  // that when you reactively depend on a findOne you only get                                                // 128
  // invalidated when the found object changes, not any object in the                                         // 129
  // collection. Most findOne will be by id, which has a fast path, so                                        // 130
  // this might not be a big deal. In most cases, invalidation causes                                         // 131
  // the called to re-query anyway, so this should be a net performance                                       // 132
  // improvement.                                                                                             // 133
  options = options || {};                                                                                    // 134
  options.limit = 1;                                                                                          // 135
                                                                                                              // 136
  return this.find(selector, options).fetch()[0];                                                             // 137
};                                                                                                            // 138
                                                                                                              // 139
/**                                                                                                           // 140
 * @callback IterationCallback                                                                                // 141
 * @param {Object} doc                                                                                        // 142
 * @param {Number} index                                                                                      // 143
 */                                                                                                           // 144
/**                                                                                                           // 145
 * @summary Call `callback` once for each matching document, sequentially and synchronously.                  // 146
 * @locus Anywhere                                                                                            // 147
 * @method  forEach                                                                                           // 148
 * @instance                                                                                                  // 149
 * @memberOf Mongo.Cursor                                                                                     // 150
 * @param {IterationCallback} callback Function to call. It will be called with three arguments: the document, a 0-based index, and <em>cursor</em> itself.
 * @param {Any} [thisArg] An object which will be the value of `this` inside `callback`.                      // 152
 */                                                                                                           // 153
LocalCollection.Cursor.prototype.forEach = function (callback, thisArg) {                                     // 154
  var self = this;                                                                                            // 155
                                                                                                              // 156
  var objects = self._getRawObjects({ordered: true});                                                         // 157
                                                                                                              // 158
  if (self.reactive) {                                                                                        // 159
    self._depend({                                                                                            // 160
      addedBefore: true,                                                                                      // 161
      removed: true,                                                                                          // 162
      changed: true,                                                                                          // 163
      movedBefore: true});                                                                                    // 164
  }                                                                                                           // 165
                                                                                                              // 166
  _.each(objects, function (elt, i) {                                                                         // 167
    // This doubles as a clone operation.                                                                     // 168
    elt = self._projectionFn(elt);                                                                            // 169
                                                                                                              // 170
    if (self._transform)                                                                                      // 171
      elt = self._transform(elt);                                                                             // 172
    callback.call(thisArg, elt, i, self);                                                                     // 173
  });                                                                                                         // 174
};                                                                                                            // 175
                                                                                                              // 176
LocalCollection.Cursor.prototype.getTransform = function () {                                                 // 177
  return this._transform;                                                                                     // 178
};                                                                                                            // 179
                                                                                                              // 180
/**                                                                                                           // 181
 * @summary Map callback over all matching documents.  Returns an Array.                                      // 182
 * @locus Anywhere                                                                                            // 183
 * @method map                                                                                                // 184
 * @instance                                                                                                  // 185
 * @memberOf Mongo.Cursor                                                                                     // 186
 * @param {IterationCallback} callback Function to call. It will be called with three arguments: the document, a 0-based index, and <em>cursor</em> itself.
 * @param {Any} [thisArg] An object which will be the value of `this` inside `callback`.                      // 188
 */                                                                                                           // 189
LocalCollection.Cursor.prototype.map = function (callback, thisArg) {                                         // 190
  var self = this;                                                                                            // 191
  var res = [];                                                                                               // 192
  self.forEach(function (doc, index) {                                                                        // 193
    res.push(callback.call(thisArg, doc, index, self));                                                       // 194
  });                                                                                                         // 195
  return res;                                                                                                 // 196
};                                                                                                            // 197
                                                                                                              // 198
/**                                                                                                           // 199
 * @summary Return all matching documents as an Array.                                                        // 200
 * @memberOf Mongo.Cursor                                                                                     // 201
 * @method  fetch                                                                                             // 202
 * @instance                                                                                                  // 203
 * @locus Anywhere                                                                                            // 204
 * @returns {Object[]}                                                                                        // 205
 */                                                                                                           // 206
LocalCollection.Cursor.prototype.fetch = function () {                                                        // 207
  var self = this;                                                                                            // 208
  var res = [];                                                                                               // 209
  self.forEach(function (doc) {                                                                               // 210
    res.push(doc);                                                                                            // 211
  });                                                                                                         // 212
  return res;                                                                                                 // 213
};                                                                                                            // 214
                                                                                                              // 215
/**                                                                                                           // 216
 * @summary Returns the number of documents that match a query.                                               // 217
 * @memberOf Mongo.Cursor                                                                                     // 218
 * @method  count                                                                                             // 219
 * @instance                                                                                                  // 220
 * @locus Anywhere                                                                                            // 221
 * @returns {Number}                                                                                          // 222
 */                                                                                                           // 223
LocalCollection.Cursor.prototype.count = function () {                                                        // 224
  var self = this;                                                                                            // 225
                                                                                                              // 226
  if (self.reactive)                                                                                          // 227
    self._depend({added: true, removed: true},                                                                // 228
                 true /* allow the observe to be unordered */);                                               // 229
                                                                                                              // 230
  return self._getRawObjects({ordered: true}).length;                                                         // 231
};                                                                                                            // 232
                                                                                                              // 233
LocalCollection.Cursor.prototype._publishCursor = function (sub) {                                            // 234
  var self = this;                                                                                            // 235
  if (! self.collection.name)                                                                                 // 236
    throw new Error("Can't publish a cursor from a collection without a name.");                              // 237
  var collection = self.collection.name;                                                                      // 238
                                                                                                              // 239
  // XXX minimongo should not depend on mongo-livedata!                                                       // 240
  if (! Package.mongo) {                                                                                      // 241
    throw new Error("Can't publish from Minimongo without the `mongo` package.");                             // 242
  }                                                                                                           // 243
                                                                                                              // 244
  return Package.mongo.Mongo.Collection._publishCursor(self, sub, collection);                                // 245
};                                                                                                            // 246
                                                                                                              // 247
LocalCollection.Cursor.prototype._getCollectionName = function () {                                           // 248
  var self = this;                                                                                            // 249
  return self.collection.name;                                                                                // 250
};                                                                                                            // 251
                                                                                                              // 252
LocalCollection._observeChangesCallbacksAreOrdered = function (callbacks) {                                   // 253
  if (callbacks.added && callbacks.addedBefore)                                                               // 254
    throw new Error("Please specify only one of added() and addedBefore()");                                  // 255
  return !!(callbacks.addedBefore || callbacks.movedBefore);                                                  // 256
};                                                                                                            // 257
                                                                                                              // 258
LocalCollection._observeCallbacksAreOrdered = function (callbacks) {                                          // 259
  if (callbacks.addedAt && callbacks.added)                                                                   // 260
    throw new Error("Please specify only one of added() and addedAt()");                                      // 261
  if (callbacks.changedAt && callbacks.changed)                                                               // 262
    throw new Error("Please specify only one of changed() and changedAt()");                                  // 263
  if (callbacks.removed && callbacks.removedAt)                                                               // 264
    throw new Error("Please specify only one of removed() and removedAt()");                                  // 265
                                                                                                              // 266
  return !!(callbacks.addedAt || callbacks.movedTo || callbacks.changedAt                                     // 267
            || callbacks.removedAt);                                                                          // 268
};                                                                                                            // 269
                                                                                                              // 270
// the handle that comes back from observe.                                                                   // 271
LocalCollection.ObserveHandle = function () {};                                                               // 272
                                                                                                              // 273
// options to contain:                                                                                        // 274
//  * callbacks for observe():                                                                                // 275
//    - addedAt (document, atIndex)                                                                           // 276
//    - added (document)                                                                                      // 277
//    - changedAt (newDocument, oldDocument, atIndex)                                                         // 278
//    - changed (newDocument, oldDocument)                                                                    // 279
//    - removedAt (document, atIndex)                                                                         // 280
//    - removed (document)                                                                                    // 281
//    - movedTo (document, oldIndex, newIndex)                                                                // 282
//                                                                                                            // 283
// attributes available on returned query handle:                                                             // 284
//  * stop(): end updates                                                                                     // 285
//  * collection: the collection this query is querying                                                       // 286
//                                                                                                            // 287
// iff x is a returned query handle, (x instanceof                                                            // 288
// LocalCollection.ObserveHandle) is true                                                                     // 289
//                                                                                                            // 290
// initial results delivered through added callback                                                           // 291
// XXX maybe callbacks should take a list of objects, to expose transactions?                                 // 292
// XXX maybe support field limiting (to limit what you're notified on)                                        // 293
                                                                                                              // 294
_.extend(LocalCollection.Cursor.prototype, {                                                                  // 295
  /**                                                                                                         // 296
   * @summary Watch a query.  Receive callbacks as the result set changes.                                    // 297
   * @locus Anywhere                                                                                          // 298
   * @memberOf Mongo.Cursor                                                                                   // 299
   * @instance                                                                                                // 300
   * @param {Object} callbacks Functions to call to deliver the result set as it changes                      // 301
   */                                                                                                         // 302
  observe: function (options) {                                                                               // 303
    var self = this;                                                                                          // 304
    return LocalCollection._observeFromObserveChanges(self, options);                                         // 305
  },                                                                                                          // 306
                                                                                                              // 307
  /**                                                                                                         // 308
   * @summary Watch a query.  Receive callbacks as the result set changes.  Only the differences between the old and new documents are passed to the callbacks.
   * @locus Anywhere                                                                                          // 310
   * @memberOf Mongo.Cursor                                                                                   // 311
   * @instance                                                                                                // 312
   * @param {Object} callbacks Functions to call to deliver the result set as it changes                      // 313
   */                                                                                                         // 314
  observeChanges: function (options) {                                                                        // 315
    var self = this;                                                                                          // 316
                                                                                                              // 317
    var ordered = LocalCollection._observeChangesCallbacksAreOrdered(options);                                // 318
                                                                                                              // 319
    // there are several places that assume you aren't combining skip/limit with                              // 320
    // unordered observe.  eg, update's EJSON.clone, and the "there are several"                              // 321
    // comment in _modifyAndNotify                                                                            // 322
    // XXX allow skip/limit with unordered observe                                                            // 323
    if (!options._allow_unordered && !ordered && (self.skip || self.limit))                                   // 324
      throw new Error("must use ordered observe (ie, 'addedBefore' instead of 'added') with skip or limit");  // 325
                                                                                                              // 326
    if (self.fields && (self.fields._id === 0 || self.fields._id === false))                                  // 327
      throw Error("You may not observe a cursor with {fields: {_id: 0}}");                                    // 328
                                                                                                              // 329
    var query = {                                                                                             // 330
      matcher: self.matcher, // not fast pathed                                                               // 331
      sorter: ordered && self.sorter,                                                                         // 332
      distances: (                                                                                            // 333
        self.matcher.hasGeoQuery() && ordered && new LocalCollection._IdMap),                                 // 334
      resultsSnapshot: null,                                                                                  // 335
      ordered: ordered,                                                                                       // 336
      cursor: self,                                                                                           // 337
      projectionFn: self._projectionFn                                                                        // 338
    };                                                                                                        // 339
    var qid;                                                                                                  // 340
                                                                                                              // 341
    // Non-reactive queries call added[Before] and then never call anything                                   // 342
    // else.                                                                                                  // 343
    if (self.reactive) {                                                                                      // 344
      qid = self.collection.next_qid++;                                                                       // 345
      self.collection.queries[qid] = query;                                                                   // 346
    }                                                                                                         // 347
    query.results = self._getRawObjects({                                                                     // 348
      ordered: ordered, distances: query.distances});                                                         // 349
    if (self.collection.paused)                                                                               // 350
      query.resultsSnapshot = (ordered ? [] : new LocalCollection._IdMap);                                    // 351
                                                                                                              // 352
    // wrap callbacks we were passed. callbacks only fire when not paused and                                 // 353
    // are never undefined                                                                                    // 354
    // Filters out blacklisted fields according to cursor's projection.                                       // 355
    // XXX wrong place for this?                                                                              // 356
                                                                                                              // 357
    // furthermore, callbacks enqueue until the operation we're working on is                                 // 358
    // done.                                                                                                  // 359
    var wrapCallback = function (f) {                                                                         // 360
      if (!f)                                                                                                 // 361
        return function () {};                                                                                // 362
      return function (/*args*/) {                                                                            // 363
        var context = this;                                                                                   // 364
        var args = arguments;                                                                                 // 365
                                                                                                              // 366
        if (self.collection.paused)                                                                           // 367
          return;                                                                                             // 368
                                                                                                              // 369
        self.collection._observeQueue.queueTask(function () {                                                 // 370
          f.apply(context, args);                                                                             // 371
        });                                                                                                   // 372
      };                                                                                                      // 373
    };                                                                                                        // 374
    query.added = wrapCallback(options.added);                                                                // 375
    query.changed = wrapCallback(options.changed);                                                            // 376
    query.removed = wrapCallback(options.removed);                                                            // 377
    if (ordered) {                                                                                            // 378
      query.addedBefore = wrapCallback(options.addedBefore);                                                  // 379
      query.movedBefore = wrapCallback(options.movedBefore);                                                  // 380
    }                                                                                                         // 381
                                                                                                              // 382
    if (!options._suppress_initial && !self.collection.paused) {                                              // 383
      // XXX unify ordered and unordered interface                                                            // 384
      var each = ordered                                                                                      // 385
            ? _.bind(_.each, null, query.results)                                                             // 386
            : _.bind(query.results.forEach, query.results);                                                   // 387
      each(function (doc) {                                                                                   // 388
        var fields = EJSON.clone(doc);                                                                        // 389
                                                                                                              // 390
        delete fields._id;                                                                                    // 391
        if (ordered)                                                                                          // 392
          query.addedBefore(doc._id, self._projectionFn(fields), null);                                       // 393
        query.added(doc._id, self._projectionFn(fields));                                                     // 394
      });                                                                                                     // 395
    }                                                                                                         // 396
                                                                                                              // 397
    var handle = new LocalCollection.ObserveHandle;                                                           // 398
    _.extend(handle, {                                                                                        // 399
      collection: self.collection,                                                                            // 400
      stop: function () {                                                                                     // 401
        if (self.reactive)                                                                                    // 402
          delete self.collection.queries[qid];                                                                // 403
      }                                                                                                       // 404
    });                                                                                                       // 405
                                                                                                              // 406
    if (self.reactive && Tracker.active) {                                                                    // 407
      // XXX in many cases, the same observe will be recreated when                                           // 408
      // the current autorun is rerun.  we could save work by                                                 // 409
      // letting it linger across rerun and potentially get                                                   // 410
      // repurposed if the same observe is performed, using logic                                             // 411
      // similar to that of Meteor.subscribe.                                                                 // 412
      Tracker.onInvalidate(function () {                                                                      // 413
        handle.stop();                                                                                        // 414
      });                                                                                                     // 415
    }                                                                                                         // 416
    // run the observe callbacks resulting from the initial contents                                          // 417
    // before we leave the observe.                                                                           // 418
    self.collection._observeQueue.drain();                                                                    // 419
                                                                                                              // 420
    return handle;                                                                                            // 421
  }                                                                                                           // 422
});                                                                                                           // 423
                                                                                                              // 424
// Returns a collection of matching objects, but doesn't deep copy them.                                      // 425
//                                                                                                            // 426
// If ordered is set, returns a sorted array, respecting sorter, skip, and limit                              // 427
// properties of the query.  if sorter is falsey, no sort -- you get the natural                              // 428
// order.                                                                                                     // 429
//                                                                                                            // 430
// If ordered is not set, returns an object mapping from ID to doc (sorter, skip                              // 431
// and limit should not be set).                                                                              // 432
//                                                                                                            // 433
// If ordered is set and this cursor is a $near geoquery, then this function                                  // 434
// will use an _IdMap to track each distance from the $near argument point in                                 // 435
// order to use it as a sort key. If an _IdMap is passed in the 'distances'                                   // 436
// argument, this function will clear it and use it for this purpose (otherwise                               // 437
// it will just create its own _IdMap). The observeChanges implementation uses                                // 438
// this to remember the distances after this function returns.                                                // 439
LocalCollection.Cursor.prototype._getRawObjects = function (options) {                                        // 440
  var self = this;                                                                                            // 441
  options = options || {};                                                                                    // 442
                                                                                                              // 443
  // XXX use OrderedDict instead of array, and make IdMap and OrderedDict                                     // 444
  // compatible                                                                                               // 445
  var results = options.ordered ? [] : new LocalCollection._IdMap;                                            // 446
                                                                                                              // 447
  // fast path for single ID value                                                                            // 448
  if (self._selectorId !== undefined) {                                                                       // 449
    // If you have non-zero skip and ask for a single id, you get                                             // 450
    // nothing. This is so it matches the behavior of the '{_id: foo}'                                        // 451
    // path.                                                                                                  // 452
    if (self.skip)                                                                                            // 453
      return results;                                                                                         // 454
                                                                                                              // 455
    var selectedDoc = self.collection._docs.get(self._selectorId);                                            // 456
    if (selectedDoc) {                                                                                        // 457
      if (options.ordered)                                                                                    // 458
        results.push(selectedDoc);                                                                            // 459
      else                                                                                                    // 460
        results.set(self._selectorId, selectedDoc);                                                           // 461
    }                                                                                                         // 462
    return results;                                                                                           // 463
  }                                                                                                           // 464
                                                                                                              // 465
  // slow path for arbitrary selector, sort, skip, limit                                                      // 466
                                                                                                              // 467
  // in the observeChanges case, distances is actually part of the "query" (ie,                               // 468
  // live results set) object.  in other cases, distances is only used inside                                 // 469
  // this function.                                                                                           // 470
  var distances;                                                                                              // 471
  if (self.matcher.hasGeoQuery() && options.ordered) {                                                        // 472
    if (options.distances) {                                                                                  // 473
      distances = options.distances;                                                                          // 474
      distances.clear();                                                                                      // 475
    } else {                                                                                                  // 476
      distances = new LocalCollection._IdMap();                                                               // 477
    }                                                                                                         // 478
  }                                                                                                           // 479
                                                                                                              // 480
  self.collection._docs.forEach(function (doc, id) {                                                          // 481
    var matchResult = self.matcher.documentMatches(doc);                                                      // 482
    if (matchResult.result) {                                                                                 // 483
      if (options.ordered) {                                                                                  // 484
        results.push(doc);                                                                                    // 485
        if (distances && matchResult.distance !== undefined)                                                  // 486
          distances.set(id, matchResult.distance);                                                            // 487
      } else {                                                                                                // 488
        results.set(id, doc);                                                                                 // 489
      }                                                                                                       // 490
    }                                                                                                         // 491
    // Fast path for limited unsorted queries.                                                                // 492
    // XXX 'length' check here seems wrong for ordered                                                        // 493
    if (self.limit && !self.skip && !self.sorter &&                                                           // 494
        results.length === self.limit)                                                                        // 495
      return false;  // break                                                                                 // 496
    return true;  // continue                                                                                 // 497
  });                                                                                                         // 498
                                                                                                              // 499
  if (!options.ordered)                                                                                       // 500
    return results;                                                                                           // 501
                                                                                                              // 502
  if (self.sorter) {                                                                                          // 503
    var comparator = self.sorter.getComparator({distances: distances});                                       // 504
    results.sort(comparator);                                                                                 // 505
  }                                                                                                           // 506
                                                                                                              // 507
  var idx_start = self.skip || 0;                                                                             // 508
  var idx_end = self.limit ? (self.limit + idx_start) : results.length;                                       // 509
  return results.slice(idx_start, idx_end);                                                                   // 510
};                                                                                                            // 511
                                                                                                              // 512
// XXX Maybe we need a version of observe that just calls a callback if                                       // 513
// anything changed.                                                                                          // 514
LocalCollection.Cursor.prototype._depend = function (changers, _allow_unordered) {                            // 515
  var self = this;                                                                                            // 516
                                                                                                              // 517
  if (Tracker.active) {                                                                                       // 518
    var v = new Tracker.Dependency;                                                                           // 519
    v.depend();                                                                                               // 520
    var notifyChange = _.bind(v.changed, v);                                                                  // 521
                                                                                                              // 522
    var options = {                                                                                           // 523
      _suppress_initial: true,                                                                                // 524
      _allow_unordered: _allow_unordered                                                                      // 525
    };                                                                                                        // 526
    _.each(['added', 'changed', 'removed', 'addedBefore', 'movedBefore'],                                     // 527
           function (fnName) {                                                                                // 528
             if (changers[fnName])                                                                            // 529
               options[fnName] = notifyChange;                                                                // 530
           });                                                                                                // 531
                                                                                                              // 532
    // observeChanges will stop() when this computation is invalidated                                        // 533
    self.observeChanges(options);                                                                             // 534
  }                                                                                                           // 535
};                                                                                                            // 536
                                                                                                              // 537
// XXX enforce rule that field names can't start with '$' or contain '.'                                      // 538
// (real mongodb does in fact enforce this)                                                                   // 539
// XXX possibly enforce that 'undefined' does not appear (we assume                                           // 540
// this in our handling of null and $exists)                                                                  // 541
LocalCollection.prototype.insert = function (doc, callback) {                                                 // 542
  var self = this;                                                                                            // 543
  doc = EJSON.clone(doc);                                                                                     // 544
                                                                                                              // 545
  if (!_.has(doc, '_id')) {                                                                                   // 546
    // if you really want to use ObjectIDs, set this global.                                                  // 547
    // Mongo.Collection specifies its own ids and does not use this code.                                     // 548
    doc._id = LocalCollection._useOID ? new MongoID.ObjectID()                                                // 549
                                      : Random.id();                                                          // 550
  }                                                                                                           // 551
  var id = doc._id;                                                                                           // 552
                                                                                                              // 553
  if (self._docs.has(id))                                                                                     // 554
    throw MinimongoError("Duplicate _id '" + id + "'");                                                       // 555
                                                                                                              // 556
  self._saveOriginal(id, undefined);                                                                          // 557
  self._docs.set(id, doc);                                                                                    // 558
                                                                                                              // 559
  var queriesToRecompute = [];                                                                                // 560
  // trigger live queries that match                                                                          // 561
  for (var qid in self.queries) {                                                                             // 562
    var query = self.queries[qid];                                                                            // 563
    var matchResult = query.matcher.documentMatches(doc);                                                     // 564
    if (matchResult.result) {                                                                                 // 565
      if (query.distances && matchResult.distance !== undefined)                                              // 566
        query.distances.set(id, matchResult.distance);                                                        // 567
      if (query.cursor.skip || query.cursor.limit)                                                            // 568
        queriesToRecompute.push(qid);                                                                         // 569
      else                                                                                                    // 570
        LocalCollection._insertInResults(query, doc);                                                         // 571
    }                                                                                                         // 572
  }                                                                                                           // 573
                                                                                                              // 574
  _.each(queriesToRecompute, function (qid) {                                                                 // 575
    if (self.queries[qid])                                                                                    // 576
      self._recomputeResults(self.queries[qid]);                                                              // 577
  });                                                                                                         // 578
  self._observeQueue.drain();                                                                                 // 579
                                                                                                              // 580
  // Defer because the caller likely doesn't expect the callback to be run                                    // 581
  // immediately.                                                                                             // 582
  if (callback)                                                                                               // 583
    Meteor.defer(function () {                                                                                // 584
      callback(null, id);                                                                                     // 585
    });                                                                                                       // 586
  return id;                                                                                                  // 587
};                                                                                                            // 588
                                                                                                              // 589
// Iterates over a subset of documents that could match selector; calls                                       // 590
// f(doc, id) on each of them.  Specifically, if selector specifies                                           // 591
// specific _id's, it only looks at those.  doc is *not* cloned: it is the                                    // 592
// same object that is in _docs.                                                                              // 593
LocalCollection.prototype._eachPossiblyMatchingDoc = function (selector, f) {                                 // 594
  var self = this;                                                                                            // 595
  var specificIds = LocalCollection._idsMatchedBySelector(selector);                                          // 596
  if (specificIds) {                                                                                          // 597
    for (var i = 0; i < specificIds.length; ++i) {                                                            // 598
      var id = specificIds[i];                                                                                // 599
      var doc = self._docs.get(id);                                                                           // 600
      if (doc) {                                                                                              // 601
        var breakIfFalse = f(doc, id);                                                                        // 602
        if (breakIfFalse === false)                                                                           // 603
          break;                                                                                              // 604
      }                                                                                                       // 605
    }                                                                                                         // 606
  } else {                                                                                                    // 607
    self._docs.forEach(f);                                                                                    // 608
  }                                                                                                           // 609
};                                                                                                            // 610
                                                                                                              // 611
LocalCollection.prototype.remove = function (selector, callback) {                                            // 612
  var self = this;                                                                                            // 613
                                                                                                              // 614
  // Easy special case: if we're not calling observeChanges callbacks and we're                               // 615
  // not saving originals and we got asked to remove everything, then just empty                              // 616
  // everything directly.                                                                                     // 617
  if (self.paused && !self._savedOriginals && EJSON.equals(selector, {})) {                                   // 618
    var result = self._docs.size();                                                                           // 619
    self._docs.clear();                                                                                       // 620
    _.each(self.queries, function (query) {                                                                   // 621
      if (query.ordered) {                                                                                    // 622
        query.results = [];                                                                                   // 623
      } else {                                                                                                // 624
        query.results.clear();                                                                                // 625
      }                                                                                                       // 626
    });                                                                                                       // 627
    if (callback) {                                                                                           // 628
      Meteor.defer(function () {                                                                              // 629
        callback(null, result);                                                                               // 630
      });                                                                                                     // 631
    }                                                                                                         // 632
    return result;                                                                                            // 633
  }                                                                                                           // 634
                                                                                                              // 635
  var matcher = new Minimongo.Matcher(selector);                                                              // 636
  var remove = [];                                                                                            // 637
  self._eachPossiblyMatchingDoc(selector, function (doc, id) {                                                // 638
    if (matcher.documentMatches(doc).result)                                                                  // 639
      remove.push(id);                                                                                        // 640
  });                                                                                                         // 641
                                                                                                              // 642
  var queriesToRecompute = [];                                                                                // 643
  var queryRemove = [];                                                                                       // 644
  for (var i = 0; i < remove.length; i++) {                                                                   // 645
    var removeId = remove[i];                                                                                 // 646
    var removeDoc = self._docs.get(removeId);                                                                 // 647
    _.each(self.queries, function (query, qid) {                                                              // 648
      if (query.matcher.documentMatches(removeDoc).result) {                                                  // 649
        if (query.cursor.skip || query.cursor.limit)                                                          // 650
          queriesToRecompute.push(qid);                                                                       // 651
        else                                                                                                  // 652
          queryRemove.push({qid: qid, doc: removeDoc});                                                       // 653
      }                                                                                                       // 654
    });                                                                                                       // 655
    self._saveOriginal(removeId, removeDoc);                                                                  // 656
    self._docs.remove(removeId);                                                                              // 657
  }                                                                                                           // 658
                                                                                                              // 659
  // run live query callbacks _after_ we've removed the documents.                                            // 660
  _.each(queryRemove, function (remove) {                                                                     // 661
    var query = self.queries[remove.qid];                                                                     // 662
    if (query) {                                                                                              // 663
      query.distances && query.distances.remove(remove.doc._id);                                              // 664
      LocalCollection._removeFromResults(query, remove.doc);                                                  // 665
    }                                                                                                         // 666
  });                                                                                                         // 667
  _.each(queriesToRecompute, function (qid) {                                                                 // 668
    var query = self.queries[qid];                                                                            // 669
    if (query)                                                                                                // 670
      self._recomputeResults(query);                                                                          // 671
  });                                                                                                         // 672
  self._observeQueue.drain();                                                                                 // 673
  result = remove.length;                                                                                     // 674
  if (callback)                                                                                               // 675
    Meteor.defer(function () {                                                                                // 676
      callback(null, result);                                                                                 // 677
    });                                                                                                       // 678
  return result;                                                                                              // 679
};                                                                                                            // 680
                                                                                                              // 681
// XXX atomicity: if multi is true, and one modification fails, do                                            // 682
// we rollback the whole operation, or what?                                                                  // 683
LocalCollection.prototype.update = function (selector, mod, options, callback) {                              // 684
  var self = this;                                                                                            // 685
  if (! callback && options instanceof Function) {                                                            // 686
    callback = options;                                                                                       // 687
    options = null;                                                                                           // 688
  }                                                                                                           // 689
  if (!options) options = {};                                                                                 // 690
                                                                                                              // 691
  var matcher = new Minimongo.Matcher(selector);                                                              // 692
                                                                                                              // 693
  // Save the original results of any query that we might need to                                             // 694
  // _recomputeResults on, because _modifyAndNotify will mutate the objects in                                // 695
  // it. (We don't need to save the original results of paused queries because                                // 696
  // they already have a resultsSnapshot and we won't be diffing in                                           // 697
  // _recomputeResults.)                                                                                      // 698
  var qidToOriginalResults = {};                                                                              // 699
  _.each(self.queries, function (query, qid) {                                                                // 700
    // XXX for now, skip/limit implies ordered observe, so query.results is                                   // 701
    // always an array                                                                                        // 702
    if ((query.cursor.skip || query.cursor.limit) && ! self.paused)                                           // 703
      qidToOriginalResults[qid] = EJSON.clone(query.results);                                                 // 704
  });                                                                                                         // 705
  var recomputeQids = {};                                                                                     // 706
                                                                                                              // 707
  var updateCount = 0;                                                                                        // 708
                                                                                                              // 709
  self._eachPossiblyMatchingDoc(selector, function (doc, id) {                                                // 710
    var queryResult = matcher.documentMatches(doc);                                                           // 711
    if (queryResult.result) {                                                                                 // 712
      // XXX Should we save the original even if mod ends up being a no-op?                                   // 713
      self._saveOriginal(id, doc);                                                                            // 714
      self._modifyAndNotify(doc, mod, recomputeQids, queryResult.arrayIndices);                               // 715
      ++updateCount;                                                                                          // 716
      if (!options.multi)                                                                                     // 717
        return false;  // break                                                                               // 718
    }                                                                                                         // 719
    return true;                                                                                              // 720
  });                                                                                                         // 721
                                                                                                              // 722
  _.each(recomputeQids, function (dummy, qid) {                                                               // 723
    var query = self.queries[qid];                                                                            // 724
    if (query)                                                                                                // 725
      self._recomputeResults(query, qidToOriginalResults[qid]);                                               // 726
  });                                                                                                         // 727
  self._observeQueue.drain();                                                                                 // 728
                                                                                                              // 729
  // If we are doing an upsert, and we didn't modify any documents yet, then                                  // 730
  // it's time to do an insert. Figure out what document we are inserting, and                                // 731
  // generate an id for it.                                                                                   // 732
  var insertedId;                                                                                             // 733
  if (updateCount === 0 && options.upsert) {                                                                  // 734
    var newDoc = LocalCollection._removeDollarOperators(selector);                                            // 735
    LocalCollection._modify(newDoc, mod, {isInsert: true});                                                   // 736
    if (! newDoc._id && options.insertedId)                                                                   // 737
      newDoc._id = options.insertedId;                                                                        // 738
    insertedId = self.insert(newDoc);                                                                         // 739
    updateCount = 1;                                                                                          // 740
  }                                                                                                           // 741
                                                                                                              // 742
  // Return the number of affected documents, or in the upsert case, an object                                // 743
  // containing the number of affected docs and the id of the doc that was                                    // 744
  // inserted, if any.                                                                                        // 745
  var result;                                                                                                 // 746
  if (options._returnObject) {                                                                                // 747
    result = {                                                                                                // 748
      numberAffected: updateCount                                                                             // 749
    };                                                                                                        // 750
    if (insertedId !== undefined)                                                                             // 751
      result.insertedId = insertedId;                                                                         // 752
  } else {                                                                                                    // 753
    result = updateCount;                                                                                     // 754
  }                                                                                                           // 755
                                                                                                              // 756
  if (callback)                                                                                               // 757
    Meteor.defer(function () {                                                                                // 758
      callback(null, result);                                                                                 // 759
    });                                                                                                       // 760
  return result;                                                                                              // 761
};                                                                                                            // 762
                                                                                                              // 763
// A convenience wrapper on update. LocalCollection.upsert(sel, mod) is                                       // 764
// equivalent to LocalCollection.update(sel, mod, { upsert: true, _returnObject:                              // 765
// true }).                                                                                                   // 766
LocalCollection.prototype.upsert = function (selector, mod, options, callback) {                              // 767
  var self = this;                                                                                            // 768
  if (! callback && typeof options === "function") {                                                          // 769
    callback = options;                                                                                       // 770
    options = {};                                                                                             // 771
  }                                                                                                           // 772
  return self.update(selector, mod, _.extend({}, options, {                                                   // 773
    upsert: true,                                                                                             // 774
    _returnObject: true                                                                                       // 775
  }), callback);                                                                                              // 776
};                                                                                                            // 777
                                                                                                              // 778
LocalCollection.prototype._modifyAndNotify = function (                                                       // 779
    doc, mod, recomputeQids, arrayIndices) {                                                                  // 780
  var self = this;                                                                                            // 781
                                                                                                              // 782
  var matched_before = {};                                                                                    // 783
  for (var qid in self.queries) {                                                                             // 784
    var query = self.queries[qid];                                                                            // 785
    if (query.ordered) {                                                                                      // 786
      matched_before[qid] = query.matcher.documentMatches(doc).result;                                        // 787
    } else {                                                                                                  // 788
      // Because we don't support skip or limit (yet) in unordered queries, we                                // 789
      // can just do a direct lookup.                                                                         // 790
      matched_before[qid] = query.results.has(doc._id);                                                       // 791
    }                                                                                                         // 792
  }                                                                                                           // 793
                                                                                                              // 794
  var old_doc = EJSON.clone(doc);                                                                             // 795
                                                                                                              // 796
  LocalCollection._modify(doc, mod, {arrayIndices: arrayIndices});                                            // 797
                                                                                                              // 798
  for (qid in self.queries) {                                                                                 // 799
    query = self.queries[qid];                                                                                // 800
    var before = matched_before[qid];                                                                         // 801
    var afterMatch = query.matcher.documentMatches(doc);                                                      // 802
    var after = afterMatch.result;                                                                            // 803
    if (after && query.distances && afterMatch.distance !== undefined)                                        // 804
      query.distances.set(doc._id, afterMatch.distance);                                                      // 805
                                                                                                              // 806
    if (query.cursor.skip || query.cursor.limit) {                                                            // 807
      // We need to recompute any query where the doc may have been in the                                    // 808
      // cursor's window either before or after the update. (Note that if skip                                // 809
      // or limit is set, "before" and "after" being true do not necessarily                                  // 810
      // mean that the document is in the cursor's output after skip/limit is                                 // 811
      // applied... but if they are false, then the document definitely is NOT                                // 812
      // in the output. So it's safe to skip recompute if neither before or                                   // 813
      // after are true.)                                                                                     // 814
      if (before || after)                                                                                    // 815
        recomputeQids[qid] = true;                                                                            // 816
    } else if (before && !after) {                                                                            // 817
      LocalCollection._removeFromResults(query, doc);                                                         // 818
    } else if (!before && after) {                                                                            // 819
      LocalCollection._insertInResults(query, doc);                                                           // 820
    } else if (before && after) {                                                                             // 821
      LocalCollection._updateInResults(query, doc, old_doc);                                                  // 822
    }                                                                                                         // 823
  }                                                                                                           // 824
};                                                                                                            // 825
                                                                                                              // 826
// XXX the sorted-query logic below is laughably inefficient. we'll                                           // 827
// need to come up with a better datastructure for this.                                                      // 828
//                                                                                                            // 829
// XXX the logic for observing with a skip or a limit is even more                                            // 830
// laughably inefficient. we recompute the whole results every time!                                          // 831
                                                                                                              // 832
LocalCollection._insertInResults = function (query, doc) {                                                    // 833
  var fields = EJSON.clone(doc);                                                                              // 834
  delete fields._id;                                                                                          // 835
  if (query.ordered) {                                                                                        // 836
    if (!query.sorter) {                                                                                      // 837
      query.addedBefore(doc._id, query.projectionFn(fields), null);                                           // 838
      query.results.push(doc);                                                                                // 839
    } else {                                                                                                  // 840
      var i = LocalCollection._insertInSortedList(                                                            // 841
        query.sorter.getComparator({distances: query.distances}),                                             // 842
        query.results, doc);                                                                                  // 843
      var next = query.results[i+1];                                                                          // 844
      if (next)                                                                                               // 845
        next = next._id;                                                                                      // 846
      else                                                                                                    // 847
        next = null;                                                                                          // 848
      query.addedBefore(doc._id, query.projectionFn(fields), next);                                           // 849
    }                                                                                                         // 850
    query.added(doc._id, query.projectionFn(fields));                                                         // 851
  } else {                                                                                                    // 852
    query.added(doc._id, query.projectionFn(fields));                                                         // 853
    query.results.set(doc._id, doc);                                                                          // 854
  }                                                                                                           // 855
};                                                                                                            // 856
                                                                                                              // 857
LocalCollection._removeFromResults = function (query, doc) {                                                  // 858
  if (query.ordered) {                                                                                        // 859
    var i = LocalCollection._findInOrderedResults(query, doc);                                                // 860
    query.removed(doc._id);                                                                                   // 861
    query.results.splice(i, 1);                                                                               // 862
  } else {                                                                                                    // 863
    var id = doc._id;  // in case callback mutates doc                                                        // 864
    query.removed(doc._id);                                                                                   // 865
    query.results.remove(id);                                                                                 // 866
  }                                                                                                           // 867
};                                                                                                            // 868
                                                                                                              // 869
LocalCollection._updateInResults = function (query, doc, old_doc) {                                           // 870
  if (!EJSON.equals(doc._id, old_doc._id))                                                                    // 871
    throw new Error("Can't change a doc's _id while updating");                                               // 872
  var projectionFn = query.projectionFn;                                                                      // 873
  var changedFields = DiffSequence.makeChangedFields(                                                         // 874
    projectionFn(doc), projectionFn(old_doc));                                                                // 875
                                                                                                              // 876
  if (!query.ordered) {                                                                                       // 877
    if (!_.isEmpty(changedFields)) {                                                                          // 878
      query.changed(doc._id, changedFields);                                                                  // 879
      query.results.set(doc._id, doc);                                                                        // 880
    }                                                                                                         // 881
    return;                                                                                                   // 882
  }                                                                                                           // 883
                                                                                                              // 884
  var orig_idx = LocalCollection._findInOrderedResults(query, doc);                                           // 885
                                                                                                              // 886
  if (!_.isEmpty(changedFields))                                                                              // 887
    query.changed(doc._id, changedFields);                                                                    // 888
  if (!query.sorter)                                                                                          // 889
    return;                                                                                                   // 890
                                                                                                              // 891
  // just take it out and put it back in again, and see if the index                                          // 892
  // changes                                                                                                  // 893
  query.results.splice(orig_idx, 1);                                                                          // 894
  var new_idx = LocalCollection._insertInSortedList(                                                          // 895
    query.sorter.getComparator({distances: query.distances}),                                                 // 896
    query.results, doc);                                                                                      // 897
  if (orig_idx !== new_idx) {                                                                                 // 898
    var next = query.results[new_idx+1];                                                                      // 899
    if (next)                                                                                                 // 900
      next = next._id;                                                                                        // 901
    else                                                                                                      // 902
      next = null;                                                                                            // 903
    query.movedBefore && query.movedBefore(doc._id, next);                                                    // 904
  }                                                                                                           // 905
};                                                                                                            // 906
                                                                                                              // 907
// Recomputes the results of a query and runs observe callbacks for the                                       // 908
// difference between the previous results and the current results (unless                                    // 909
// paused). Used for skip/limit queries.                                                                      // 910
//                                                                                                            // 911
// When this is used by insert or remove, it can just use query.results for the                               // 912
// old results (and there's no need to pass in oldResults), because these                                     // 913
// operations don't mutate the documents in the collection. Update needs to pass                              // 914
// in an oldResults which was deep-copied before the modifier was applied.                                    // 915
//                                                                                                            // 916
// oldResults is guaranteed to be ignored if the query is not paused.                                         // 917
LocalCollection.prototype._recomputeResults = function (query, oldResults) {                                  // 918
  var self = this;                                                                                            // 919
  if (! self.paused && ! oldResults)                                                                          // 920
    oldResults = query.results;                                                                               // 921
  if (query.distances)                                                                                        // 922
    query.distances.clear();                                                                                  // 923
  query.results = query.cursor._getRawObjects({                                                               // 924
    ordered: query.ordered, distances: query.distances});                                                     // 925
                                                                                                              // 926
  if (! self.paused) {                                                                                        // 927
    LocalCollection._diffQueryChanges(                                                                        // 928
      query.ordered, oldResults, query.results, query,                                                        // 929
      { projectionFn: query.projectionFn });                                                                  // 930
  }                                                                                                           // 931
};                                                                                                            // 932
                                                                                                              // 933
                                                                                                              // 934
LocalCollection._findInOrderedResults = function (query, doc) {                                               // 935
  if (!query.ordered)                                                                                         // 936
    throw new Error("Can't call _findInOrderedResults on unordered query");                                   // 937
  for (var i = 0; i < query.results.length; i++)                                                              // 938
    if (query.results[i] === doc)                                                                             // 939
      return i;                                                                                               // 940
  throw Error("object missing from query");                                                                   // 941
};                                                                                                            // 942
                                                                                                              // 943
// This binary search puts a value between any equal values, and the first                                    // 944
// lesser value.                                                                                              // 945
LocalCollection._binarySearch = function (cmp, array, value) {                                                // 946
  var first = 0, rangeLength = array.length;                                                                  // 947
                                                                                                              // 948
  while (rangeLength > 0) {                                                                                   // 949
    var halfRange = Math.floor(rangeLength/2);                                                                // 950
    if (cmp(value, array[first + halfRange]) >= 0) {                                                          // 951
      first += halfRange + 1;                                                                                 // 952
      rangeLength -= halfRange + 1;                                                                           // 953
    } else {                                                                                                  // 954
      rangeLength = halfRange;                                                                                // 955
    }                                                                                                         // 956
  }                                                                                                           // 957
  return first;                                                                                               // 958
};                                                                                                            // 959
                                                                                                              // 960
LocalCollection._insertInSortedList = function (cmp, array, value) {                                          // 961
  if (array.length === 0) {                                                                                   // 962
    array.push(value);                                                                                        // 963
    return 0;                                                                                                 // 964
  }                                                                                                           // 965
                                                                                                              // 966
  var idx = LocalCollection._binarySearch(cmp, array, value);                                                 // 967
  array.splice(idx, 0, value);                                                                                // 968
  return idx;                                                                                                 // 969
};                                                                                                            // 970
                                                                                                              // 971
// To track what documents are affected by a piece of code, call saveOriginals()                              // 972
// before it and retrieveOriginals() after it. retrieveOriginals returns an                                   // 973
// object whose keys are the ids of the documents that were affected since the                                // 974
// call to saveOriginals(), and the values are equal to the document's contents                               // 975
// at the time of saveOriginals. (In the case of an inserted document, undefined                              // 976
// is the value.) You must alternate between calls to saveOriginals() and                                     // 977
// retrieveOriginals().                                                                                       // 978
LocalCollection.prototype.saveOriginals = function () {                                                       // 979
  var self = this;                                                                                            // 980
  if (self._savedOriginals)                                                                                   // 981
    throw new Error("Called saveOriginals twice without retrieveOriginals");                                  // 982
  self._savedOriginals = new LocalCollection._IdMap;                                                          // 983
};                                                                                                            // 984
LocalCollection.prototype.retrieveOriginals = function () {                                                   // 985
  var self = this;                                                                                            // 986
  if (!self._savedOriginals)                                                                                  // 987
    throw new Error("Called retrieveOriginals without saveOriginals");                                        // 988
                                                                                                              // 989
  var originals = self._savedOriginals;                                                                       // 990
  self._savedOriginals = null;                                                                                // 991
  return originals;                                                                                           // 992
};                                                                                                            // 993
                                                                                                              // 994
LocalCollection.prototype._saveOriginal = function (id, doc) {                                                // 995
  var self = this;                                                                                            // 996
  // Are we even trying to save originals?                                                                    // 997
  if (!self._savedOriginals)                                                                                  // 998
    return;                                                                                                   // 999
  // Have we previously mutated the original (and so 'doc' is not actually                                    // 1000
  // original)?  (Note the 'has' check rather than truth: we store undefined                                  // 1001
  // here for inserted docs!)                                                                                 // 1002
  if (self._savedOriginals.has(id))                                                                           // 1003
    return;                                                                                                   // 1004
  self._savedOriginals.set(id, EJSON.clone(doc));                                                             // 1005
};                                                                                                            // 1006
                                                                                                              // 1007
// Pause the observers. No callbacks from observers will fire until                                           // 1008
// 'resumeObservers' is called.                                                                               // 1009
LocalCollection.prototype.pauseObservers = function () {                                                      // 1010
  // No-op if already paused.                                                                                 // 1011
  if (this.paused)                                                                                            // 1012
    return;                                                                                                   // 1013
                                                                                                              // 1014
  // Set the 'paused' flag such that new observer messages don't fire.                                        // 1015
  this.paused = true;                                                                                         // 1016
                                                                                                              // 1017
  // Take a snapshot of the query results for each query.                                                     // 1018
  for (var qid in this.queries) {                                                                             // 1019
    var query = this.queries[qid];                                                                            // 1020
                                                                                                              // 1021
    query.resultsSnapshot = EJSON.clone(query.results);                                                       // 1022
  }                                                                                                           // 1023
};                                                                                                            // 1024
                                                                                                              // 1025
// Resume the observers. Observers immediately receive change                                                 // 1026
// notifications to bring them to the current state of the                                                    // 1027
// database. Note that this is not just replaying all the changes that                                        // 1028
// happened during the pause, it is a smarter 'coalesced' diff.                                               // 1029
LocalCollection.prototype.resumeObservers = function () {                                                     // 1030
  var self = this;                                                                                            // 1031
  // No-op if not paused.                                                                                     // 1032
  if (!this.paused)                                                                                           // 1033
    return;                                                                                                   // 1034
                                                                                                              // 1035
  // Unset the 'paused' flag. Make sure to do this first, otherwise                                           // 1036
  // observer methods won't actually fire when we trigger them.                                               // 1037
  this.paused = false;                                                                                        // 1038
                                                                                                              // 1039
  for (var qid in this.queries) {                                                                             // 1040
    var query = self.queries[qid];                                                                            // 1041
    // Diff the current results against the snapshot and send to observers.                                   // 1042
    // pass the query object for its observer callbacks.                                                      // 1043
    LocalCollection._diffQueryChanges(                                                                        // 1044
      query.ordered, query.resultsSnapshot, query.results, query,                                             // 1045
      { projectionFn: query.projectionFn });                                                                  // 1046
    query.resultsSnapshot = null;                                                                             // 1047
  }                                                                                                           // 1048
  self._observeQueue.drain();                                                                                 // 1049
};                                                                                                            // 1050
                                                                                                              // 1051
                                                                                                              // 1052
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                            //
// packages/minimongo/wrap_transform.js                                                                       //
//                                                                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                              //
// Wrap a transform function to return objects that have the _id field                                        // 1
// of the untransformed document. This ensures that subsystems such as                                        // 2
// the observe-sequence package that call `observe` can keep track of                                         // 3
// the documents identities.                                                                                  // 4
//                                                                                                            // 5
// - Require that it returns objects                                                                          // 6
// - If the return value has an _id field, verify that it matches the                                         // 7
//   original _id field                                                                                       // 8
// - If the return value doesn't have an _id field, add it back.                                              // 9
LocalCollection.wrapTransform = function (transform) {                                                        // 10
  if (! transform)                                                                                            // 11
    return null;                                                                                              // 12
                                                                                                              // 13
  // No need to doubly-wrap transforms.                                                                       // 14
  if (transform.__wrappedTransform__)                                                                         // 15
    return transform;                                                                                         // 16
                                                                                                              // 17
  var wrapped = function (doc) {                                                                              // 18
    if (!_.has(doc, '_id')) {                                                                                 // 19
      // XXX do we ever have a transform on the oplog's collection? because that                              // 20
      // collection has no _id.                                                                               // 21
      throw new Error("can only transform documents with _id");                                               // 22
    }                                                                                                         // 23
                                                                                                              // 24
    var id = doc._id;                                                                                         // 25
    // XXX consider making tracker a weak dependency and checking Package.tracker here                        // 26
    var transformed = Tracker.nonreactive(function () {                                                       // 27
      return transform(doc);                                                                                  // 28
    });                                                                                                       // 29
                                                                                                              // 30
    if (!isPlainObject(transformed)) {                                                                        // 31
      throw new Error("transform must return object");                                                        // 32
    }                                                                                                         // 33
                                                                                                              // 34
    if (_.has(transformed, '_id')) {                                                                          // 35
      if (!EJSON.equals(transformed._id, id)) {                                                               // 36
        throw new Error("transformed document can't have different _id");                                     // 37
      }                                                                                                       // 38
    } else {                                                                                                  // 39
      transformed._id = id;                                                                                   // 40
    }                                                                                                         // 41
    return transformed;                                                                                       // 42
  };                                                                                                          // 43
  wrapped.__wrappedTransform__ = true;                                                                        // 44
  return wrapped;                                                                                             // 45
};                                                                                                            // 46
                                                                                                              // 47
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                            //
// packages/minimongo/helpers.js                                                                              //
//                                                                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                              //
// Like _.isArray, but doesn't regard polyfilled Uint8Arrays on old browsers as                               // 1
// arrays.                                                                                                    // 2
// XXX maybe this should be EJSON.isArray                                                                     // 3
isArray = function (x) {                                                                                      // 4
  return _.isArray(x) && !EJSON.isBinary(x);                                                                  // 5
};                                                                                                            // 6
                                                                                                              // 7
// XXX maybe this should be EJSON.isObject, though EJSON doesn't know about                                   // 8
// RegExp                                                                                                     // 9
// XXX note that _type(undefined) === 3!!!!                                                                   // 10
isPlainObject = LocalCollection._isPlainObject = function (x) {                                               // 11
  return x && LocalCollection._f._type(x) === 3;                                                              // 12
};                                                                                                            // 13
                                                                                                              // 14
isIndexable = function (x) {                                                                                  // 15
  return isArray(x) || isPlainObject(x);                                                                      // 16
};                                                                                                            // 17
                                                                                                              // 18
// Returns true if this is an object with at least one key and all keys begin                                 // 19
// with $.  Unless inconsistentOK is set, throws if some keys begin with $ and                                // 20
// others don't.                                                                                              // 21
isOperatorObject = function (valueSelector, inconsistentOK) {                                                 // 22
  if (!isPlainObject(valueSelector))                                                                          // 23
    return false;                                                                                             // 24
                                                                                                              // 25
  var theseAreOperators = undefined;                                                                          // 26
  _.each(valueSelector, function (value, selKey) {                                                            // 27
    var thisIsOperator = selKey.substr(0, 1) === '$';                                                         // 28
    if (theseAreOperators === undefined) {                                                                    // 29
      theseAreOperators = thisIsOperator;                                                                     // 30
    } else if (theseAreOperators !== thisIsOperator) {                                                        // 31
      if (!inconsistentOK)                                                                                    // 32
        throw new Error("Inconsistent operator: " +                                                           // 33
                        JSON.stringify(valueSelector));                                                       // 34
      theseAreOperators = false;                                                                              // 35
    }                                                                                                         // 36
  });                                                                                                         // 37
  return !!theseAreOperators;  // {} has no operators                                                         // 38
};                                                                                                            // 39
                                                                                                              // 40
                                                                                                              // 41
// string can be converted to integer                                                                         // 42
isNumericKey = function (s) {                                                                                 // 43
  return /^[0-9]+$/.test(s);                                                                                  // 44
};                                                                                                            // 45
                                                                                                              // 46
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                            //
// packages/minimongo/selector.js                                                                             //
//                                                                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                              //
// The minimongo selector compiler!                                                                           // 1
                                                                                                              // 2
// Terminology:                                                                                               // 3
//  - a "selector" is the EJSON object representing a selector                                                // 4
//  - a "matcher" is its compiled form (whether a full Minimongo.Matcher                                      // 5
//    object or one of the component lambdas that matches parts of it)                                        // 6
//  - a "result object" is an object with a "result" field and maybe                                          // 7
//    distance and arrayIndices.                                                                              // 8
//  - a "branched value" is an object with a "value" field and maybe                                          // 9
//    "dontIterate" and "arrayIndices".                                                                       // 10
//  - a "document" is a top-level object that can be stored in a collection.                                  // 11
//  - a "lookup function" is a function that takes in a document and returns                                  // 12
//    an array of "branched values".                                                                          // 13
//  - a "branched matcher" maps from an array of branched values to a result                                  // 14
//    object.                                                                                                 // 15
//  - an "element matcher" maps from a single value to a bool.                                                // 16
                                                                                                              // 17
// Main entry point.                                                                                          // 18
//   var matcher = new Minimongo.Matcher({a: {$gt: 5}});                                                      // 19
//   if (matcher.documentMatches({a: 7})) ...                                                                 // 20
Minimongo.Matcher = function (selector) {                                                                     // 21
  var self = this;                                                                                            // 22
  // A set (object mapping string -> *) of all of the document paths looked                                   // 23
  // at by the selector. Also includes the empty string if it may look at any                                 // 24
  // path (eg, $where).                                                                                       // 25
  self._paths = {};                                                                                           // 26
  // Set to true if compilation finds a $near.                                                                // 27
  self._hasGeoQuery = false;                                                                                  // 28
  // Set to true if compilation finds a $where.                                                               // 29
  self._hasWhere = false;                                                                                     // 30
  // Set to false if compilation finds anything other than a simple equality or                               // 31
  // one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used with                              // 32
  // scalars as operands.                                                                                     // 33
  self._isSimple = true;                                                                                      // 34
  // Set to a dummy document which always matches this Matcher. Or set to null                                // 35
  // if such document is too hard to find.                                                                    // 36
  self._matchingDocument = undefined;                                                                         // 37
  // A clone of the original selector. It may just be a function if the user                                  // 38
  // passed in a function; otherwise is definitely an object (eg, IDs are                                     // 39
  // translated into {_id: ID} first. Used by canBecomeTrueByModifier and                                     // 40
  // Sorter._useWithMatcher.                                                                                  // 41
  self._selector = null;                                                                                      // 42
  self._docMatcher = self._compileSelector(selector);                                                         // 43
};                                                                                                            // 44
                                                                                                              // 45
_.extend(Minimongo.Matcher.prototype, {                                                                       // 46
  documentMatches: function (doc) {                                                                           // 47
    if (!doc || typeof doc !== "object") {                                                                    // 48
      throw Error("documentMatches needs a document");                                                        // 49
    }                                                                                                         // 50
    return this._docMatcher(doc);                                                                             // 51
  },                                                                                                          // 52
  hasGeoQuery: function () {                                                                                  // 53
    return this._hasGeoQuery;                                                                                 // 54
  },                                                                                                          // 55
  hasWhere: function () {                                                                                     // 56
    return this._hasWhere;                                                                                    // 57
  },                                                                                                          // 58
  isSimple: function () {                                                                                     // 59
    return this._isSimple;                                                                                    // 60
  },                                                                                                          // 61
                                                                                                              // 62
  // Given a selector, return a function that takes one argument, a                                           // 63
  // document. It returns a result object.                                                                    // 64
  _compileSelector: function (selector) {                                                                     // 65
    var self = this;                                                                                          // 66
    // you can pass a literal function instead of a selector                                                  // 67
    if (selector instanceof Function) {                                                                       // 68
      self._isSimple = false;                                                                                 // 69
      self._selector = selector;                                                                              // 70
      self._recordPathUsed('');                                                                               // 71
      return function (doc) {                                                                                 // 72
        return {result: !!selector.call(doc)};                                                                // 73
      };                                                                                                      // 74
    }                                                                                                         // 75
                                                                                                              // 76
    // shorthand -- scalars match _id                                                                         // 77
    if (LocalCollection._selectorIsId(selector)) {                                                            // 78
      self._selector = {_id: selector};                                                                       // 79
      self._recordPathUsed('_id');                                                                            // 80
      return function (doc) {                                                                                 // 81
        return {result: EJSON.equals(doc._id, selector)};                                                     // 82
      };                                                                                                      // 83
    }                                                                                                         // 84
                                                                                                              // 85
    // protect against dangerous selectors.  falsey and {_id: falsey} are both                                // 86
    // likely programmer error, and not what you want, particularly for                                       // 87
    // destructive operations.                                                                                // 88
    if (!selector || (('_id' in selector) && !selector._id)) {                                                // 89
      self._isSimple = false;                                                                                 // 90
      return nothingMatcher;                                                                                  // 91
    }                                                                                                         // 92
                                                                                                              // 93
    // Top level can't be an array or true or binary.                                                         // 94
    if (typeof(selector) === 'boolean' || isArray(selector) ||                                                // 95
        EJSON.isBinary(selector))                                                                             // 96
      throw new Error("Invalid selector: " + selector);                                                       // 97
                                                                                                              // 98
    self._selector = EJSON.clone(selector);                                                                   // 99
    return compileDocumentSelector(selector, self, {isRoot: true});                                           // 100
  },                                                                                                          // 101
  _recordPathUsed: function (path) {                                                                          // 102
    this._paths[path] = true;                                                                                 // 103
  },                                                                                                          // 104
  // Returns a list of key paths the given selector is looking for. It includes                               // 105
  // the empty string if there is a $where.                                                                   // 106
  _getPaths: function () {                                                                                    // 107
    return _.keys(this._paths);                                                                               // 108
  }                                                                                                           // 109
});                                                                                                           // 110
                                                                                                              // 111
                                                                                                              // 112
// Takes in a selector that could match a full document (eg, the original                                     // 113
// selector). Returns a function mapping document->result object.                                             // 114
//                                                                                                            // 115
// matcher is the Matcher object we are compiling.                                                            // 116
//                                                                                                            // 117
// If this is the root document selector (ie, not wrapped in $and or the like),                               // 118
// then isRoot is true. (This is used by $near.)                                                              // 119
var compileDocumentSelector = function (docSelector, matcher, options) {                                      // 120
  options = options || {};                                                                                    // 121
  var docMatchers = [];                                                                                       // 122
  _.each(docSelector, function (subSelector, key) {                                                           // 123
    if (key.substr(0, 1) === '$') {                                                                           // 124
      // Outer operators are either logical operators (they recurse back into                                 // 125
      // this function), or $where.                                                                           // 126
      if (!_.has(LOGICAL_OPERATORS, key))                                                                     // 127
        throw new Error("Unrecognized logical operator: " + key);                                             // 128
      matcher._isSimple = false;                                                                              // 129
      docMatchers.push(LOGICAL_OPERATORS[key](subSelector, matcher,                                           // 130
                                              options.inElemMatch));                                          // 131
    } else {                                                                                                  // 132
      // Record this path, but only if we aren't in an elemMatcher, since in an                               // 133
      // elemMatch this is a path inside an object in an array, not in the doc                                // 134
      // root.                                                                                                // 135
      if (!options.inElemMatch)                                                                               // 136
        matcher._recordPathUsed(key);                                                                         // 137
      var lookUpByIndex = makeLookupFunction(key);                                                            // 138
      var valueMatcher =                                                                                      // 139
        compileValueSelector(subSelector, matcher, options.isRoot);                                           // 140
      docMatchers.push(function (doc) {                                                                       // 141
        var branchValues = lookUpByIndex(doc);                                                                // 142
        return valueMatcher(branchValues);                                                                    // 143
      });                                                                                                     // 144
    }                                                                                                         // 145
  });                                                                                                         // 146
                                                                                                              // 147
  return andDocumentMatchers(docMatchers);                                                                    // 148
};                                                                                                            // 149
                                                                                                              // 150
// Takes in a selector that could match a key-indexed value in a document; eg,                                // 151
// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to                                // 152
// indicate equality).  Returns a branched matcher: a function mapping                                        // 153
// [branched value]->result object.                                                                           // 154
var compileValueSelector = function (valueSelector, matcher, isRoot) {                                        // 155
  if (valueSelector instanceof RegExp) {                                                                      // 156
    matcher._isSimple = false;                                                                                // 157
    return convertElementMatcherToBranchedMatcher(                                                            // 158
      regexpElementMatcher(valueSelector));                                                                   // 159
  } else if (isOperatorObject(valueSelector)) {                                                               // 160
    return operatorBranchedMatcher(valueSelector, matcher, isRoot);                                           // 161
  } else {                                                                                                    // 162
    return convertElementMatcherToBranchedMatcher(                                                            // 163
      equalityElementMatcher(valueSelector));                                                                 // 164
  }                                                                                                           // 165
};                                                                                                            // 166
                                                                                                              // 167
// Given an element matcher (which evaluates a single value), returns a branched                              // 168
// value (which evaluates the element matcher on all the branches and returns a                               // 169
// more structured return value possibly including arrayIndices).                                             // 170
var convertElementMatcherToBranchedMatcher = function (                                                       // 171
    elementMatcher, options) {                                                                                // 172
  options = options || {};                                                                                    // 173
  return function (branches) {                                                                                // 174
    var expanded = branches;                                                                                  // 175
    if (!options.dontExpandLeafArrays) {                                                                      // 176
      expanded = expandArraysInBranches(                                                                      // 177
        branches, options.dontIncludeLeafArrays);                                                             // 178
    }                                                                                                         // 179
    var ret = {};                                                                                             // 180
    ret.result = _.any(expanded, function (element) {                                                         // 181
      var matched = elementMatcher(element.value);                                                            // 182
                                                                                                              // 183
      // Special case for $elemMatch: it means "true, and use this as an array                                // 184
      // index if I didn't already have one".                                                                 // 185
      if (typeof matched === 'number') {                                                                      // 186
        // XXX This code dates from when we only stored a single array index                                  // 187
        // (for the outermost array). Should we be also including deeper array                                // 188
        // indices from the $elemMatch match?                                                                 // 189
        if (!element.arrayIndices)                                                                            // 190
          element.arrayIndices = [matched];                                                                   // 191
        matched = true;                                                                                       // 192
      }                                                                                                       // 193
                                                                                                              // 194
      // If some element matched, and it's tagged with array indices, include                                 // 195
      // those indices in our result object.                                                                  // 196
      if (matched && element.arrayIndices)                                                                    // 197
        ret.arrayIndices = element.arrayIndices;                                                              // 198
                                                                                                              // 199
      return matched;                                                                                         // 200
    });                                                                                                       // 201
    return ret;                                                                                               // 202
  };                                                                                                          // 203
};                                                                                                            // 204
                                                                                                              // 205
// Takes a RegExp object and returns an element matcher.                                                      // 206
regexpElementMatcher = function (regexp) {                                                                    // 207
  return function (value) {                                                                                   // 208
    if (value instanceof RegExp) {                                                                            // 209
      // Comparing two regexps means seeing if the regexps are identical                                      // 210
      // (really!). Underscore knows how.                                                                     // 211
      return _.isEqual(value, regexp);                                                                        // 212
    }                                                                                                         // 213
    // Regexps only work against strings.                                                                     // 214
    if (typeof value !== 'string')                                                                            // 215
      return false;                                                                                           // 216
                                                                                                              // 217
    // Reset regexp's state to avoid inconsistent matching for objects with the                               // 218
    // same value on consecutive calls of regexp.test. This happens only if the                               // 219
    // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for                              // 220
    // which we should *not* change the lastIndex but MongoDB doesn't support                                 // 221
    // either of these flags.                                                                                 // 222
    regexp.lastIndex = 0;                                                                                     // 223
                                                                                                              // 224
    return regexp.test(value);                                                                                // 225
  };                                                                                                          // 226
};                                                                                                            // 227
                                                                                                              // 228
// Takes something that is not an operator object and returns an element matcher                              // 229
// for equality with that thing.                                                                              // 230
equalityElementMatcher = function (elementSelector) {                                                         // 231
  if (isOperatorObject(elementSelector))                                                                      // 232
    throw Error("Can't create equalityValueSelector for operator object");                                    // 233
                                                                                                              // 234
  // Special-case: null and undefined are equal (if you got undefined in there                                // 235
  // somewhere, or if you got it due to some branch being non-existent in the                                 // 236
  // weird special case), even though they aren't with EJSON.equals.                                          // 237
  if (elementSelector == null) {  // undefined or null                                                        // 238
    return function (value) {                                                                                 // 239
      return value == null;  // undefined or null                                                             // 240
    };                                                                                                        // 241
  }                                                                                                           // 242
                                                                                                              // 243
  return function (value) {                                                                                   // 244
    return LocalCollection._f._equal(elementSelector, value);                                                 // 245
  };                                                                                                          // 246
};                                                                                                            // 247
                                                                                                              // 248
// Takes an operator object (an object with $ keys) and returns a branched                                    // 249
// matcher for it.                                                                                            // 250
var operatorBranchedMatcher = function (valueSelector, matcher, isRoot) {                                     // 251
  // Each valueSelector works separately on the various branches.  So one                                     // 252
  // operator can match one branch and another can match another branch.  This                                // 253
  // is OK.                                                                                                   // 254
                                                                                                              // 255
  var operatorMatchers = [];                                                                                  // 256
  _.each(valueSelector, function (operand, operator) {                                                        // 257
    // XXX we should actually implement $eq, which is new in 2.6                                              // 258
    var simpleRange = _.contains(['$lt', '$lte', '$gt', '$gte'], operator) &&                                 // 259
      _.isNumber(operand);                                                                                    // 260
    var simpleInequality = operator === '$ne' && !_.isObject(operand);                                        // 261
    var simpleInclusion = _.contains(['$in', '$nin'], operator) &&                                            // 262
      _.isArray(operand) && !_.any(operand, _.isObject);                                                      // 263
                                                                                                              // 264
    if (! (operator === '$eq' || simpleRange ||                                                               // 265
           simpleInclusion || simpleInequality)) {                                                            // 266
      matcher._isSimple = false;                                                                              // 267
    }                                                                                                         // 268
                                                                                                              // 269
    if (_.has(VALUE_OPERATORS, operator)) {                                                                   // 270
      operatorMatchers.push(                                                                                  // 271
        VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot));                                  // 272
    } else if (_.has(ELEMENT_OPERATORS, operator)) {                                                          // 273
      var options = ELEMENT_OPERATORS[operator];                                                              // 274
      operatorMatchers.push(                                                                                  // 275
        convertElementMatcherToBranchedMatcher(                                                               // 276
          options.compileElementSelector(                                                                     // 277
            operand, valueSelector, matcher),                                                                 // 278
          options));                                                                                          // 279
    } else {                                                                                                  // 280
      throw new Error("Unrecognized operator: " + operator);                                                  // 281
    }                                                                                                         // 282
  });                                                                                                         // 283
                                                                                                              // 284
  return andBranchedMatchers(operatorMatchers);                                                               // 285
};                                                                                                            // 286
                                                                                                              // 287
var compileArrayOfDocumentSelectors = function (                                                              // 288
    selectors, matcher, inElemMatch) {                                                                        // 289
  if (!isArray(selectors) || _.isEmpty(selectors))                                                            // 290
    throw Error("$and/$or/$nor must be nonempty array");                                                      // 291
  return _.map(selectors, function (subSelector) {                                                            // 292
    if (!isPlainObject(subSelector))                                                                          // 293
      throw Error("$or/$and/$nor entries need to be full objects");                                           // 294
    return compileDocumentSelector(                                                                           // 295
      subSelector, matcher, {inElemMatch: inElemMatch});                                                      // 296
  });                                                                                                         // 297
};                                                                                                            // 298
                                                                                                              // 299
// Operators that appear at the top level of a document selector.                                             // 300
var LOGICAL_OPERATORS = {                                                                                     // 301
  $and: function (subSelector, matcher, inElemMatch) {                                                        // 302
    var matchers = compileArrayOfDocumentSelectors(                                                           // 303
      subSelector, matcher, inElemMatch);                                                                     // 304
    return andDocumentMatchers(matchers);                                                                     // 305
  },                                                                                                          // 306
                                                                                                              // 307
  $or: function (subSelector, matcher, inElemMatch) {                                                         // 308
    var matchers = compileArrayOfDocumentSelectors(                                                           // 309
      subSelector, matcher, inElemMatch);                                                                     // 310
                                                                                                              // 311
    // Special case: if there is only one matcher, use it directly, *preserving*                              // 312
    // any arrayIndices it returns.                                                                           // 313
    if (matchers.length === 1)                                                                                // 314
      return matchers[0];                                                                                     // 315
                                                                                                              // 316
    return function (doc) {                                                                                   // 317
      var result = _.any(matchers, function (f) {                                                             // 318
        return f(doc).result;                                                                                 // 319
      });                                                                                                     // 320
      // $or does NOT set arrayIndices when it has multiple                                                   // 321
      // sub-expressions. (Tested against MongoDB.)                                                           // 322
      return {result: result};                                                                                // 323
    };                                                                                                        // 324
  },                                                                                                          // 325
                                                                                                              // 326
  $nor: function (subSelector, matcher, inElemMatch) {                                                        // 327
    var matchers = compileArrayOfDocumentSelectors(                                                           // 328
      subSelector, matcher, inElemMatch);                                                                     // 329
    return function (doc) {                                                                                   // 330
      var result = _.all(matchers, function (f) {                                                             // 331
        return !f(doc).result;                                                                                // 332
      });                                                                                                     // 333
      // Never set arrayIndices, because we only match if nothing in particular                               // 334
      // "matched" (and because this is consistent with MongoDB).                                             // 335
      return {result: result};                                                                                // 336
    };                                                                                                        // 337
  },                                                                                                          // 338
                                                                                                              // 339
  $where: function (selectorValue, matcher) {                                                                 // 340
    // Record that *any* path may be used.                                                                    // 341
    matcher._recordPathUsed('');                                                                              // 342
    matcher._hasWhere = true;                                                                                 // 343
    if (!(selectorValue instanceof Function)) {                                                               // 344
      // XXX MongoDB seems to have more complex logic to decide where or or not                               // 345
      // to add "return"; not sure exactly what it is.                                                        // 346
      selectorValue = Function("obj", "return " + selectorValue);                                             // 347
    }                                                                                                         // 348
    return function (doc) {                                                                                   // 349
      // We make the document available as both `this` and `obj`.                                             // 350
      // XXX not sure what we should do if this throws                                                        // 351
      return {result: selectorValue.call(doc, doc)};                                                          // 352
    };                                                                                                        // 353
  },                                                                                                          // 354
                                                                                                              // 355
  // This is just used as a comment in the query (in MongoDB, it also ends up in                              // 356
  // query logs); it has no effect on the actual selection.                                                   // 357
  $comment: function () {                                                                                     // 358
    return function () {                                                                                      // 359
      return {result: true};                                                                                  // 360
    };                                                                                                        // 361
  }                                                                                                           // 362
};                                                                                                            // 363
                                                                                                              // 364
// Returns a branched matcher that matches iff the given matcher does not.                                    // 365
// Note that this implicitly "deMorganizes" the wrapped function.  ie, it                                     // 366
// means that ALL branch values need to fail to match innerBranchedMatcher.                                   // 367
var invertBranchedMatcher = function (branchedMatcher) {                                                      // 368
  return function (branchValues) {                                                                            // 369
    var invertMe = branchedMatcher(branchValues);                                                             // 370
    // We explicitly choose to strip arrayIndices here: it doesn't make sense to                              // 371
    // say "update the array element that does not match something", at least                                 // 372
    // in mongo-land.                                                                                         // 373
    return {result: !invertMe.result};                                                                        // 374
  };                                                                                                          // 375
};                                                                                                            // 376
                                                                                                              // 377
// Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a                                 // 378
// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as                                // 379
// "match each branched value independently and combine with                                                  // 380
// convertElementMatcherToBranchedMatcher".                                                                   // 381
var VALUE_OPERATORS = {                                                                                       // 382
  $not: function (operand, valueSelector, matcher) {                                                          // 383
    return invertBranchedMatcher(compileValueSelector(operand, matcher));                                     // 384
  },                                                                                                          // 385
  $ne: function (operand) {                                                                                   // 386
    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(                                      // 387
      equalityElementMatcher(operand)));                                                                      // 388
  },                                                                                                          // 389
  $nin: function (operand) {                                                                                  // 390
    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(                                      // 391
      ELEMENT_OPERATORS.$in.compileElementSelector(operand)));                                                // 392
  },                                                                                                          // 393
  $exists: function (operand) {                                                                               // 394
    var exists = convertElementMatcherToBranchedMatcher(function (value) {                                    // 395
      return value !== undefined;                                                                             // 396
    });                                                                                                       // 397
    return operand ? exists : invertBranchedMatcher(exists);                                                  // 398
  },                                                                                                          // 399
  // $options just provides options for $regex; its logic is inside $regex                                    // 400
  $options: function (operand, valueSelector) {                                                               // 401
    if (!_.has(valueSelector, '$regex'))                                                                      // 402
      throw Error("$options needs a $regex");                                                                 // 403
    return everythingMatcher;                                                                                 // 404
  },                                                                                                          // 405
  // $maxDistance is basically an argument to $near                                                           // 406
  $maxDistance: function (operand, valueSelector) {                                                           // 407
    if (!valueSelector.$near)                                                                                 // 408
      throw Error("$maxDistance needs a $near");                                                              // 409
    return everythingMatcher;                                                                                 // 410
  },                                                                                                          // 411
  $all: function (operand, valueSelector, matcher) {                                                          // 412
    if (!isArray(operand))                                                                                    // 413
      throw Error("$all requires array");                                                                     // 414
    // Not sure why, but this seems to be what MongoDB does.                                                  // 415
    if (_.isEmpty(operand))                                                                                   // 416
      return nothingMatcher;                                                                                  // 417
                                                                                                              // 418
    var branchedMatchers = [];                                                                                // 419
    _.each(operand, function (criterion) {                                                                    // 420
      // XXX handle $all/$elemMatch combination                                                               // 421
      if (isOperatorObject(criterion))                                                                        // 422
        throw Error("no $ expressions in $all");                                                              // 423
      // This is always a regexp or equality selector.                                                        // 424
      branchedMatchers.push(compileValueSelector(criterion, matcher));                                        // 425
    });                                                                                                       // 426
    // andBranchedMatchers does NOT require all selectors to return true on the                               // 427
    // SAME branch.                                                                                           // 428
    return andBranchedMatchers(branchedMatchers);                                                             // 429
  },                                                                                                          // 430
  $near: function (operand, valueSelector, matcher, isRoot) {                                                 // 431
    if (!isRoot)                                                                                              // 432
      throw Error("$near can't be inside another $ operator");                                                // 433
    matcher._hasGeoQuery = true;                                                                              // 434
                                                                                                              // 435
    // There are two kinds of geodata in MongoDB: coordinate pairs and                                        // 436
    // GeoJSON. They use different distance metrics, too. GeoJSON queries are                                 // 437
    // marked with a $geometry property.                                                                      // 438
                                                                                                              // 439
    var maxDistance, point, distance;                                                                         // 440
    if (isPlainObject(operand) && _.has(operand, '$geometry')) {                                              // 441
      // GeoJSON "2dsphere" mode.                                                                             // 442
      maxDistance = operand.$maxDistance;                                                                     // 443
      point = operand.$geometry;                                                                              // 444
      distance = function (value) {                                                                           // 445
        // XXX: for now, we don't calculate the actual distance between, say,                                 // 446
        // polygon and circle. If people care about this use-case it will get                                 // 447
        // a priority.                                                                                        // 448
        if (!value || !value.type)                                                                            // 449
          return null;                                                                                        // 450
        if (value.type === "Point") {                                                                         // 451
          return GeoJSON.pointDistance(point, value);                                                         // 452
        } else {                                                                                              // 453
          return GeoJSON.geometryWithinRadius(value, point, maxDistance)                                      // 454
            ? 0 : maxDistance + 1;                                                                            // 455
        }                                                                                                     // 456
      };                                                                                                      // 457
    } else {                                                                                                  // 458
      maxDistance = valueSelector.$maxDistance;                                                               // 459
      if (!isArray(operand) && !isPlainObject(operand))                                                       // 460
        throw Error("$near argument must be coordinate pair or GeoJSON");                                     // 461
      point = pointToArray(operand);                                                                          // 462
      distance = function (value) {                                                                           // 463
        if (!isArray(value) && !isPlainObject(value))                                                         // 464
          return null;                                                                                        // 465
        return distanceCoordinatePairs(point, value);                                                         // 466
      };                                                                                                      // 467
    }                                                                                                         // 468
                                                                                                              // 469
    return function (branchedValues) {                                                                        // 470
      // There might be multiple points in the document that match the given                                  // 471
      // field. Only one of them needs to be within $maxDistance, but we need to                              // 472
      // evaluate all of them and use the nearest one for the implicit sort                                   // 473
      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)                                    // 474
      //                                                                                                      // 475
      // Note: This differs from MongoDB's implementation, where a document will                              // 476
      // actually show up *multiple times* in the result set, with one entry for                              // 477
      // each within-$maxDistance branching point.                                                            // 478
      branchedValues = expandArraysInBranches(branchedValues);                                                // 479
      var result = {result: false};                                                                           // 480
      _.each(branchedValues, function (branch) {                                                              // 481
        var curDistance = distance(branch.value);                                                             // 482
        // Skip branches that aren't real points or are too far away.                                         // 483
        if (curDistance === null || curDistance > maxDistance)                                                // 484
          return;                                                                                             // 485
        // Skip anything that's a tie.                                                                        // 486
        if (result.distance !== undefined && result.distance <= curDistance)                                  // 487
          return;                                                                                             // 488
        result.result = true;                                                                                 // 489
        result.distance = curDistance;                                                                        // 490
        if (!branch.arrayIndices)                                                                             // 491
          delete result.arrayIndices;                                                                         // 492
        else                                                                                                  // 493
          result.arrayIndices = branch.arrayIndices;                                                          // 494
      });                                                                                                     // 495
      return result;                                                                                          // 496
    };                                                                                                        // 497
  }                                                                                                           // 498
};                                                                                                            // 499
                                                                                                              // 500
// Helpers for $near.                                                                                         // 501
var distanceCoordinatePairs = function (a, b) {                                                               // 502
  a = pointToArray(a);                                                                                        // 503
  b = pointToArray(b);                                                                                        // 504
  var x = a[0] - b[0];                                                                                        // 505
  var y = a[1] - b[1];                                                                                        // 506
  if (_.isNaN(x) || _.isNaN(y))                                                                               // 507
    return null;                                                                                              // 508
  return Math.sqrt(x * x + y * y);                                                                            // 509
};                                                                                                            // 510
// Makes sure we get 2 elements array and assume the first one to be x and                                    // 511
// the second one to y no matter what user passes.                                                            // 512
// In case user passes { lon: x, lat: y } returns [x, y]                                                      // 513
var pointToArray = function (point) {                                                                         // 514
  return _.map(point, _.identity);                                                                            // 515
};                                                                                                            // 516
                                                                                                              // 517
// Helper for $lt/$gt/$lte/$gte.                                                                              // 518
var makeInequality = function (cmpValueComparator) {                                                          // 519
  return {                                                                                                    // 520
    compileElementSelector: function (operand) {                                                              // 521
      // Arrays never compare false with non-arrays for any inequality.                                       // 522
      // XXX This was behavior we observed in pre-release MongoDB 2.5, but                                    // 523
      //     it seems to have been reverted.                                                                  // 524
      //     See https://jira.mongodb.org/browse/SERVER-11444                                                 // 525
      if (isArray(operand)) {                                                                                 // 526
        return function () {                                                                                  // 527
          return false;                                                                                       // 528
        };                                                                                                    // 529
      }                                                                                                       // 530
                                                                                                              // 531
      // Special case: consider undefined and null the same (so true with                                     // 532
      // $gte/$lte).                                                                                          // 533
      if (operand === undefined)                                                                              // 534
        operand = null;                                                                                       // 535
                                                                                                              // 536
      var operandType = LocalCollection._f._type(operand);                                                    // 537
                                                                                                              // 538
      return function (value) {                                                                               // 539
        if (value === undefined)                                                                              // 540
          value = null;                                                                                       // 541
        // Comparisons are never true among things of different type (except                                  // 542
        // null vs undefined).                                                                                // 543
        if (LocalCollection._f._type(value) !== operandType)                                                  // 544
          return false;                                                                                       // 545
        return cmpValueComparator(LocalCollection._f._cmp(value, operand));                                   // 546
      };                                                                                                      // 547
    }                                                                                                         // 548
  };                                                                                                          // 549
};                                                                                                            // 550
                                                                                                              // 551
// Each element selector contains:                                                                            // 552
//  - compileElementSelector, a function with args:                                                           // 553
//    - operand - the "right hand side" of the operator                                                       // 554
//    - valueSelector - the "context" for the operator (so that $regex can find                               // 555
//      $options)                                                                                             // 556
//    - matcher - the Matcher this is going into (so that $elemMatch can compile                              // 557
//      more things)                                                                                          // 558
//    returning a function mapping a single value to bool.                                                    // 559
//  - dontExpandLeafArrays, a bool which prevents expandArraysInBranches from                                 // 560
//    being called                                                                                            // 561
//  - dontIncludeLeafArrays, a bool which causes an argument to be passed to                                  // 562
//    expandArraysInBranches if it is called                                                                  // 563
ELEMENT_OPERATORS = {                                                                                         // 564
  $lt: makeInequality(function (cmpValue) {                                                                   // 565
    return cmpValue < 0;                                                                                      // 566
  }),                                                                                                         // 567
  $gt: makeInequality(function (cmpValue) {                                                                   // 568
    return cmpValue > 0;                                                                                      // 569
  }),                                                                                                         // 570
  $lte: makeInequality(function (cmpValue) {                                                                  // 571
    return cmpValue <= 0;                                                                                     // 572
  }),                                                                                                         // 573
  $gte: makeInequality(function (cmpValue) {                                                                  // 574
    return cmpValue >= 0;                                                                                     // 575
  }),                                                                                                         // 576
  $mod: {                                                                                                     // 577
    compileElementSelector: function (operand) {                                                              // 578
      if (!(isArray(operand) && operand.length === 2                                                          // 579
            && typeof(operand[0]) === 'number'                                                                // 580
            && typeof(operand[1]) === 'number')) {                                                            // 581
        throw Error("argument to $mod must be an array of two numbers");                                      // 582
      }                                                                                                       // 583
      // XXX could require to be ints or round or something                                                   // 584
      var divisor = operand[0];                                                                               // 585
      var remainder = operand[1];                                                                             // 586
      return function (value) {                                                                               // 587
        return typeof value === 'number' && value % divisor === remainder;                                    // 588
      };                                                                                                      // 589
    }                                                                                                         // 590
  },                                                                                                          // 591
  $in: {                                                                                                      // 592
    compileElementSelector: function (operand) {                                                              // 593
      if (!isArray(operand))                                                                                  // 594
        throw Error("$in needs an array");                                                                    // 595
                                                                                                              // 596
      var elementMatchers = [];                                                                               // 597
      _.each(operand, function (option) {                                                                     // 598
        if (option instanceof RegExp)                                                                         // 599
          elementMatchers.push(regexpElementMatcher(option));                                                 // 600
        else if (isOperatorObject(option))                                                                    // 601
          throw Error("cannot nest $ under $in");                                                             // 602
        else                                                                                                  // 603
          elementMatchers.push(equalityElementMatcher(option));                                               // 604
      });                                                                                                     // 605
                                                                                                              // 606
      return function (value) {                                                                               // 607
        // Allow {a: {$in: [null]}} to match when 'a' does not exist.                                         // 608
        if (value === undefined)                                                                              // 609
          value = null;                                                                                       // 610
        return _.any(elementMatchers, function (e) {                                                          // 611
          return e(value);                                                                                    // 612
        });                                                                                                   // 613
      };                                                                                                      // 614
    }                                                                                                         // 615
  },                                                                                                          // 616
  $size: {                                                                                                    // 617
    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we                                // 618
    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a                                // 619
    // possible value.                                                                                        // 620
    dontExpandLeafArrays: true,                                                                               // 621
    compileElementSelector: function (operand) {                                                              // 622
      if (typeof operand === 'string') {                                                                      // 623
        // Don't ask me why, but by experimentation, this seems to be what Mongo                              // 624
        // does.                                                                                              // 625
        operand = 0;                                                                                          // 626
      } else if (typeof operand !== 'number') {                                                               // 627
        throw Error("$size needs a number");                                                                  // 628
      }                                                                                                       // 629
      return function (value) {                                                                               // 630
        return isArray(value) && value.length === operand;                                                    // 631
      };                                                                                                      // 632
    }                                                                                                         // 633
  },                                                                                                          // 634
  $type: {                                                                                                    // 635
    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should                                 // 636
    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:                                 // 637
    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but                                 // 638
    // should *not* include it itself.                                                                        // 639
    dontIncludeLeafArrays: true,                                                                              // 640
    compileElementSelector: function (operand) {                                                              // 641
      if (typeof operand !== 'number')                                                                        // 642
        throw Error("$type needs a number");                                                                  // 643
      return function (value) {                                                                               // 644
        return value !== undefined                                                                            // 645
          && LocalCollection._f._type(value) === operand;                                                     // 646
      };                                                                                                      // 647
    }                                                                                                         // 648
  },                                                                                                          // 649
  $regex: {                                                                                                   // 650
    compileElementSelector: function (operand, valueSelector) {                                               // 651
      if (!(typeof operand === 'string' || operand instanceof RegExp))                                        // 652
        throw Error("$regex has to be a string or RegExp");                                                   // 653
                                                                                                              // 654
      var regexp;                                                                                             // 655
      if (valueSelector.$options !== undefined) {                                                             // 656
        // Options passed in $options (even the empty string) always overrides                                // 657
        // options in the RegExp object itself. (See also                                                     // 658
        // Mongo.Collection._rewriteSelector.)                                                                // 659
                                                                                                              // 660
        // Be clear that we only support the JS-supported options, not extended                               // 661
        // ones (eg, Mongo supports x and s). Ideally we would implement x and s                              // 662
        // by transforming the regexp, but not today...                                                       // 663
        if (/[^gim]/.test(valueSelector.$options))                                                            // 664
          throw new Error("Only the i, m, and g regexp options are supported");                               // 665
                                                                                                              // 666
        var regexSource = operand instanceof RegExp ? operand.source : operand;                               // 667
        regexp = new RegExp(regexSource, valueSelector.$options);                                             // 668
      } else if (operand instanceof RegExp) {                                                                 // 669
        regexp = operand;                                                                                     // 670
      } else {                                                                                                // 671
        regexp = new RegExp(operand);                                                                         // 672
      }                                                                                                       // 673
      return regexpElementMatcher(regexp);                                                                    // 674
    }                                                                                                         // 675
  },                                                                                                          // 676
  $elemMatch: {                                                                                               // 677
    dontExpandLeafArrays: true,                                                                               // 678
    compileElementSelector: function (operand, valueSelector, matcher) {                                      // 679
      if (!isPlainObject(operand))                                                                            // 680
        throw Error("$elemMatch need an object");                                                             // 681
                                                                                                              // 682
      var subMatcher, isDocMatcher;                                                                           // 683
      if (isOperatorObject(operand, true)) {                                                                  // 684
        subMatcher = compileValueSelector(operand, matcher);                                                  // 685
        isDocMatcher = false;                                                                                 // 686
      } else {                                                                                                // 687
        // This is NOT the same as compileValueSelector(operand), and not just                                // 688
        // because of the slightly different calling convention.                                              // 689
        // {$elemMatch: {x: 3}} means "an element has a field x:3", not                                       // 690
        // "consists only of a field x:3". Also, regexps and sub-$ are allowed.                               // 691
        subMatcher = compileDocumentSelector(operand, matcher,                                                // 692
                                             {inElemMatch: true});                                            // 693
        isDocMatcher = true;                                                                                  // 694
      }                                                                                                       // 695
                                                                                                              // 696
      return function (value) {                                                                               // 697
        if (!isArray(value))                                                                                  // 698
          return false;                                                                                       // 699
        for (var i = 0; i < value.length; ++i) {                                                              // 700
          var arrayElement = value[i];                                                                        // 701
          var arg;                                                                                            // 702
          if (isDocMatcher) {                                                                                 // 703
            // We can only match {$elemMatch: {b: 3}} against objects.                                        // 704
            // (We can also match against arrays, if there's numeric indices,                                 // 705
            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)                                          // 706
            if (!isPlainObject(arrayElement) && !isArray(arrayElement))                                       // 707
              return false;                                                                                   // 708
            arg = arrayElement;                                                                               // 709
          } else {                                                                                            // 710
            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches                                   // 711
            // {a: [8]} but not {a: [[8]]}                                                                    // 712
            arg = [{value: arrayElement, dontIterate: true}];                                                 // 713
          }                                                                                                   // 714
          // XXX support $near in $elemMatch by propagating $distance?                                        // 715
          if (subMatcher(arg).result)                                                                         // 716
            return i;   // specially understood to mean "use as arrayIndices"                                 // 717
        }                                                                                                     // 718
        return false;                                                                                         // 719
      };                                                                                                      // 720
    }                                                                                                         // 721
  }                                                                                                           // 722
};                                                                                                            // 723
                                                                                                              // 724
// makeLookupFunction(key) returns a lookup function.                                                         // 725
//                                                                                                            // 726
// A lookup function takes in a document and returns an array of matching                                     // 727
// branches.  If no arrays are found while looking up the key, this array will                                // 728
// have exactly one branches (possibly 'undefined', if some segment of the key                                // 729
// was not found).                                                                                            // 730
//                                                                                                            // 731
// If arrays are found in the middle, this can have more than one element, since                              // 732
// we "branch". When we "branch", if there are more key segments to look up,                                  // 733
// then we only pursue branches that are plain objects (not arrays or scalars).                               // 734
// This means we can actually end up with no branches!                                                        // 735
//                                                                                                            // 736
// We do *NOT* branch on arrays that are found at the end (ie, at the last                                    // 737
// dotted member of the key). We just return that array; if you want to                                       // 738
// effectively "branch" over the array's values, post-process the lookup                                      // 739
// function with expandArraysInBranches.                                                                      // 740
//                                                                                                            // 741
// Each branch is an object with keys:                                                                        // 742
//  - value: the value at the branch                                                                          // 743
//  - dontIterate: an optional bool; if true, it means that 'value' is an array                               // 744
//    that expandArraysInBranches should NOT expand. This specifically happens                                // 745
//    when there is a numeric index in the key, and ensures the                                               // 746
//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT                                           // 747
//    match {a: [[5]]}.                                                                                       // 748
//  - arrayIndices: if any array indexing was done during lookup (either due to                               // 749
//    explicit numeric indices or implicit branching), this will be an array of                               // 750
//    the array indices used, from outermost to innermost; it is falsey or                                    // 751
//    absent if no array index is used. If an explicit numeric index is used,                                 // 752
//    the index will be followed in arrayIndices by the string 'x'.                                           // 753
//                                                                                                            // 754
//    Note: arrayIndices is used for two purposes. First, it is used to                                       // 755
//    implement the '$' modifier feature, which only ever looks at its first                                  // 756
//    element.                                                                                                // 757
//                                                                                                            // 758
//    Second, it is used for sort key generation, which needs to be able to tell                              // 759
//    the difference between different paths. Moreover, it needs to                                           // 760
//    differentiate between explicit and implicit branching, which is why                                     // 761
//    there's the somewhat hacky 'x' entry: this means that explicit and                                      // 762
//    implicit array lookups will have different full arrayIndices paths. (That                               // 763
//    code only requires that different paths have different arrayIndices; it                                 // 764
//    doesn't actually "parse" arrayIndices. As an alternative, arrayIndices                                  // 765
//    could contain objects with flags like "implicit", but I think that only                                 // 766
//    makes the code surrounding them more complex.)                                                          // 767
//                                                                                                            // 768
//    (By the way, this field ends up getting passed around a lot without                                     // 769
//    cloning, so never mutate any arrayIndices field/var in this package!)                                   // 770
//                                                                                                            // 771
//                                                                                                            // 772
// At the top level, you may only pass in a plain object or array.                                            // 773
//                                                                                                            // 774
// See the test 'minimongo - lookup' for some examples of what lookup functions                               // 775
// return.                                                                                                    // 776
makeLookupFunction = function (key, options) {                                                                // 777
  options = options || {};                                                                                    // 778
  var parts = key.split('.');                                                                                 // 779
  var firstPart = parts.length ? parts[0] : '';                                                               // 780
  var firstPartIsNumeric = isNumericKey(firstPart);                                                           // 781
  var nextPartIsNumeric = parts.length >= 2 && isNumericKey(parts[1]);                                        // 782
  var lookupRest;                                                                                             // 783
  if (parts.length > 1) {                                                                                     // 784
    lookupRest = makeLookupFunction(parts.slice(1).join('.'));                                                // 785
  }                                                                                                           // 786
                                                                                                              // 787
  var omitUnnecessaryFields = function (retVal) {                                                             // 788
    if (!retVal.dontIterate)                                                                                  // 789
      delete retVal.dontIterate;                                                                              // 790
    if (retVal.arrayIndices && !retVal.arrayIndices.length)                                                   // 791
      delete retVal.arrayIndices;                                                                             // 792
    return retVal;                                                                                            // 793
  };                                                                                                          // 794
                                                                                                              // 795
  // Doc will always be a plain object or an array.                                                           // 796
  // apply an explicit numeric index, an array.                                                               // 797
  return function (doc, arrayIndices) {                                                                       // 798
    if (!arrayIndices)                                                                                        // 799
      arrayIndices = [];                                                                                      // 800
                                                                                                              // 801
    if (isArray(doc)) {                                                                                       // 802
      // If we're being asked to do an invalid lookup into an array (non-integer                              // 803
      // or out-of-bounds), return no results (which is different from returning                              // 804
      // a single undefined result, in that `null` equality checks won't match).                              // 805
      if (!(firstPartIsNumeric && firstPart < doc.length))                                                    // 806
        return [];                                                                                            // 807
                                                                                                              // 808
      // Remember that we used this array index. Include an 'x' to indicate that                              // 809
      // the previous index came from being considered as an explicit array                                   // 810
      // index (not branching).                                                                               // 811
      arrayIndices = arrayIndices.concat(+firstPart, 'x');                                                    // 812
    }                                                                                                         // 813
                                                                                                              // 814
    // Do our first lookup.                                                                                   // 815
    var firstLevel = doc[firstPart];                                                                          // 816
                                                                                                              // 817
    // If there is no deeper to dig, return what we found.                                                    // 818
    //                                                                                                        // 819
    // If what we found is an array, most value selectors will choose to treat                                // 820
    // the elements of the array as matchable values in their own right, but                                  // 821
    // that's done outside of the lookup function. (Exceptions to this are $size                              // 822
    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:                              // 823
    // [[1, 2]]}.)                                                                                            // 824
    //                                                                                                        // 825
    // That said, if we just did an *explicit* array lookup (on doc) to find                                  // 826
    // firstLevel, and firstLevel is an array too, we do NOT want value                                       // 827
    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.                               // 828
    // So in that case, we mark the return value as "don't iterate".                                          // 829
    if (!lookupRest) {                                                                                        // 830
      return [omitUnnecessaryFields({                                                                         // 831
        value: firstLevel,                                                                                    // 832
        dontIterate: isArray(doc) && isArray(firstLevel),                                                     // 833
        arrayIndices: arrayIndices})];                                                                        // 834
    }                                                                                                         // 835
                                                                                                              // 836
    // We need to dig deeper.  But if we can't, because what we've found is not                               // 837
    // an array or plain object, we're done. If we just did a numeric index into                              // 838
    // an array, we return nothing here (this is a change in Mongo 2.5 from                                   // 839
    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,                                // 840
    // return a single `undefined` (which can, for example, match via equality                                // 841
    // with `null`).                                                                                          // 842
    if (!isIndexable(firstLevel)) {                                                                           // 843
      if (isArray(doc))                                                                                       // 844
        return [];                                                                                            // 845
      return [omitUnnecessaryFields({value: undefined,                                                        // 846
                                      arrayIndices: arrayIndices})];                                          // 847
    }                                                                                                         // 848
                                                                                                              // 849
    var result = [];                                                                                          // 850
    var appendToResult = function (more) {                                                                    // 851
      Array.prototype.push.apply(result, more);                                                               // 852
    };                                                                                                        // 853
                                                                                                              // 854
    // Dig deeper: look up the rest of the parts on whatever we've found.                                     // 855
    // (lookupRest is smart enough to not try to do invalid lookups into                                      // 856
    // firstLevel if it's an array.)                                                                          // 857
    appendToResult(lookupRest(firstLevel, arrayIndices));                                                     // 858
                                                                                                              // 859
    // If we found an array, then in *addition* to potentially treating the next                              // 860
    // part as a literal integer lookup, we should also "branch": try to look up                              // 861
    // the rest of the parts on each array element in parallel.                                               // 862
    //                                                                                                        // 863
    // In this case, we *only* dig deeper into array elements that are plain                                  // 864
    // objects. (Recall that we only got this far if we have further to dig.)                                 // 865
    // This makes sense: we certainly don't dig deeper into non-indexable                                     // 866
    // objects. And it would be weird to dig into an array: it's simpler to have                              // 867
    // a rule that explicit integer indexes only apply to an outer array, not to                              // 868
    // an array you find after a branching search.                                                            // 869
    //                                                                                                        // 870
    // In the special case of a numeric part in a *sort selector* (not a query                                // 871
    // selector), we skip the branching: we ONLY allow the numeric part to mean                               // 872
    // "look up this index" in that case, not "also look up this index in all                                 // 873
    // the elements of the array".                                                                            // 874
    if (isArray(firstLevel) && !(nextPartIsNumeric && options.forSort)) {                                     // 875
      _.each(firstLevel, function (branch, arrayIndex) {                                                      // 876
        if (isPlainObject(branch)) {                                                                          // 877
          appendToResult(lookupRest(                                                                          // 878
            branch,                                                                                           // 879
            arrayIndices.concat(arrayIndex)));                                                                // 880
        }                                                                                                     // 881
      });                                                                                                     // 882
    }                                                                                                         // 883
                                                                                                              // 884
    return result;                                                                                            // 885
  };                                                                                                          // 886
};                                                                                                            // 887
MinimongoTest.makeLookupFunction = makeLookupFunction;                                                        // 888
                                                                                                              // 889
expandArraysInBranches = function (branches, skipTheArrays) {                                                 // 890
  var branchesOut = [];                                                                                       // 891
  _.each(branches, function (branch) {                                                                        // 892
    var thisIsArray = isArray(branch.value);                                                                  // 893
    // We include the branch itself, *UNLESS* we it's an array that we're going                               // 894
    // to iterate and we're told to skip arrays.  (That's right, we include some                              // 895
    // arrays even skipTheArrays is true: these are arrays that were found via                                // 896
    // explicit numerical indices.)                                                                           // 897
    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {                                             // 898
      branchesOut.push({                                                                                      // 899
        value: branch.value,                                                                                  // 900
        arrayIndices: branch.arrayIndices                                                                     // 901
      });                                                                                                     // 902
    }                                                                                                         // 903
    if (thisIsArray && !branch.dontIterate) {                                                                 // 904
      _.each(branch.value, function (leaf, i) {                                                               // 905
        branchesOut.push({                                                                                    // 906
          value: leaf,                                                                                        // 907
          arrayIndices: (branch.arrayIndices || []).concat(i)                                                 // 908
        });                                                                                                   // 909
      });                                                                                                     // 910
    }                                                                                                         // 911
  });                                                                                                         // 912
  return branchesOut;                                                                                         // 913
};                                                                                                            // 914
                                                                                                              // 915
var nothingMatcher = function (docOrBranchedValues) {                                                         // 916
  return {result: false};                                                                                     // 917
};                                                                                                            // 918
                                                                                                              // 919
var everythingMatcher = function (docOrBranchedValues) {                                                      // 920
  return {result: true};                                                                                      // 921
};                                                                                                            // 922
                                                                                                              // 923
                                                                                                              // 924
// NB: We are cheating and using this function to implement "AND" for both                                    // 925
// "document matchers" and "branched matchers". They both return result objects                               // 926
// but the argument is different: for the former it's a whole doc, whereas for                                // 927
// the latter it's an array of "branched values".                                                             // 928
var andSomeMatchers = function (subMatchers) {                                                                // 929
  if (subMatchers.length === 0)                                                                               // 930
    return everythingMatcher;                                                                                 // 931
  if (subMatchers.length === 1)                                                                               // 932
    return subMatchers[0];                                                                                    // 933
                                                                                                              // 934
  return function (docOrBranches) {                                                                           // 935
    var ret = {};                                                                                             // 936
    ret.result = _.all(subMatchers, function (f) {                                                            // 937
      var subResult = f(docOrBranches);                                                                       // 938
      // Copy a 'distance' number out of the first sub-matcher that has                                       // 939
      // one. Yes, this means that if there are multiple $near fields in a                                    // 940
      // query, something arbitrary happens; this appears to be consistent with                               // 941
      // Mongo.                                                                                               // 942
      if (subResult.result && subResult.distance !== undefined                                                // 943
          && ret.distance === undefined) {                                                                    // 944
        ret.distance = subResult.distance;                                                                    // 945
      }                                                                                                       // 946
      // Similarly, propagate arrayIndices from sub-matchers... but to match                                  // 947
      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices                                 // 948
      // wins.                                                                                                // 949
      if (subResult.result && subResult.arrayIndices) {                                                       // 950
        ret.arrayIndices = subResult.arrayIndices;                                                            // 951
      }                                                                                                       // 952
      return subResult.result;                                                                                // 953
    });                                                                                                       // 954
                                                                                                              // 955
    // If we didn't actually match, forget any extra metadata we came up with.                                // 956
    if (!ret.result) {                                                                                        // 957
      delete ret.distance;                                                                                    // 958
      delete ret.arrayIndices;                                                                                // 959
    }                                                                                                         // 960
    return ret;                                                                                               // 961
  };                                                                                                          // 962
};                                                                                                            // 963
                                                                                                              // 964
var andDocumentMatchers = andSomeMatchers;                                                                    // 965
var andBranchedMatchers = andSomeMatchers;                                                                    // 966
                                                                                                              // 967
                                                                                                              // 968
// helpers used by compiled selector code                                                                     // 969
LocalCollection._f = {                                                                                        // 970
  // XXX for _all and _in, consider building 'inquery' at compile time..                                      // 971
                                                                                                              // 972
  _type: function (v) {                                                                                       // 973
    if (typeof v === "number")                                                                                // 974
      return 1;                                                                                               // 975
    if (typeof v === "string")                                                                                // 976
      return 2;                                                                                               // 977
    if (typeof v === "boolean")                                                                               // 978
      return 8;                                                                                               // 979
    if (isArray(v))                                                                                           // 980
      return 4;                                                                                               // 981
    if (v === null)                                                                                           // 982
      return 10;                                                                                              // 983
    if (v instanceof RegExp)                                                                                  // 984
      // note that typeof(/x/) === "object"                                                                   // 985
      return 11;                                                                                              // 986
    if (typeof v === "function")                                                                              // 987
      return 13;                                                                                              // 988
    if (v instanceof Date)                                                                                    // 989
      return 9;                                                                                               // 990
    if (EJSON.isBinary(v))                                                                                    // 991
      return 5;                                                                                               // 992
    if (v instanceof MongoID.ObjectID)                                                                        // 993
      return 7;                                                                                               // 994
    return 3; // object                                                                                       // 995
                                                                                                              // 996
    // XXX support some/all of these:                                                                         // 997
    // 14, symbol                                                                                             // 998
    // 15, javascript code with scope                                                                         // 999
    // 16, 18: 32-bit/64-bit integer                                                                          // 1000
    // 17, timestamp                                                                                          // 1001
    // 255, minkey                                                                                            // 1002
    // 127, maxkey                                                                                            // 1003
  },                                                                                                          // 1004
                                                                                                              // 1005
  // deep equality test: use for literal document and array matches                                           // 1006
  _equal: function (a, b) {                                                                                   // 1007
    return EJSON.equals(a, b, {keyOrderSensitive: true});                                                     // 1008
  },                                                                                                          // 1009
                                                                                                              // 1010
  // maps a type code to a value that can be used to sort values of                                           // 1011
  // different types                                                                                          // 1012
  _typeorder: function (t) {                                                                                  // 1013
    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types                           // 1014
    // XXX what is the correct sort position for Javascript code?                                             // 1015
    // ('100' in the matrix below)                                                                            // 1016
    // XXX minkey/maxkey                                                                                      // 1017
    return [-1,  // (not a type)                                                                              // 1018
            1,   // number                                                                                    // 1019
            2,   // string                                                                                    // 1020
            3,   // object                                                                                    // 1021
            4,   // array                                                                                     // 1022
            5,   // binary                                                                                    // 1023
            -1,  // deprecated                                                                                // 1024
            6,   // ObjectID                                                                                  // 1025
            7,   // bool                                                                                      // 1026
            8,   // Date                                                                                      // 1027
            0,   // null                                                                                      // 1028
            9,   // RegExp                                                                                    // 1029
            -1,  // deprecated                                                                                // 1030
            100, // JS code                                                                                   // 1031
            2,   // deprecated (symbol)                                                                       // 1032
            100, // JS code                                                                                   // 1033
            1,   // 32-bit int                                                                                // 1034
            8,   // Mongo timestamp                                                                           // 1035
            1    // 64-bit int                                                                                // 1036
           ][t];                                                                                              // 1037
  },                                                                                                          // 1038
                                                                                                              // 1039
  // compare two values of unknown type according to BSON ordering                                            // 1040
  // semantics. (as an extension, consider 'undefined' to be less than                                        // 1041
  // any other value.) return negative if a is less, positive if b is                                         // 1042
  // less, or 0 if equal                                                                                      // 1043
  _cmp: function (a, b) {                                                                                     // 1044
    if (a === undefined)                                                                                      // 1045
      return b === undefined ? 0 : -1;                                                                        // 1046
    if (b === undefined)                                                                                      // 1047
      return 1;                                                                                               // 1048
    var ta = LocalCollection._f._type(a);                                                                     // 1049
    var tb = LocalCollection._f._type(b);                                                                     // 1050
    var oa = LocalCollection._f._typeorder(ta);                                                               // 1051
    var ob = LocalCollection._f._typeorder(tb);                                                               // 1052
    if (oa !== ob)                                                                                            // 1053
      return oa < ob ? -1 : 1;                                                                                // 1054
    if (ta !== tb)                                                                                            // 1055
      // XXX need to implement this if we implement Symbol or integers, or                                    // 1056
      // Timestamp                                                                                            // 1057
      throw Error("Missing type coercion logic in _cmp");                                                     // 1058
    if (ta === 7) { // ObjectID                                                                               // 1059
      // Convert to string.                                                                                   // 1060
      ta = tb = 2;                                                                                            // 1061
      a = a.toHexString();                                                                                    // 1062
      b = b.toHexString();                                                                                    // 1063
    }                                                                                                         // 1064
    if (ta === 9) { // Date                                                                                   // 1065
      // Convert to millis.                                                                                   // 1066
      ta = tb = 1;                                                                                            // 1067
      a = a.getTime();                                                                                        // 1068
      b = b.getTime();                                                                                        // 1069
    }                                                                                                         // 1070
                                                                                                              // 1071
    if (ta === 1) // double                                                                                   // 1072
      return a - b;                                                                                           // 1073
    if (tb === 2) // string                                                                                   // 1074
      return a < b ? -1 : (a === b ? 0 : 1);                                                                  // 1075
    if (ta === 3) { // Object                                                                                 // 1076
      // this could be much more efficient in the expected case ...                                           // 1077
      var to_array = function (obj) {                                                                         // 1078
        var ret = [];                                                                                         // 1079
        for (var key in obj) {                                                                                // 1080
          ret.push(key);                                                                                      // 1081
          ret.push(obj[key]);                                                                                 // 1082
        }                                                                                                     // 1083
        return ret;                                                                                           // 1084
      };                                                                                                      // 1085
      return LocalCollection._f._cmp(to_array(a), to_array(b));                                               // 1086
    }                                                                                                         // 1087
    if (ta === 4) { // Array                                                                                  // 1088
      for (var i = 0; ; i++) {                                                                                // 1089
        if (i === a.length)                                                                                   // 1090
          return (i === b.length) ? 0 : -1;                                                                   // 1091
        if (i === b.length)                                                                                   // 1092
          return 1;                                                                                           // 1093
        var s = LocalCollection._f._cmp(a[i], b[i]);                                                          // 1094
        if (s !== 0)                                                                                          // 1095
          return s;                                                                                           // 1096
      }                                                                                                       // 1097
    }                                                                                                         // 1098
    if (ta === 5) { // binary                                                                                 // 1099
      // Surprisingly, a small binary blob is always less than a large one in                                 // 1100
      // Mongo.                                                                                               // 1101
      if (a.length !== b.length)                                                                              // 1102
        return a.length - b.length;                                                                           // 1103
      for (i = 0; i < a.length; i++) {                                                                        // 1104
        if (a[i] < b[i])                                                                                      // 1105
          return -1;                                                                                          // 1106
        if (a[i] > b[i])                                                                                      // 1107
          return 1;                                                                                           // 1108
      }                                                                                                       // 1109
      return 0;                                                                                               // 1110
    }                                                                                                         // 1111
    if (ta === 8) { // boolean                                                                                // 1112
      if (a) return b ? 0 : 1;                                                                                // 1113
      return b ? -1 : 0;                                                                                      // 1114
    }                                                                                                         // 1115
    if (ta === 10) // null                                                                                    // 1116
      return 0;                                                                                               // 1117
    if (ta === 11) // regexp                                                                                  // 1118
      throw Error("Sorting not supported on regular expression"); // XXX                                      // 1119
    // 13: javascript code                                                                                    // 1120
    // 14: symbol                                                                                             // 1121
    // 15: javascript code with scope                                                                         // 1122
    // 16: 32-bit integer                                                                                     // 1123
    // 17: timestamp                                                                                          // 1124
    // 18: 64-bit integer                                                                                     // 1125
    // 255: minkey                                                                                            // 1126
    // 127: maxkey                                                                                            // 1127
    if (ta === 13) // javascript code                                                                         // 1128
      throw Error("Sorting not supported on Javascript code"); // XXX                                         // 1129
    throw Error("Unknown type to sort");                                                                      // 1130
  }                                                                                                           // 1131
};                                                                                                            // 1132
                                                                                                              // 1133
// Oddball function used by upsert.                                                                           // 1134
LocalCollection._removeDollarOperators = function (selector) {                                                // 1135
  var selectorDoc = {};                                                                                       // 1136
  for (var k in selector)                                                                                     // 1137
    if (k.substr(0, 1) !== '$')                                                                               // 1138
      selectorDoc[k] = selector[k];                                                                           // 1139
  return selectorDoc;                                                                                         // 1140
};                                                                                                            // 1141
                                                                                                              // 1142
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                            //
// packages/minimongo/sort.js                                                                                 //
//                                                                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                              //
// Give a sort spec, which can be in any of these forms:                                                      // 1
//   {"key1": 1, "key2": -1}                                                                                  // 2
//   [["key1", "asc"], ["key2", "desc"]]                                                                      // 3
//   ["key1", ["key2", "desc"]]                                                                               // 4
//                                                                                                            // 5
// (.. with the first form being dependent on the key enumeration                                             // 6
// behavior of your javascript VM, which usually does what you mean in                                        // 7
// this case if the key names don't look like integers ..)                                                    // 8
//                                                                                                            // 9
// return a function that takes two objects, and returns -1 if the                                            // 10
// first object comes first in order, 1 if the second object comes                                            // 11
// first, or 0 if neither object comes before the other.                                                      // 12
                                                                                                              // 13
Minimongo.Sorter = function (spec, options) {                                                                 // 14
  var self = this;                                                                                            // 15
  options = options || {};                                                                                    // 16
                                                                                                              // 17
  self._sortSpecParts = [];                                                                                   // 18
                                                                                                              // 19
  var addSpecPart = function (path, ascending) {                                                              // 20
    if (!path)                                                                                                // 21
      throw Error("sort keys must be non-empty");                                                             // 22
    if (path.charAt(0) === '$')                                                                               // 23
      throw Error("unsupported sort key: " + path);                                                           // 24
    self._sortSpecParts.push({                                                                                // 25
      path: path,                                                                                             // 26
      lookup: makeLookupFunction(path, {forSort: true}),                                                      // 27
      ascending: ascending                                                                                    // 28
    });                                                                                                       // 29
  };                                                                                                          // 30
                                                                                                              // 31
  if (spec instanceof Array) {                                                                                // 32
    for (var i = 0; i < spec.length; i++) {                                                                   // 33
      if (typeof spec[i] === "string") {                                                                      // 34
        addSpecPart(spec[i], true);                                                                           // 35
      } else {                                                                                                // 36
        addSpecPart(spec[i][0], spec[i][1] !== "desc");                                                       // 37
      }                                                                                                       // 38
    }                                                                                                         // 39
  } else if (typeof spec === "object") {                                                                      // 40
    _.each(spec, function (value, key) {                                                                      // 41
      addSpecPart(key, value >= 0);                                                                           // 42
    });                                                                                                       // 43
  } else {                                                                                                    // 44
    throw Error("Bad sort specification: " + JSON.stringify(spec));                                           // 45
  }                                                                                                           // 46
                                                                                                              // 47
  // To implement affectedByModifier, we piggy-back on top of Matcher's                                       // 48
  // affectedByModifier code; we create a selector that is affected by the same                               // 49
  // modifiers as this sort order. This is only implemented on the server.                                    // 50
  if (self.affectedByModifier) {                                                                              // 51
    var selector = {};                                                                                        // 52
    _.each(self._sortSpecParts, function (spec) {                                                             // 53
      selector[spec.path] = 1;                                                                                // 54
    });                                                                                                       // 55
    self._selectorForAffectedByModifier = new Minimongo.Matcher(selector);                                    // 56
  }                                                                                                           // 57
                                                                                                              // 58
  self._keyComparator = composeComparators(                                                                   // 59
    _.map(self._sortSpecParts, function (spec, i) {                                                           // 60
      return self._keyFieldComparator(i);                                                                     // 61
    }));                                                                                                      // 62
                                                                                                              // 63
  // If you specify a matcher for this Sorter, _keyFilter may be set to a                                     // 64
  // function which selects whether or not a given "sort key" (tuple of values                                // 65
  // for the different sort spec fields) is compatible with the selector.                                     // 66
  self._keyFilter = null;                                                                                     // 67
  options.matcher && self._useWithMatcher(options.matcher);                                                   // 68
};                                                                                                            // 69
                                                                                                              // 70
// In addition to these methods, sorter_project.js defines combineIntoProjection                              // 71
// on the server only.                                                                                        // 72
_.extend(Minimongo.Sorter.prototype, {                                                                        // 73
  getComparator: function (options) {                                                                         // 74
    var self = this;                                                                                          // 75
                                                                                                              // 76
    // If we have no distances, just use the comparator from the source                                       // 77
    // specification (which defaults to "everything is equal".                                                // 78
    if (!options || !options.distances) {                                                                     // 79
      return self._getBaseComparator();                                                                       // 80
    }                                                                                                         // 81
                                                                                                              // 82
    var distances = options.distances;                                                                        // 83
                                                                                                              // 84
    // Return a comparator which first tries the sort specification, and if that                              // 85
    // says "it's equal", breaks ties using $near distances.                                                  // 86
    return composeComparators([self._getBaseComparator(), function (a, b) {                                   // 87
      if (!distances.has(a._id))                                                                              // 88
        throw Error("Missing distance for " + a._id);                                                         // 89
      if (!distances.has(b._id))                                                                              // 90
        throw Error("Missing distance for " + b._id);                                                         // 91
      return distances.get(a._id) - distances.get(b._id);                                                     // 92
    }]);                                                                                                      // 93
  },                                                                                                          // 94
                                                                                                              // 95
  _getPaths: function () {                                                                                    // 96
    var self = this;                                                                                          // 97
    return _.pluck(self._sortSpecParts, 'path');                                                              // 98
  },                                                                                                          // 99
                                                                                                              // 100
  // Finds the minimum key from the doc, according to the sort specs.  (We say                                // 101
  // "minimum" here but this is with respect to the sort spec, so "descending"                                // 102
  // sort fields mean we're finding the max for that field.)                                                  // 103
  //                                                                                                          // 104
  // Note that this is NOT "find the minimum value of the first field, the                                    // 105
  // minimum value of the second field, etc"... it's "choose the                                              // 106
  // lexicographically minimum value of the key vector, allowing only keys which                              // 107
  // you can find along the same paths".  ie, for a doc {a: [{x: 0, y: 5}, {x:                                // 108
  // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and                              // 109
  // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.                                        // 110
  _getMinKeyFromDoc: function (doc) {                                                                         // 111
    var self = this;                                                                                          // 112
    var minKey = null;                                                                                        // 113
                                                                                                              // 114
    self._generateKeysFromDoc(doc, function (key) {                                                           // 115
      if (!self._keyCompatibleWithSelector(key))                                                              // 116
        return;                                                                                               // 117
                                                                                                              // 118
      if (minKey === null) {                                                                                  // 119
        minKey = key;                                                                                         // 120
        return;                                                                                               // 121
      }                                                                                                       // 122
      if (self._compareKeys(key, minKey) < 0) {                                                               // 123
        minKey = key;                                                                                         // 124
      }                                                                                                       // 125
    });                                                                                                       // 126
                                                                                                              // 127
    // This could happen if our key filter somehow filters out all the keys even                              // 128
    // though somehow the selector matches.                                                                   // 129
    if (minKey === null)                                                                                      // 130
      throw Error("sort selector found no keys in doc?");                                                     // 131
    return minKey;                                                                                            // 132
  },                                                                                                          // 133
                                                                                                              // 134
  _keyCompatibleWithSelector: function (key) {                                                                // 135
    var self = this;                                                                                          // 136
    return !self._keyFilter || self._keyFilter(key);                                                          // 137
  },                                                                                                          // 138
                                                                                                              // 139
  // Iterates over each possible "key" from doc (ie, over each branch), calling                               // 140
  // 'cb' with the key.                                                                                       // 141
  _generateKeysFromDoc: function (doc, cb) {                                                                  // 142
    var self = this;                                                                                          // 143
                                                                                                              // 144
    if (self._sortSpecParts.length === 0)                                                                     // 145
      throw new Error("can't generate keys without a spec");                                                  // 146
                                                                                                              // 147
    // maps index -> ({'' -> value} or {path -> value})                                                       // 148
    var valuesByIndexAndPath = [];                                                                            // 149
                                                                                                              // 150
    var pathFromIndices = function (indices) {                                                                // 151
      return indices.join(',') + ',';                                                                         // 152
    };                                                                                                        // 153
                                                                                                              // 154
    var knownPaths = null;                                                                                    // 155
                                                                                                              // 156
    _.each(self._sortSpecParts, function (spec, whichField) {                                                 // 157
      // Expand any leaf arrays that we find, and ignore those arrays                                         // 158
      // themselves.  (We never sort based on an array itself.)                                               // 159
      var branches = expandArraysInBranches(spec.lookup(doc), true);                                          // 160
                                                                                                              // 161
      // If there are no values for a key (eg, key goes to an empty array),                                   // 162
      // pretend we found one null value.                                                                     // 163
      if (!branches.length)                                                                                   // 164
        branches = [{value: null}];                                                                           // 165
                                                                                                              // 166
      var usedPaths = false;                                                                                  // 167
      valuesByIndexAndPath[whichField] = {};                                                                  // 168
      _.each(branches, function (branch) {                                                                    // 169
        if (!branch.arrayIndices) {                                                                           // 170
          // If there are no array indices for a branch, then it must be the                                  // 171
          // only branch, because the only thing that produces multiple branches                              // 172
          // is the use of arrays.                                                                            // 173
          if (branches.length > 1)                                                                            // 174
            throw Error("multiple branches but no array used?");                                              // 175
          valuesByIndexAndPath[whichField][''] = branch.value;                                                // 176
          return;                                                                                             // 177
        }                                                                                                     // 178
                                                                                                              // 179
        usedPaths = true;                                                                                     // 180
        var path = pathFromIndices(branch.arrayIndices);                                                      // 181
        if (_.has(valuesByIndexAndPath[whichField], path))                                                    // 182
          throw Error("duplicate path: " + path);                                                             // 183
        valuesByIndexAndPath[whichField][path] = branch.value;                                                // 184
                                                                                                              // 185
        // If two sort fields both go into arrays, they have to go into the                                   // 186
        // exact same arrays and we have to find the same paths.  This is                                     // 187
        // roughly the same condition that makes MongoDB throw this strange                                   // 188
        // error message.  eg, the main thing is that if sort spec is {a: 1,                                  // 189
        // b:1} then a and b cannot both be arrays.                                                           // 190
        //                                                                                                    // 191
        // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'                                 // 192
        // and 'a.x.y' are both arrays, but we don't allow this for now.                                      // 193
        // #NestedArraySort                                                                                   // 194
        // XXX achieve full compatibility here                                                                // 195
        if (knownPaths && !_.has(knownPaths, path)) {                                                         // 196
          throw Error("cannot index parallel arrays");                                                        // 197
        }                                                                                                     // 198
      });                                                                                                     // 199
                                                                                                              // 200
      if (knownPaths) {                                                                                       // 201
        // Similarly to above, paths must match everywhere, unless this is a                                  // 202
        // non-array field.                                                                                   // 203
        if (!_.has(valuesByIndexAndPath[whichField], '') &&                                                   // 204
            _.size(knownPaths) !== _.size(valuesByIndexAndPath[whichField])) {                                // 205
          throw Error("cannot index parallel arrays!");                                                       // 206
        }                                                                                                     // 207
      } else if (usedPaths) {                                                                                 // 208
        knownPaths = {};                                                                                      // 209
        _.each(valuesByIndexAndPath[whichField], function (x, path) {                                         // 210
          knownPaths[path] = true;                                                                            // 211
        });                                                                                                   // 212
      }                                                                                                       // 213
    });                                                                                                       // 214
                                                                                                              // 215
    if (!knownPaths) {                                                                                        // 216
      // Easy case: no use of arrays.                                                                         // 217
      var soleKey = _.map(valuesByIndexAndPath, function (values) {                                           // 218
        if (!_.has(values, ''))                                                                               // 219
          throw Error("no value in sole key case?");                                                          // 220
        return values[''];                                                                                    // 221
      });                                                                                                     // 222
      cb(soleKey);                                                                                            // 223
      return;                                                                                                 // 224
    }                                                                                                         // 225
                                                                                                              // 226
    _.each(knownPaths, function (x, path) {                                                                   // 227
      var key = _.map(valuesByIndexAndPath, function (values) {                                               // 228
        if (_.has(values, ''))                                                                                // 229
          return values[''];                                                                                  // 230
        if (!_.has(values, path))                                                                             // 231
          throw Error("missing path?");                                                                       // 232
        return values[path];                                                                                  // 233
      });                                                                                                     // 234
      cb(key);                                                                                                // 235
    });                                                                                                       // 236
  },                                                                                                          // 237
                                                                                                              // 238
  // Takes in two keys: arrays whose lengths match the number of spec                                         // 239
  // parts. Returns negative, 0, or positive based on using the sort spec to                                  // 240
  // compare fields.                                                                                          // 241
  _compareKeys: function (key1, key2) {                                                                       // 242
    var self = this;                                                                                          // 243
    if (key1.length !== self._sortSpecParts.length ||                                                         // 244
        key2.length !== self._sortSpecParts.length) {                                                         // 245
      throw Error("Key has wrong length");                                                                    // 246
    }                                                                                                         // 247
                                                                                                              // 248
    return self._keyComparator(key1, key2);                                                                   // 249
  },                                                                                                          // 250
                                                                                                              // 251
  // Given an index 'i', returns a comparator that compares two key arrays based                              // 252
  // on field 'i'.                                                                                            // 253
  _keyFieldComparator: function (i) {                                                                         // 254
    var self = this;                                                                                          // 255
    var invert = !self._sortSpecParts[i].ascending;                                                           // 256
    return function (key1, key2) {                                                                            // 257
      var compare = LocalCollection._f._cmp(key1[i], key2[i]);                                                // 258
      if (invert)                                                                                             // 259
        compare = -compare;                                                                                   // 260
      return compare;                                                                                         // 261
    };                                                                                                        // 262
  },                                                                                                          // 263
                                                                                                              // 264
  // Returns a comparator that represents the sort specification (but not                                     // 265
  // including a possible geoquery distance tie-breaker).                                                     // 266
  _getBaseComparator: function () {                                                                           // 267
    var self = this;                                                                                          // 268
                                                                                                              // 269
    // If we're only sorting on geoquery distance and no specs, just say                                      // 270
    // everything is equal.                                                                                   // 271
    if (!self._sortSpecParts.length) {                                                                        // 272
      return function (doc1, doc2) {                                                                          // 273
        return 0;                                                                                             // 274
      };                                                                                                      // 275
    }                                                                                                         // 276
                                                                                                              // 277
    return function (doc1, doc2) {                                                                            // 278
      var key1 = self._getMinKeyFromDoc(doc1);                                                                // 279
      var key2 = self._getMinKeyFromDoc(doc2);                                                                // 280
      return self._compareKeys(key1, key2);                                                                   // 281
    };                                                                                                        // 282
  },                                                                                                          // 283
                                                                                                              // 284
  // In MongoDB, if you have documents                                                                        // 285
  //    {_id: 'x', a: [1, 10]} and                                                                            // 286
  //    {_id: 'y', a: [5, 15]},                                                                               // 287
  // then C.find({}, {sort: {a: 1}}) puts x before y (1 comes before 5).                                      // 288
  // But  C.find({a: {$gt: 3}}, {sort: {a: 1}}) puts y before x (1 does not                                   // 289
  // match the selector, and 5 comes before 10).                                                              // 290
  //                                                                                                          // 291
  // The way this works is pretty subtle!  For example, if the documents                                      // 292
  // are instead {_id: 'x', a: [{x: 1}, {x: 10}]}) and                                                        // 293
  //             {_id: 'y', a: [{x: 5}, {x: 15}]}),                                                           // 294
  // then C.find({'a.x': {$gt: 3}}, {sort: {'a.x': 1}}) and                                                   // 295
  //      C.find({a: {$elemMatch: {x: {$gt: 3}}}}, {sort: {'a.x': 1}})                                        // 296
  // both follow this rule (y before x).  (ie, you do have to apply this                                      // 297
  // through $elemMatch.)                                                                                     // 298
  //                                                                                                          // 299
  // So if you pass a matcher to this sorter's constructor, we will attempt to                                // 300
  // skip sort keys that don't match the selector. The logic here is pretty                                   // 301
  // subtle and undocumented; we've gotten as close as we can figure out based                                // 302
  // on our understanding of Mongo's behavior.                                                                // 303
  _useWithMatcher: function (matcher) {                                                                       // 304
    var self = this;                                                                                          // 305
                                                                                                              // 306
    if (self._keyFilter)                                                                                      // 307
      throw Error("called _useWithMatcher twice?");                                                           // 308
                                                                                                              // 309
    // If we are only sorting by distance, then we're not going to bother to                                  // 310
    // build a key filter.                                                                                    // 311
    // XXX figure out how geoqueries interact with this stuff                                                 // 312
    if (_.isEmpty(self._sortSpecParts))                                                                       // 313
      return;                                                                                                 // 314
                                                                                                              // 315
    var selector = matcher._selector;                                                                         // 316
                                                                                                              // 317
    // If the user just passed a literal function to find(), then we can't get a                              // 318
    // key filter from it.                                                                                    // 319
    if (selector instanceof Function)                                                                         // 320
      return;                                                                                                 // 321
                                                                                                              // 322
    var constraintsByPath = {};                                                                               // 323
    _.each(self._sortSpecParts, function (spec, i) {                                                          // 324
      constraintsByPath[spec.path] = [];                                                                      // 325
    });                                                                                                       // 326
                                                                                                              // 327
    _.each(selector, function (subSelector, key) {                                                            // 328
      // XXX support $and and $or                                                                             // 329
                                                                                                              // 330
      var constraints = constraintsByPath[key];                                                               // 331
      if (!constraints)                                                                                       // 332
        return;                                                                                               // 333
                                                                                                              // 334
      // XXX it looks like the real MongoDB implementation isn't "does the                                    // 335
      // regexp match" but "does the value fall into a range named by the                                     // 336
      // literal prefix of the regexp", ie "foo" in /^foo(bar|baz)+/  But                                     // 337
      // "does the regexp match" is a good approximation.                                                     // 338
      if (subSelector instanceof RegExp) {                                                                    // 339
        // As far as we can tell, using either of the options that both we and                                // 340
        // MongoDB support ('i' and 'm') disables use of the key filter. This                                 // 341
        // makes sense: MongoDB mostly appears to be calculating ranges of an                                 // 342
        // index to use, which means it only cares about regexps that match                                   // 343
        // one range (with a literal prefix), and both 'i' and 'm' prevent the                                // 344
        // literal prefix of the regexp from actually meaning one range.                                      // 345
        if (subSelector.ignoreCase || subSelector.multiline)                                                  // 346
          return;                                                                                             // 347
        constraints.push(regexpElementMatcher(subSelector));                                                  // 348
        return;                                                                                               // 349
      }                                                                                                       // 350
                                                                                                              // 351
      if (isOperatorObject(subSelector)) {                                                                    // 352
        _.each(subSelector, function (operand, operator) {                                                    // 353
          if (_.contains(['$lt', '$lte', '$gt', '$gte'], operator)) {                                         // 354
            // XXX this depends on us knowing that these operators don't use any                              // 355
            // of the arguments to compileElementSelector other than operand.                                 // 356
            constraints.push(                                                                                 // 357
              ELEMENT_OPERATORS[operator].compileElementSelector(operand));                                   // 358
          }                                                                                                   // 359
                                                                                                              // 360
          // See comments in the RegExp block above.                                                          // 361
          if (operator === '$regex' && !subSelector.$options) {                                               // 362
            constraints.push(                                                                                 // 363
              ELEMENT_OPERATORS.$regex.compileElementSelector(                                                // 364
                operand, subSelector));                                                                       // 365
          }                                                                                                   // 366
                                                                                                              // 367
          // XXX support {$exists: true}, $mod, $type, $in, $elemMatch                                        // 368
        });                                                                                                   // 369
        return;                                                                                               // 370
      }                                                                                                       // 371
                                                                                                              // 372
      // OK, it's an equality thing.                                                                          // 373
      constraints.push(equalityElementMatcher(subSelector));                                                  // 374
    });                                                                                                       // 375
                                                                                                              // 376
    // It appears that the first sort field is treated differently from the                                   // 377
    // others; we shouldn't create a key filter unless the first sort field is                                // 378
    // restricted, though after that point we can restrict the other sort fields                              // 379
    // or not as we wish.                                                                                     // 380
    if (_.isEmpty(constraintsByPath[self._sortSpecParts[0].path]))                                            // 381
      return;                                                                                                 // 382
                                                                                                              // 383
    self._keyFilter = function (key) {                                                                        // 384
      return _.all(self._sortSpecParts, function (specPart, index) {                                          // 385
        return _.all(constraintsByPath[specPart.path], function (f) {                                         // 386
          return f(key[index]);                                                                               // 387
        });                                                                                                   // 388
      });                                                                                                     // 389
    };                                                                                                        // 390
  }                                                                                                           // 391
});                                                                                                           // 392
                                                                                                              // 393
// Given an array of comparators                                                                              // 394
// (functions (a,b)->(negative or positive or zero)), returns a single                                        // 395
// comparator which uses each comparator in order and returns the first                                       // 396
// non-zero value.                                                                                            // 397
var composeComparators = function (comparatorArray) {                                                         // 398
  return function (a, b) {                                                                                    // 399
    for (var i = 0; i < comparatorArray.length; ++i) {                                                        // 400
      var compare = comparatorArray[i](a, b);                                                                 // 401
      if (compare !== 0)                                                                                      // 402
        return compare;                                                                                       // 403
    }                                                                                                         // 404
    return 0;                                                                                                 // 405
  };                                                                                                          // 406
};                                                                                                            // 407
                                                                                                              // 408
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                            //
// packages/minimongo/projection.js                                                                           //
//                                                                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                              //
// Knows how to compile a fields projection to a predicate function.                                          // 1
// @returns - Function: a closure that filters out an object according to the                                 // 2
//            fields projection rules:                                                                        // 3
//            @param obj - Object: MongoDB-styled document                                                    // 4
//            @returns - Object: a document with the fields filtered out                                      // 5
//                       according to projection rules. Doesn't retain subfields                              // 6
//                       of passed argument.                                                                  // 7
LocalCollection._compileProjection = function (fields) {                                                      // 8
  LocalCollection._checkSupportedProjection(fields);                                                          // 9
                                                                                                              // 10
  var _idProjection = _.isUndefined(fields._id) ? true : fields._id;                                          // 11
  var details = projectionDetails(fields);                                                                    // 12
                                                                                                              // 13
  // returns transformed doc according to ruleTree                                                            // 14
  var transform = function (doc, ruleTree) {                                                                  // 15
    // Special case for "sets"                                                                                // 16
    if (_.isArray(doc))                                                                                       // 17
      return _.map(doc, function (subdoc) { return transform(subdoc, ruleTree); });                           // 18
                                                                                                              // 19
    var res = details.including ? {} : EJSON.clone(doc);                                                      // 20
    _.each(ruleTree, function (rule, key) {                                                                   // 21
      if (!_.has(doc, key))                                                                                   // 22
        return;                                                                                               // 23
      if (_.isObject(rule)) {                                                                                 // 24
        // For sub-objects/subsets we branch                                                                  // 25
        if (_.isObject(doc[key]))                                                                             // 26
          res[key] = transform(doc[key], rule);                                                               // 27
        // Otherwise we don't even touch this subfield                                                        // 28
      } else if (details.including)                                                                           // 29
        res[key] = EJSON.clone(doc[key]);                                                                     // 30
      else                                                                                                    // 31
        delete res[key];                                                                                      // 32
    });                                                                                                       // 33
                                                                                                              // 34
    return res;                                                                                               // 35
  };                                                                                                          // 36
                                                                                                              // 37
  return function (obj) {                                                                                     // 38
    var res = transform(obj, details.tree);                                                                   // 39
                                                                                                              // 40
    if (_idProjection && _.has(obj, '_id'))                                                                   // 41
      res._id = obj._id;                                                                                      // 42
    if (!_idProjection && _.has(res, '_id'))                                                                  // 43
      delete res._id;                                                                                         // 44
    return res;                                                                                               // 45
  };                                                                                                          // 46
};                                                                                                            // 47
                                                                                                              // 48
// Traverses the keys of passed projection and constructs a tree where all                                    // 49
// leaves are either all True or all False                                                                    // 50
// @returns Object:                                                                                           // 51
//  - tree - Object - tree representation of keys involved in projection                                      // 52
//  (exception for '_id' as it is a special case handled separately)                                          // 53
//  - including - Boolean - "take only certain fields" type of projection                                     // 54
projectionDetails = function (fields) {                                                                       // 55
  // Find the non-_id keys (_id is handled specially because it is included unless                            // 56
  // explicitly excluded). Sort the keys, so that our code to detect overlaps                                 // 57
  // like 'foo' and 'foo.bar' can assume that 'foo' comes first.                                              // 58
  var fieldsKeys = _.keys(fields).sort();                                                                     // 59
                                                                                                              // 60
  // If _id is the only field in the projection, do not remove it, since it is                                // 61
  // required to determine if this is an exclusion or exclusion. Also keep an                                 // 62
  // inclusive _id, since inclusive _id follows the normal rules about mixing                                 // 63
  // inclusive and exclusive fields. If _id is not the only field in the                                      // 64
  // projection and is exclusive, remove it so it can be handled later by a                                   // 65
  // special case, since exclusive _id is always allowed.                                                     // 66
  if (fieldsKeys.length > 0 &&                                                                                // 67
      !(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') &&                                                // 68
      !(_.contains(fieldsKeys, '_id') && fields['_id']))                                                      // 69
    fieldsKeys = _.reject(fieldsKeys, function (key) { return key === '_id'; });                              // 70
                                                                                                              // 71
  var including = null; // Unknown                                                                            // 72
                                                                                                              // 73
  _.each(fieldsKeys, function (keyPath) {                                                                     // 74
    var rule = !!fields[keyPath];                                                                             // 75
    if (including === null)                                                                                   // 76
      including = rule;                                                                                       // 77
    if (including !== rule)                                                                                   // 78
      // This error message is copied from MongoDB shell                                                      // 79
      throw MinimongoError("You cannot currently mix including and excluding fields.");                       // 80
  });                                                                                                         // 81
                                                                                                              // 82
                                                                                                              // 83
  var projectionRulesTree = pathsToTree(                                                                      // 84
    fieldsKeys,                                                                                               // 85
    function (path) { return including; },                                                                    // 86
    function (node, path, fullPath) {                                                                         // 87
      // Check passed projection fields' keys: If you have two rules such as                                  // 88
      // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If                                   // 89
      // that happens, there is a probability you are doing something wrong,                                  // 90
      // framework should notify you about such mistake earlier on cursor                                     // 91
      // compilation step than later during runtime.  Note, that real mongo                                   // 92
      // doesn't do anything about it and the later rule appears in projection                                // 93
      // project, more priority it takes.                                                                     // 94
      //                                                                                                      // 95
      // Example, assume following in mongo shell:                                                            // 96
      // > db.coll.insert({ a: { b: 23, c: 44 } })                                                            // 97
      // > db.coll.find({}, { 'a': 1, 'a.b': 1 })                                                             // 98
      // { "_id" : ObjectId("520bfe456024608e8ef24af3"), "a" : { "b" : 23 } }                                 // 99
      // > db.coll.find({}, { 'a.b': 1, 'a': 1 })                                                             // 100
      // { "_id" : ObjectId("520bfe456024608e8ef24af3"), "a" : { "b" : 23, "c" : 44 } }                       // 101
      //                                                                                                      // 102
      // Note, how second time the return set of keys is different.                                           // 103
                                                                                                              // 104
      var currentPath = fullPath;                                                                             // 105
      var anotherPath = path;                                                                                 // 106
      throw MinimongoError("both " + currentPath + " and " + anotherPath +                                    // 107
                           " found in fields option, using both of them may trigger " +                       // 108
                           "unexpected behavior. Did you mean to use only one of them?");                     // 109
    });                                                                                                       // 110
                                                                                                              // 111
  return {                                                                                                    // 112
    tree: projectionRulesTree,                                                                                // 113
    including: including                                                                                      // 114
  };                                                                                                          // 115
};                                                                                                            // 116
                                                                                                              // 117
// paths - Array: list of mongo style paths                                                                   // 118
// newLeafFn - Function: of form function(path) should return a scalar value to                               // 119
//                       put into list created for that path                                                  // 120
// conflictFn - Function: of form function(node, path, fullPath) is called                                    // 121
//                        when building a tree path for 'fullPath' node on                                    // 122
//                        'path' was already a leaf with a value. Must return a                               // 123
//                        conflict resolution.                                                                // 124
// initial tree - Optional Object: starting tree.                                                             // 125
// @returns - Object: tree represented as a set of nested objects                                             // 126
pathsToTree = function (paths, newLeafFn, conflictFn, tree) {                                                 // 127
  tree = tree || {};                                                                                          // 128
  _.each(paths, function (keyPath) {                                                                          // 129
    var treePos = tree;                                                                                       // 130
    var pathArr = keyPath.split('.');                                                                         // 131
                                                                                                              // 132
    // use _.all just for iteration with break                                                                // 133
    var success = _.all(pathArr.slice(0, -1), function (key, idx) {                                           // 134
      if (!_.has(treePos, key))                                                                               // 135
        treePos[key] = {};                                                                                    // 136
      else if (!_.isObject(treePos[key])) {                                                                   // 137
        treePos[key] = conflictFn(treePos[key],                                                               // 138
                                  pathArr.slice(0, idx + 1).join('.'),                                        // 139
                                  keyPath);                                                                   // 140
        // break out of loop if we are failing for this path                                                  // 141
        if (!_.isObject(treePos[key]))                                                                        // 142
          return false;                                                                                       // 143
      }                                                                                                       // 144
                                                                                                              // 145
      treePos = treePos[key];                                                                                 // 146
      return true;                                                                                            // 147
    });                                                                                                       // 148
                                                                                                              // 149
    if (success) {                                                                                            // 150
      var lastKey = _.last(pathArr);                                                                          // 151
      if (!_.has(treePos, lastKey))                                                                           // 152
        treePos[lastKey] = newLeafFn(keyPath);                                                                // 153
      else                                                                                                    // 154
        treePos[lastKey] = conflictFn(treePos[lastKey], keyPath, keyPath);                                    // 155
    }                                                                                                         // 156
  });                                                                                                         // 157
                                                                                                              // 158
  return tree;                                                                                                // 159
};                                                                                                            // 160
                                                                                                              // 161
LocalCollection._checkSupportedProjection = function (fields) {                                               // 162
  if (!_.isObject(fields) || _.isArray(fields))                                                               // 163
    throw MinimongoError("fields option must be an object");                                                  // 164
                                                                                                              // 165
  _.each(fields, function (val, keyPath) {                                                                    // 166
    if (_.contains(keyPath.split('.'), '$'))                                                                  // 167
      throw MinimongoError("Minimongo doesn't support $ operator in projections yet.");                       // 168
    if (typeof val === 'object' && _.intersection(['$elemMatch', '$meta', '$slice'], _.keys(val)).length > 0)
      throw MinimongoError("Minimongo doesn't support operators in projections yet.");                        // 170
    if (_.indexOf([1, 0, true, false], val) === -1)                                                           // 171
      throw MinimongoError("Projection values should be one of 1, 0, true, or false");                        // 172
  });                                                                                                         // 173
};                                                                                                            // 174
                                                                                                              // 175
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                            //
// packages/minimongo/modify.js                                                                               //
//                                                                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                              //
// XXX need a strategy for passing the binding of $ into this                                                 // 1
// function, from the compiled selector                                                                       // 2
//                                                                                                            // 3
// maybe just {key.up.to.just.before.dollarsign: array_index}                                                 // 4
//                                                                                                            // 5
// XXX atomicity: if one modification fails, do we roll back the whole                                        // 6
// change?                                                                                                    // 7
//                                                                                                            // 8
// options:                                                                                                   // 9
//   - isInsert is set when _modify is being called to compute the document to                                // 10
//     insert as part of an upsert operation. We use this primarily to figure                                 // 11
//     out when to set the fields in $setOnInsert, if present.                                                // 12
LocalCollection._modify = function (doc, mod, options) {                                                      // 13
  options = options || {};                                                                                    // 14
  if (!isPlainObject(mod))                                                                                    // 15
    throw MinimongoError("Modifier must be an object");                                                       // 16
                                                                                                              // 17
  // Make sure the caller can't mutate our data structures.                                                   // 18
  mod = EJSON.clone(mod);                                                                                     // 19
                                                                                                              // 20
  var isModifier = isOperatorObject(mod);                                                                     // 21
                                                                                                              // 22
  var newDoc;                                                                                                 // 23
                                                                                                              // 24
  if (!isModifier) {                                                                                          // 25
    if (mod._id && !EJSON.equals(doc._id, mod._id))                                                           // 26
      throw MinimongoError("Cannot change the _id of a document");                                            // 27
                                                                                                              // 28
    // replace the whole document                                                                             // 29
    for (var k in mod) {                                                                                      // 30
      if (/\./.test(k))                                                                                       // 31
        throw MinimongoError(                                                                                 // 32
          "When replacing document, field name may not contain '.'");                                         // 33
    }                                                                                                         // 34
    newDoc = mod;                                                                                             // 35
  } else {                                                                                                    // 36
    // apply modifiers to the doc.                                                                            // 37
    newDoc = EJSON.clone(doc);                                                                                // 38
                                                                                                              // 39
    _.each(mod, function (operand, op) {                                                                      // 40
      var modFunc = MODIFIERS[op];                                                                            // 41
      // Treat $setOnInsert as $set if this is an insert.                                                     // 42
      if (options.isInsert && op === '$setOnInsert')                                                          // 43
        modFunc = MODIFIERS['$set'];                                                                          // 44
      if (!modFunc)                                                                                           // 45
        throw MinimongoError("Invalid modifier specified " + op);                                             // 46
      _.each(operand, function (arg, keypath) {                                                               // 47
        if (keypath === '') {                                                                                 // 48
          throw MinimongoError("An empty update path is not valid.");                                         // 49
        }                                                                                                     // 50
                                                                                                              // 51
        if (keypath === '_id') {                                                                              // 52
          throw MinimongoError("Mod on _id not allowed");                                                     // 53
        }                                                                                                     // 54
                                                                                                              // 55
        var keyparts = keypath.split('.');                                                                    // 56
                                                                                                              // 57
        if (! _.all(keyparts, _.identity)) {                                                                  // 58
          throw MinimongoError(                                                                               // 59
            "The update path '" + keypath +                                                                   // 60
              "' contains an empty field name, which is not allowed.");                                       // 61
        }                                                                                                     // 62
                                                                                                              // 63
        var noCreate = _.has(NO_CREATE_MODIFIERS, op);                                                        // 64
        var forbidArray = (op === "$rename");                                                                 // 65
        var target = findModTarget(newDoc, keyparts, {                                                        // 66
          noCreate: NO_CREATE_MODIFIERS[op],                                                                  // 67
          forbidArray: (op === "$rename"),                                                                    // 68
          arrayIndices: options.arrayIndices                                                                  // 69
        });                                                                                                   // 70
        var field = keyparts.pop();                                                                           // 71
        modFunc(target, field, arg, keypath, newDoc);                                                         // 72
      });                                                                                                     // 73
    });                                                                                                       // 74
  }                                                                                                           // 75
                                                                                                              // 76
  // move new document into place.                                                                            // 77
  _.each(_.keys(doc), function (k) {                                                                          // 78
    // Note: this used to be for (var k in doc) however, this does not                                        // 79
    // work right in Opera. Deleting from a doc while iterating over it                                       // 80
    // would sometimes cause opera to skip some keys.                                                         // 81
    if (k !== '_id')                                                                                          // 82
      delete doc[k];                                                                                          // 83
  });                                                                                                         // 84
  _.each(newDoc, function (v, k) {                                                                            // 85
    doc[k] = v;                                                                                               // 86
  });                                                                                                         // 87
};                                                                                                            // 88
                                                                                                              // 89
// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],                                        // 90
// and then you would operate on the 'e' property of the returned                                             // 91
// object.                                                                                                    // 92
//                                                                                                            // 93
// if options.noCreate is falsey, creates intermediate levels of                                              // 94
// structure as necessary, like mkdir -p (and raises an exception if                                          // 95
// that would mean giving a non-numeric property to an array.) if                                             // 96
// options.noCreate is true, return undefined instead.                                                        // 97
//                                                                                                            // 98
// may modify the last element of keyparts to signal to the caller that it needs                              // 99
// to use a different value to index into the returned object (for example,                                   // 100
// ['a', '01'] -> ['a', 1]).                                                                                  // 101
//                                                                                                            // 102
// if forbidArray is true, return null if the keypath goes through an array.                                  // 103
//                                                                                                            // 104
// if options.arrayIndices is set, use its first element for the (first) '$' in                               // 105
// the path.                                                                                                  // 106
var findModTarget = function (doc, keyparts, options) {                                                       // 107
  options = options || {};                                                                                    // 108
  var usedArrayIndex = false;                                                                                 // 109
  for (var i = 0; i < keyparts.length; i++) {                                                                 // 110
    var last = (i === keyparts.length - 1);                                                                   // 111
    var keypart = keyparts[i];                                                                                // 112
    var indexable = isIndexable(doc);                                                                         // 113
    if (!indexable) {                                                                                         // 114
      if (options.noCreate)                                                                                   // 115
        return undefined;                                                                                     // 116
      var e = MinimongoError(                                                                                 // 117
        "cannot use the part '" + keypart + "' to traverse " + doc);                                          // 118
      e.setPropertyError = true;                                                                              // 119
      throw e;                                                                                                // 120
    }                                                                                                         // 121
    if (doc instanceof Array) {                                                                               // 122
      if (options.forbidArray)                                                                                // 123
        return null;                                                                                          // 124
      if (keypart === '$') {                                                                                  // 125
        if (usedArrayIndex)                                                                                   // 126
          throw MinimongoError("Too many positional (i.e. '$') elements");                                    // 127
        if (!options.arrayIndices || !options.arrayIndices.length) {                                          // 128
          throw MinimongoError("The positional operator did not find the " +                                  // 129
                               "match needed from the query");                                                // 130
        }                                                                                                     // 131
        keypart = options.arrayIndices[0];                                                                    // 132
        usedArrayIndex = true;                                                                                // 133
      } else if (isNumericKey(keypart)) {                                                                     // 134
        keypart = parseInt(keypart);                                                                          // 135
      } else {                                                                                                // 136
        if (options.noCreate)                                                                                 // 137
          return undefined;                                                                                   // 138
        throw MinimongoError(                                                                                 // 139
          "can't append to array using string field name ["                                                   // 140
                    + keypart + "]");                                                                         // 141
      }                                                                                                       // 142
      if (last)                                                                                               // 143
        // handle 'a.01'                                                                                      // 144
        keyparts[i] = keypart;                                                                                // 145
      if (options.noCreate && keypart >= doc.length)                                                          // 146
        return undefined;                                                                                     // 147
      while (doc.length < keypart)                                                                            // 148
        doc.push(null);                                                                                       // 149
      if (!last) {                                                                                            // 150
        if (doc.length === keypart)                                                                           // 151
          doc.push({});                                                                                       // 152
        else if (typeof doc[keypart] !== "object")                                                            // 153
          throw MinimongoError("can't modify field '" + keyparts[i + 1] +                                     // 154
                      "' of list value " + JSON.stringify(doc[keypart]));                                     // 155
      }                                                                                                       // 156
    } else {                                                                                                  // 157
      if (keypart.length && keypart.substr(0, 1) === '$')                                                     // 158
        throw MinimongoError("can't set field named " + keypart);                                             // 159
      if (!(keypart in doc)) {                                                                                // 160
        if (options.noCreate)                                                                                 // 161
          return undefined;                                                                                   // 162
        if (!last)                                                                                            // 163
          doc[keypart] = {};                                                                                  // 164
      }                                                                                                       // 165
    }                                                                                                         // 166
                                                                                                              // 167
    if (last)                                                                                                 // 168
      return doc;                                                                                             // 169
    doc = doc[keypart];                                                                                       // 170
  }                                                                                                           // 171
                                                                                                              // 172
  // notreached                                                                                               // 173
};                                                                                                            // 174
                                                                                                              // 175
var NO_CREATE_MODIFIERS = {                                                                                   // 176
  $unset: true,                                                                                               // 177
  $pop: true,                                                                                                 // 178
  $rename: true,                                                                                              // 179
  $pull: true,                                                                                                // 180
  $pullAll: true                                                                                              // 181
};                                                                                                            // 182
                                                                                                              // 183
var MODIFIERS = {                                                                                             // 184
  $inc: function (target, field, arg) {                                                                       // 185
    if (typeof arg !== "number")                                                                              // 186
      throw MinimongoError("Modifier $inc allowed for numbers only");                                         // 187
    if (field in target) {                                                                                    // 188
      if (typeof target[field] !== "number")                                                                  // 189
        throw MinimongoError("Cannot apply $inc modifier to non-number");                                     // 190
      target[field] += arg;                                                                                   // 191
    } else {                                                                                                  // 192
      target[field] = arg;                                                                                    // 193
    }                                                                                                         // 194
  },                                                                                                          // 195
  $set: function (target, field, arg) {                                                                       // 196
    if (!_.isObject(target)) { // not an array or an object                                                   // 197
      var e = MinimongoError("Cannot set property on non-object field");                                      // 198
      e.setPropertyError = true;                                                                              // 199
      throw e;                                                                                                // 200
    }                                                                                                         // 201
    if (target === null) {                                                                                    // 202
      var e = MinimongoError("Cannot set property on null");                                                  // 203
      e.setPropertyError = true;                                                                              // 204
      throw e;                                                                                                // 205
    }                                                                                                         // 206
    target[field] = arg;                                                                                      // 207
  },                                                                                                          // 208
  $setOnInsert: function (target, field, arg) {                                                               // 209
    // converted to `$set` in `_modify`                                                                       // 210
  },                                                                                                          // 211
  $unset: function (target, field, arg) {                                                                     // 212
    if (target !== undefined) {                                                                               // 213
      if (target instanceof Array) {                                                                          // 214
        if (field in target)                                                                                  // 215
          target[field] = null;                                                                               // 216
      } else                                                                                                  // 217
        delete target[field];                                                                                 // 218
    }                                                                                                         // 219
  },                                                                                                          // 220
  $push: function (target, field, arg) {                                                                      // 221
    if (target[field] === undefined)                                                                          // 222
      target[field] = [];                                                                                     // 223
    if (!(target[field] instanceof Array))                                                                    // 224
      throw MinimongoError("Cannot apply $push modifier to non-array");                                       // 225
                                                                                                              // 226
    if (!(arg && arg.$each)) {                                                                                // 227
      // Simple mode: not $each                                                                               // 228
      target[field].push(arg);                                                                                // 229
      return;                                                                                                 // 230
    }                                                                                                         // 231
                                                                                                              // 232
    // Fancy mode: $each (and maybe $slice and $sort and $position)                                           // 233
    var toPush = arg.$each;                                                                                   // 234
    if (!(toPush instanceof Array))                                                                           // 235
      throw MinimongoError("$each must be an array");                                                         // 236
                                                                                                              // 237
    // Parse $position                                                                                        // 238
    var position = undefined;                                                                                 // 239
    if ('$position' in arg) {                                                                                 // 240
      if (typeof arg.$position !== "number")                                                                  // 241
        throw MinimongoError("$position must be a numeric value");                                            // 242
      // XXX should check to make sure integer                                                                // 243
      if (arg.$position < 0)                                                                                  // 244
        throw MinimongoError("$position in $push must be zero or positive");                                  // 245
      position = arg.$position;                                                                               // 246
    }                                                                                                         // 247
                                                                                                              // 248
    // Parse $slice.                                                                                          // 249
    var slice = undefined;                                                                                    // 250
    if ('$slice' in arg) {                                                                                    // 251
      if (typeof arg.$slice !== "number")                                                                     // 252
        throw MinimongoError("$slice must be a numeric value");                                               // 253
      // XXX should check to make sure integer                                                                // 254
      if (arg.$slice > 0)                                                                                     // 255
        throw MinimongoError("$slice in $push must be zero or negative");                                     // 256
      slice = arg.$slice;                                                                                     // 257
    }                                                                                                         // 258
                                                                                                              // 259
    // Parse $sort.                                                                                           // 260
    var sortFunction = undefined;                                                                             // 261
    if (arg.$sort) {                                                                                          // 262
      if (slice === undefined)                                                                                // 263
        throw MinimongoError("$sort requires $slice to be present");                                          // 264
      // XXX this allows us to use a $sort whose value is an array, but that's                                // 265
      // actually an extension of the Node driver, so it won't work                                           // 266
      // server-side. Could be confusing!                                                                     // 267
      // XXX is it correct that we don't do geo-stuff here?                                                   // 268
      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();                                         // 269
      for (var i = 0; i < toPush.length; i++) {                                                               // 270
        if (LocalCollection._f._type(toPush[i]) !== 3) {                                                      // 271
          throw MinimongoError("$push like modifiers using $sort " +                                          // 272
                      "require all elements to be objects");                                                  // 273
        }                                                                                                     // 274
      }                                                                                                       // 275
    }                                                                                                         // 276
                                                                                                              // 277
    // Actually push.                                                                                         // 278
    if (position === undefined) {                                                                             // 279
      for (var j = 0; j < toPush.length; j++)                                                                 // 280
        target[field].push(toPush[j]);                                                                        // 281
    } else {                                                                                                  // 282
      var spliceArguments = [position, 0];                                                                    // 283
      for (var j = 0; j < toPush.length; j++)                                                                 // 284
        spliceArguments.push(toPush[j]);                                                                      // 285
      Array.prototype.splice.apply(target[field], spliceArguments);                                           // 286
    }                                                                                                         // 287
                                                                                                              // 288
    // Actually sort.                                                                                         // 289
    if (sortFunction)                                                                                         // 290
      target[field].sort(sortFunction);                                                                       // 291
                                                                                                              // 292
    // Actually slice.                                                                                        // 293
    if (slice !== undefined) {                                                                                // 294
      if (slice === 0)                                                                                        // 295
        target[field] = [];  // differs from Array.slice!                                                     // 296
      else                                                                                                    // 297
        target[field] = target[field].slice(slice);                                                           // 298
    }                                                                                                         // 299
  },                                                                                                          // 300
  $pushAll: function (target, field, arg) {                                                                   // 301
    if (!(typeof arg === "object" && arg instanceof Array))                                                   // 302
      throw MinimongoError("Modifier $pushAll/pullAll allowed for arrays only");                              // 303
    var x = target[field];                                                                                    // 304
    if (x === undefined)                                                                                      // 305
      target[field] = arg;                                                                                    // 306
    else if (!(x instanceof Array))                                                                           // 307
      throw MinimongoError("Cannot apply $pushAll modifier to non-array");                                    // 308
    else {                                                                                                    // 309
      for (var i = 0; i < arg.length; i++)                                                                    // 310
        x.push(arg[i]);                                                                                       // 311
    }                                                                                                         // 312
  },                                                                                                          // 313
  $addToSet: function (target, field, arg) {                                                                  // 314
    var isEach = false;                                                                                       // 315
    if (typeof arg === "object") {                                                                            // 316
      //check if first key is '$each'                                                                         // 317
      for (var k in arg) {                                                                                    // 318
        if (k === "$each")                                                                                    // 319
          isEach = true;                                                                                      // 320
        break;                                                                                                // 321
      }                                                                                                       // 322
    }                                                                                                         // 323
    var values = isEach ? arg["$each"] : [arg];                                                               // 324
    var x = target[field];                                                                                    // 325
    if (x === undefined)                                                                                      // 326
      target[field] = values;                                                                                 // 327
    else if (!(x instanceof Array))                                                                           // 328
      throw MinimongoError("Cannot apply $addToSet modifier to non-array");                                   // 329
    else {                                                                                                    // 330
      _.each(values, function (value) {                                                                       // 331
        for (var i = 0; i < x.length; i++)                                                                    // 332
          if (LocalCollection._f._equal(value, x[i]))                                                         // 333
            return;                                                                                           // 334
        x.push(value);                                                                                        // 335
      });                                                                                                     // 336
    }                                                                                                         // 337
  },                                                                                                          // 338
  $pop: function (target, field, arg) {                                                                       // 339
    if (target === undefined)                                                                                 // 340
      return;                                                                                                 // 341
    var x = target[field];                                                                                    // 342
    if (x === undefined)                                                                                      // 343
      return;                                                                                                 // 344
    else if (!(x instanceof Array))                                                                           // 345
      throw MinimongoError("Cannot apply $pop modifier to non-array");                                        // 346
    else {                                                                                                    // 347
      if (typeof arg === 'number' && arg < 0)                                                                 // 348
        x.splice(0, 1);                                                                                       // 349
      else                                                                                                    // 350
        x.pop();                                                                                              // 351
    }                                                                                                         // 352
  },                                                                                                          // 353
  $pull: function (target, field, arg) {                                                                      // 354
    if (target === undefined)                                                                                 // 355
      return;                                                                                                 // 356
    var x = target[field];                                                                                    // 357
    if (x === undefined)                                                                                      // 358
      return;                                                                                                 // 359
    else if (!(x instanceof Array))                                                                           // 360
      throw MinimongoError("Cannot apply $pull/pullAll modifier to non-array");                               // 361
    else {                                                                                                    // 362
      var out = [];                                                                                           // 363
      if (arg != null && typeof arg === "object" && !(arg instanceof Array)) {                                // 364
        // XXX would be much nicer to compile this once, rather than                                          // 365
        // for each document we modify.. but usually we're not                                                // 366
        // modifying that many documents, so we'll let it slide for                                           // 367
        // now                                                                                                // 368
                                                                                                              // 369
        // XXX Minimongo.Matcher isn't up for the job, because we need                                        // 370
        // to permit stuff like {$pull: {a: {$gt: 4}}}.. something                                            // 371
        // like {$gt: 4} is not normally a complete selector.                                                 // 372
        // same issue as $elemMatch possibly?                                                                 // 373
        var matcher = new Minimongo.Matcher(arg);                                                             // 374
        for (var i = 0; i < x.length; i++)                                                                    // 375
          if (!matcher.documentMatches(x[i]).result)                                                          // 376
            out.push(x[i]);                                                                                   // 377
      } else {                                                                                                // 378
        for (var i = 0; i < x.length; i++)                                                                    // 379
          if (!LocalCollection._f._equal(x[i], arg))                                                          // 380
            out.push(x[i]);                                                                                   // 381
      }                                                                                                       // 382
      target[field] = out;                                                                                    // 383
    }                                                                                                         // 384
  },                                                                                                          // 385
  $pullAll: function (target, field, arg) {                                                                   // 386
    if (!(typeof arg === "object" && arg instanceof Array))                                                   // 387
      throw MinimongoError("Modifier $pushAll/pullAll allowed for arrays only");                              // 388
    if (target === undefined)                                                                                 // 389
      return;                                                                                                 // 390
    var x = target[field];                                                                                    // 391
    if (x === undefined)                                                                                      // 392
      return;                                                                                                 // 393
    else if (!(x instanceof Array))                                                                           // 394
      throw MinimongoError("Cannot apply $pull/pullAll modifier to non-array");                               // 395
    else {                                                                                                    // 396
      var out = [];                                                                                           // 397
      for (var i = 0; i < x.length; i++) {                                                                    // 398
        var exclude = false;                                                                                  // 399
        for (var j = 0; j < arg.length; j++) {                                                                // 400
          if (LocalCollection._f._equal(x[i], arg[j])) {                                                      // 401
            exclude = true;                                                                                   // 402
            break;                                                                                            // 403
          }                                                                                                   // 404
        }                                                                                                     // 405
        if (!exclude)                                                                                         // 406
          out.push(x[i]);                                                                                     // 407
      }                                                                                                       // 408
      target[field] = out;                                                                                    // 409
    }                                                                                                         // 410
  },                                                                                                          // 411
  $rename: function (target, field, arg, keypath, doc) {                                                      // 412
    if (keypath === arg)                                                                                      // 413
      // no idea why mongo has this restriction..                                                             // 414
      throw MinimongoError("$rename source must differ from target");                                         // 415
    if (target === null)                                                                                      // 416
      throw MinimongoError("$rename source field invalid");                                                   // 417
    if (typeof arg !== "string")                                                                              // 418
      throw MinimongoError("$rename target must be a string");                                                // 419
    if (target === undefined)                                                                                 // 420
      return;                                                                                                 // 421
    var v = target[field];                                                                                    // 422
    delete target[field];                                                                                     // 423
                                                                                                              // 424
    var keyparts = arg.split('.');                                                                            // 425
    var target2 = findModTarget(doc, keyparts, {forbidArray: true});                                          // 426
    if (target2 === null)                                                                                     // 427
      throw MinimongoError("$rename target field invalid");                                                   // 428
    var field2 = keyparts.pop();                                                                              // 429
    target2[field2] = v;                                                                                      // 430
  },                                                                                                          // 431
  $bit: function (target, field, arg) {                                                                       // 432
    // XXX mongo only supports $bit on integers, and we only support                                          // 433
    // native javascript numbers (doubles) so far, so we can't support $bit                                   // 434
    throw MinimongoError("$bit is not supported");                                                            // 435
  }                                                                                                           // 436
};                                                                                                            // 437
                                                                                                              // 438
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                            //
// packages/minimongo/diff.js                                                                                 //
//                                                                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                              //
// ordered: bool.                                                                                             // 1
// old_results and new_results: collections of documents.                                                     // 2
//    if ordered, they are arrays.                                                                            // 3
//    if unordered, they are IdMaps                                                                           // 4
LocalCollection._diffQueryChanges = function (ordered, oldResults, newResults, observer, options) {           // 5
  return DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options);                   // 6
};                                                                                                            // 7
                                                                                                              // 8
LocalCollection._diffQueryUnorderedChanges = function (oldResults, newResults, observer, options) {           // 9
  return DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options);                   // 10
};                                                                                                            // 11
                                                                                                              // 12
                                                                                                              // 13
LocalCollection._diffQueryOrderedChanges =                                                                    // 14
  function (oldResults, newResults, observer, options) {                                                      // 15
  return DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options);                     // 16
};                                                                                                            // 17
                                                                                                              // 18
LocalCollection._diffObjects = function (left, right, callbacks) {                                            // 19
  return DiffSequence.diffObjects(left, right, callbacks);                                                    // 20
};                                                                                                            // 21
                                                                                                              // 22
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                            //
// packages/minimongo/id_map.js                                                                               //
//                                                                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                              //
LocalCollection._IdMap = function () {                                                                        // 1
  var self = this;                                                                                            // 2
  IdMap.call(self, MongoID.idStringify, MongoID.idParse);                                                     // 3
};                                                                                                            // 4
                                                                                                              // 5
Meteor._inherits(LocalCollection._IdMap, IdMap);                                                              // 6
                                                                                                              // 7
                                                                                                              // 8
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                            //
// packages/minimongo/observe.js                                                                              //
//                                                                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                              //
// XXX maybe move these into another ObserveHelpers package or something                                      // 1
                                                                                                              // 2
// _CachingChangeObserver is an object which receives observeChanges callbacks                                // 3
// and keeps a cache of the current cursor state up to date in self.docs. Users                               // 4
// of this class should read the docs field but not modify it. You should pass                                // 5
// the "applyChange" field as the callbacks to the underlying observeChanges                                  // 6
// call. Optionally, you can specify your own observeChanges callbacks which are                              // 7
// invoked immediately before the docs field is updated; this object is made                                  // 8
// available as `this` to those callbacks.                                                                    // 9
LocalCollection._CachingChangeObserver = function (options) {                                                 // 10
  var self = this;                                                                                            // 11
  options = options || {};                                                                                    // 12
                                                                                                              // 13
  var orderedFromCallbacks = options.callbacks &&                                                             // 14
        LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);                                // 15
  if (_.has(options, 'ordered')) {                                                                            // 16
    self.ordered = options.ordered;                                                                           // 17
    if (options.callbacks && options.ordered !== orderedFromCallbacks)                                        // 18
      throw Error("ordered option doesn't match callbacks");                                                  // 19
  } else if (options.callbacks) {                                                                             // 20
    self.ordered = orderedFromCallbacks;                                                                      // 21
  } else {                                                                                                    // 22
    throw Error("must provide ordered or callbacks");                                                         // 23
  }                                                                                                           // 24
  var callbacks = options.callbacks || {};                                                                    // 25
                                                                                                              // 26
  if (self.ordered) {                                                                                         // 27
    self.docs = new OrderedDict(MongoID.idStringify);                                                         // 28
    self.applyChange = {                                                                                      // 29
      addedBefore: function (id, fields, before) {                                                            // 30
        var doc = EJSON.clone(fields);                                                                        // 31
        doc._id = id;                                                                                         // 32
        callbacks.addedBefore && callbacks.addedBefore.call(                                                  // 33
          self, id, fields, before);                                                                          // 34
        // This line triggers if we provide added with movedBefore.                                           // 35
        callbacks.added && callbacks.added.call(self, id, fields);                                            // 36
        // XXX could `before` be a falsy ID?  Technically                                                     // 37
        // idStringify seems to allow for them -- though                                                      // 38
        // OrderedDict won't call stringify on a falsy arg.                                                   // 39
        self.docs.putBefore(id, doc, before || null);                                                         // 40
      },                                                                                                      // 41
      movedBefore: function (id, before) {                                                                    // 42
        var doc = self.docs.get(id);                                                                          // 43
        callbacks.movedBefore && callbacks.movedBefore.call(self, id, before);                                // 44
        self.docs.moveBefore(id, before || null);                                                             // 45
      }                                                                                                       // 46
    };                                                                                                        // 47
  } else {                                                                                                    // 48
    self.docs = new LocalCollection._IdMap;                                                                   // 49
    self.applyChange = {                                                                                      // 50
      added: function (id, fields) {                                                                          // 51
        var doc = EJSON.clone(fields);                                                                        // 52
        callbacks.added && callbacks.added.call(self, id, fields);                                            // 53
        doc._id = id;                                                                                         // 54
        self.docs.set(id,  doc);                                                                              // 55
      }                                                                                                       // 56
    };                                                                                                        // 57
  }                                                                                                           // 58
                                                                                                              // 59
  // The methods in _IdMap and OrderedDict used by these callbacks are                                        // 60
  // identical.                                                                                               // 61
  self.applyChange.changed = function (id, fields) {                                                          // 62
    var doc = self.docs.get(id);                                                                              // 63
    if (!doc)                                                                                                 // 64
      throw new Error("Unknown id for changed: " + id);                                                       // 65
    callbacks.changed && callbacks.changed.call(                                                              // 66
      self, id, EJSON.clone(fields));                                                                         // 67
    DiffSequence.applyChanges(doc, fields);                                                                   // 68
  };                                                                                                          // 69
  self.applyChange.removed = function (id) {                                                                  // 70
    callbacks.removed && callbacks.removed.call(self, id);                                                    // 71
    self.docs.remove(id);                                                                                     // 72
  };                                                                                                          // 73
};                                                                                                            // 74
                                                                                                              // 75
LocalCollection._observeFromObserveChanges = function (cursor, observeCallbacks) {                            // 76
  var transform = cursor.getTransform() || function (doc) {return doc;};                                      // 77
  var suppressed = !!observeCallbacks._suppress_initial;                                                      // 78
                                                                                                              // 79
  var observeChangesCallbacks;                                                                                // 80
  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {                                        // 81
    // The "_no_indices" option sets all index arguments to -1 and skips the                                  // 82
    // linear scans required to generate them.  This lets observers that don't                                // 83
    // need absolute indices benefit from the other features of this API --                                   // 84
    // relative order, transforms, and applyChanges -- without the speed hit.                                 // 85
    var indices = !observeCallbacks._no_indices;                                                              // 86
    observeChangesCallbacks = {                                                                               // 87
      addedBefore: function (id, fields, before) {                                                            // 88
        var self = this;                                                                                      // 89
        if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added))                              // 90
          return;                                                                                             // 91
        var doc = transform(_.extend(fields, {_id: id}));                                                     // 92
        if (observeCallbacks.addedAt) {                                                                       // 93
          var index = indices                                                                                 // 94
                ? (before ? self.docs.indexOf(before) : self.docs.size()) : -1;                               // 95
          observeCallbacks.addedAt(doc, index, before);                                                       // 96
        } else {                                                                                              // 97
          observeCallbacks.added(doc);                                                                        // 98
        }                                                                                                     // 99
      },                                                                                                      // 100
      changed: function (id, fields) {                                                                        // 101
        var self = this;                                                                                      // 102
        if (!(observeCallbacks.changedAt || observeCallbacks.changed))                                        // 103
          return;                                                                                             // 104
        var doc = EJSON.clone(self.docs.get(id));                                                             // 105
        if (!doc)                                                                                             // 106
          throw new Error("Unknown id for changed: " + id);                                                   // 107
        var oldDoc = transform(EJSON.clone(doc));                                                             // 108
        DiffSequence.applyChanges(doc, fields);                                                               // 109
        doc = transform(doc);                                                                                 // 110
        if (observeCallbacks.changedAt) {                                                                     // 111
          var index = indices ? self.docs.indexOf(id) : -1;                                                   // 112
          observeCallbacks.changedAt(doc, oldDoc, index);                                                     // 113
        } else {                                                                                              // 114
          observeCallbacks.changed(doc, oldDoc);                                                              // 115
        }                                                                                                     // 116
      },                                                                                                      // 117
      movedBefore: function (id, before) {                                                                    // 118
        var self = this;                                                                                      // 119
        if (!observeCallbacks.movedTo)                                                                        // 120
          return;                                                                                             // 121
        var from = indices ? self.docs.indexOf(id) : -1;                                                      // 122
                                                                                                              // 123
        var to = indices                                                                                      // 124
              ? (before ? self.docs.indexOf(before) : self.docs.size()) : -1;                                 // 125
        // When not moving backwards, adjust for the fact that removing the                                   // 126
        // document slides everything back one slot.                                                          // 127
        if (to > from)                                                                                        // 128
          --to;                                                                                               // 129
        observeCallbacks.movedTo(transform(EJSON.clone(self.docs.get(id))),                                   // 130
                                 from, to, before || null);                                                   // 131
      },                                                                                                      // 132
      removed: function (id) {                                                                                // 133
        var self = this;                                                                                      // 134
        if (!(observeCallbacks.removedAt || observeCallbacks.removed))                                        // 135
          return;                                                                                             // 136
        // technically maybe there should be an EJSON.clone here, but it's about                              // 137
        // to be removed from self.docs!                                                                      // 138
        var doc = transform(self.docs.get(id));                                                               // 139
        if (observeCallbacks.removedAt) {                                                                     // 140
          var index = indices ? self.docs.indexOf(id) : -1;                                                   // 141
          observeCallbacks.removedAt(doc, index);                                                             // 142
        } else {                                                                                              // 143
          observeCallbacks.removed(doc);                                                                      // 144
        }                                                                                                     // 145
      }                                                                                                       // 146
    };                                                                                                        // 147
  } else {                                                                                                    // 148
    observeChangesCallbacks = {                                                                               // 149
      added: function (id, fields) {                                                                          // 150
        if (!suppressed && observeCallbacks.added) {                                                          // 151
          var doc = _.extend(fields, {_id:  id});                                                             // 152
          observeCallbacks.added(transform(doc));                                                             // 153
        }                                                                                                     // 154
      },                                                                                                      // 155
      changed: function (id, fields) {                                                                        // 156
        var self = this;                                                                                      // 157
        if (observeCallbacks.changed) {                                                                       // 158
          var oldDoc = self.docs.get(id);                                                                     // 159
          var doc = EJSON.clone(oldDoc);                                                                      // 160
          DiffSequence.applyChanges(doc, fields);                                                             // 161
          observeCallbacks.changed(transform(doc),                                                            // 162
                                   transform(EJSON.clone(oldDoc)));                                           // 163
        }                                                                                                     // 164
      },                                                                                                      // 165
      removed: function (id) {                                                                                // 166
        var self = this;                                                                                      // 167
        if (observeCallbacks.removed) {                                                                       // 168
          observeCallbacks.removed(transform(self.docs.get(id)));                                             // 169
        }                                                                                                     // 170
      }                                                                                                       // 171
    };                                                                                                        // 172
  }                                                                                                           // 173
                                                                                                              // 174
  var changeObserver = new LocalCollection._CachingChangeObserver(                                            // 175
    {callbacks: observeChangesCallbacks});                                                                    // 176
  var handle = cursor.observeChanges(changeObserver.applyChange);                                             // 177
  suppressed = false;                                                                                         // 178
                                                                                                              // 179
  return handle;                                                                                              // 180
};                                                                                                            // 181
                                                                                                              // 182
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                            //
// packages/minimongo/objectid.js                                                                             //
//                                                                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                              //
// Is this selector just shorthand for lookup by _id?                                                         // 1
LocalCollection._selectorIsId = function (selector) {                                                         // 2
  return (typeof selector === "string") ||                                                                    // 3
    (typeof selector === "number") ||                                                                         // 4
    selector instanceof MongoID.ObjectID;                                                                     // 5
};                                                                                                            // 6
                                                                                                              // 7
// Is the selector just lookup by _id (shorthand or not)?                                                     // 8
LocalCollection._selectorIsIdPerhapsAsObject = function (selector) {                                          // 9
  return LocalCollection._selectorIsId(selector) ||                                                           // 10
    (selector && typeof selector === "object" &&                                                              // 11
     selector._id && LocalCollection._selectorIsId(selector._id) &&                                           // 12
     _.size(selector) === 1);                                                                                 // 13
};                                                                                                            // 14
                                                                                                              // 15
// If this is a selector which explicitly constrains the match by ID to a finite                              // 16
// number of documents, returns a list of their IDs.  Otherwise returns                                       // 17
// null. Note that the selector may have other restrictions so it may not even                                // 18
// match those document!  We care about $in and $and since those are generated                                // 19
// access-controlled update and remove.                                                                       // 20
LocalCollection._idsMatchedBySelector = function (selector) {                                                 // 21
  // Is the selector just an ID?                                                                              // 22
  if (LocalCollection._selectorIsId(selector))                                                                // 23
    return [selector];                                                                                        // 24
  if (!selector)                                                                                              // 25
    return null;                                                                                              // 26
                                                                                                              // 27
  // Do we have an _id clause?                                                                                // 28
  if (_.has(selector, '_id')) {                                                                               // 29
    // Is the _id clause just an ID?                                                                          // 30
    if (LocalCollection._selectorIsId(selector._id))                                                          // 31
      return [selector._id];                                                                                  // 32
    // Is the _id clause {_id: {$in: ["x", "y", "z"]}}?                                                       // 33
    if (selector._id && selector._id.$in                                                                      // 34
        && _.isArray(selector._id.$in)                                                                        // 35
        && !_.isEmpty(selector._id.$in)                                                                       // 36
        && _.all(selector._id.$in, LocalCollection._selectorIsId)) {                                          // 37
      return selector._id.$in;                                                                                // 38
    }                                                                                                         // 39
    return null;                                                                                              // 40
  }                                                                                                           // 41
                                                                                                              // 42
  // If this is a top-level $and, and any of the clauses constrain their                                      // 43
  // documents, then the whole selector is constrained by any one clause's                                    // 44
  // constraint. (Well, by their intersection, but that seems unlikely.)                                      // 45
  if (selector.$and && _.isArray(selector.$and)) {                                                            // 46
    for (var i = 0; i < selector.$and.length; ++i) {                                                          // 47
      var subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);                                   // 48
      if (subIds)                                                                                             // 49
        return subIds;                                                                                        // 50
    }                                                                                                         // 51
  }                                                                                                           // 52
                                                                                                              // 53
  return null;                                                                                                // 54
};                                                                                                            // 55
                                                                                                              // 56
                                                                                                              // 57
                                                                                                              // 58
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.minimongo = {
  LocalCollection: LocalCollection,
  Minimongo: Minimongo,
  MinimongoTest: MinimongoTest
};

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var check = Package.check.check;
var Match = Package.check.Match;
var Random = Package.random.Random;
var EJSON = Package.ejson.EJSON;
var _ = Package.underscore._;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var Retry = Package.retry.Retry;

/* Package-scope variables */
var DDPCommon;

(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                   //
// packages/ddp-common/namespace.js                                                                  //
//                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                     //
/**                                                                                                  // 1
 * @namespace DDPCommon                                                                              // 2
 * @summary Namespace for DDPCommon-related methods/classes. Shared between                          // 3
 * `ddp-client` and `ddp-server`, where the ddp-client is the implementation                         // 4
 * of a ddp client for both client AND server; and the ddp server is the                             // 5
 * implementation of the livedata server and stream server. Common                                   // 6
 * functionality shared between both can be shared under this namespace                              // 7
 */                                                                                                  // 8
DDPCommon = {};                                                                                      // 9
                                                                                                     // 10
///////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                   //
// packages/ddp-common/heartbeat.js                                                                  //
//                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                     //
// Heartbeat options:                                                                                // 1
//   heartbeatInterval: interval to send pings, in milliseconds.                                     // 2
//   heartbeatTimeout: timeout to close the connection if a reply isn't                              // 3
//     received, in milliseconds.                                                                    // 4
//   sendPing: function to call to send a ping on the connection.                                    // 5
//   onTimeout: function to call to close the connection.                                            // 6
                                                                                                     // 7
DDPCommon.Heartbeat = function (options) {                                                           // 8
  var self = this;                                                                                   // 9
                                                                                                     // 10
  self.heartbeatInterval = options.heartbeatInterval;                                                // 11
  self.heartbeatTimeout = options.heartbeatTimeout;                                                  // 12
  self._sendPing = options.sendPing;                                                                 // 13
  self._onTimeout = options.onTimeout;                                                               // 14
  self._seenPacket = false;                                                                          // 15
                                                                                                     // 16
  self._heartbeatIntervalHandle = null;                                                              // 17
  self._heartbeatTimeoutHandle = null;                                                               // 18
};                                                                                                   // 19
                                                                                                     // 20
_.extend(DDPCommon.Heartbeat.prototype, {                                                            // 21
  stop: function () {                                                                                // 22
    var self = this;                                                                                 // 23
    self._clearHeartbeatIntervalTimer();                                                             // 24
    self._clearHeartbeatTimeoutTimer();                                                              // 25
  },                                                                                                 // 26
                                                                                                     // 27
  start: function () {                                                                               // 28
    var self = this;                                                                                 // 29
    self.stop();                                                                                     // 30
    self._startHeartbeatIntervalTimer();                                                             // 31
  },                                                                                                 // 32
                                                                                                     // 33
  _startHeartbeatIntervalTimer: function () {                                                        // 34
    var self = this;                                                                                 // 35
    self._heartbeatIntervalHandle = Meteor.setInterval(                                              // 36
      _.bind(self._heartbeatIntervalFired, self),                                                    // 37
      self.heartbeatInterval                                                                         // 38
    );                                                                                               // 39
  },                                                                                                 // 40
                                                                                                     // 41
  _startHeartbeatTimeoutTimer: function () {                                                         // 42
    var self = this;                                                                                 // 43
    self._heartbeatTimeoutHandle = Meteor.setTimeout(                                                // 44
      _.bind(self._heartbeatTimeoutFired, self),                                                     // 45
      self.heartbeatTimeout                                                                          // 46
    );                                                                                               // 47
  },                                                                                                 // 48
                                                                                                     // 49
  _clearHeartbeatIntervalTimer: function () {                                                        // 50
    var self = this;                                                                                 // 51
    if (self._heartbeatIntervalHandle) {                                                             // 52
      Meteor.clearInterval(self._heartbeatIntervalHandle);                                           // 53
      self._heartbeatIntervalHandle = null;                                                          // 54
    }                                                                                                // 55
  },                                                                                                 // 56
                                                                                                     // 57
  _clearHeartbeatTimeoutTimer: function () {                                                         // 58
    var self = this;                                                                                 // 59
    if (self._heartbeatTimeoutHandle) {                                                              // 60
      Meteor.clearTimeout(self._heartbeatTimeoutHandle);                                             // 61
      self._heartbeatTimeoutHandle = null;                                                           // 62
    }                                                                                                // 63
  },                                                                                                 // 64
                                                                                                     // 65
  // The heartbeat interval timer is fired when we should send a ping.                               // 66
  _heartbeatIntervalFired: function () {                                                             // 67
    var self = this;                                                                                 // 68
    // don't send ping if we've seen a packet since we last checked,                                 // 69
    // *or* if we have already sent a ping and are awaiting a timeout.                               // 70
    // That shouldn't happen, but it's possible if                                                   // 71
    // `self.heartbeatInterval` is smaller than                                                      // 72
    // `self.heartbeatTimeout`.                                                                      // 73
    if (! self._seenPacket && ! self._heartbeatTimeoutHandle) {                                      // 74
      self._sendPing();                                                                              // 75
      // Set up timeout, in case a pong doesn't arrive in time.                                      // 76
      self._startHeartbeatTimeoutTimer();                                                            // 77
    }                                                                                                // 78
    self._seenPacket = false;                                                                        // 79
  },                                                                                                 // 80
                                                                                                     // 81
  // The heartbeat timeout timer is fired when we sent a ping, but we                                // 82
  // timed out waiting for the pong.                                                                 // 83
  _heartbeatTimeoutFired: function () {                                                              // 84
    var self = this;                                                                                 // 85
    self._heartbeatTimeoutHandle = null;                                                             // 86
    self._onTimeout();                                                                               // 87
  },                                                                                                 // 88
                                                                                                     // 89
  messageReceived: function () {                                                                     // 90
    var self = this;                                                                                 // 91
    // Tell periodic checkin that we have seen a packet, and thus it                                 // 92
    // does not need to send a ping this cycle.                                                      // 93
    self._seenPacket = true;                                                                         // 94
    // If we were waiting for a pong, we got it.                                                     // 95
    if (self._heartbeatTimeoutHandle) {                                                              // 96
      self._clearHeartbeatTimeoutTimer();                                                            // 97
    }                                                                                                // 98
  }                                                                                                  // 99
});                                                                                                  // 100
                                                                                                     // 101
///////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                   //
// packages/ddp-common/utils.js                                                                      //
//                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                     //
DDPCommon.SUPPORTED_DDP_VERSIONS = [ '1', 'pre2', 'pre1' ];                                          // 1
                                                                                                     // 2
DDPCommon.parseDDP = function (stringMessage) {                                                      // 3
  try {                                                                                              // 4
    var msg = JSON.parse(stringMessage);                                                             // 5
  } catch (e) {                                                                                      // 6
    Meteor._debug("Discarding message with invalid JSON", stringMessage);                            // 7
    return null;                                                                                     // 8
  }                                                                                                  // 9
  // DDP messages must be objects.                                                                   // 10
  if (msg === null || typeof msg !== 'object') {                                                     // 11
    Meteor._debug("Discarding non-object DDP message", stringMessage);                               // 12
    return null;                                                                                     // 13
  }                                                                                                  // 14
                                                                                                     // 15
  // massage msg to get it into "abstract ddp" rather than "wire ddp" format.                        // 16
                                                                                                     // 17
  // switch between "cleared" rep of unsetting fields and "undefined"                                // 18
  // rep of same                                                                                     // 19
  if (_.has(msg, 'cleared')) {                                                                       // 20
    if (!_.has(msg, 'fields'))                                                                       // 21
      msg.fields = {};                                                                               // 22
    _.each(msg.cleared, function (clearKey) {                                                        // 23
      msg.fields[clearKey] = undefined;                                                              // 24
    });                                                                                              // 25
    delete msg.cleared;                                                                              // 26
  }                                                                                                  // 27
                                                                                                     // 28
  _.each(['fields', 'params', 'result'], function (field) {                                          // 29
    if (_.has(msg, field))                                                                           // 30
      msg[field] = EJSON._adjustTypesFromJSONValue(msg[field]);                                      // 31
  });                                                                                                // 32
                                                                                                     // 33
  return msg;                                                                                        // 34
};                                                                                                   // 35
                                                                                                     // 36
DDPCommon.stringifyDDP = function (msg) {                                                            // 37
  var copy = EJSON.clone(msg);                                                                       // 38
  // swizzle 'changed' messages from 'fields undefined' rep to 'fields                               // 39
  // and cleared' rep                                                                                // 40
  if (_.has(msg, 'fields')) {                                                                        // 41
    var cleared = [];                                                                                // 42
    _.each(msg.fields, function (value, key) {                                                       // 43
      if (value === undefined) {                                                                     // 44
        cleared.push(key);                                                                           // 45
        delete copy.fields[key];                                                                     // 46
      }                                                                                              // 47
    });                                                                                              // 48
    if (!_.isEmpty(cleared))                                                                         // 49
      copy.cleared = cleared;                                                                        // 50
    if (_.isEmpty(copy.fields))                                                                      // 51
      delete copy.fields;                                                                            // 52
  }                                                                                                  // 53
  // adjust types to basic                                                                           // 54
  _.each(['fields', 'params', 'result'], function (field) {                                          // 55
    if (_.has(copy, field))                                                                          // 56
      copy[field] = EJSON._adjustTypesToJSONValue(copy[field]);                                      // 57
  });                                                                                                // 58
  if (msg.id && typeof msg.id !== 'string') {                                                        // 59
    throw new Error("Message id is not a string");                                                   // 60
  }                                                                                                  // 61
  return JSON.stringify(copy);                                                                       // 62
};                                                                                                   // 63
                                                                                                     // 64
                                                                                                     // 65
///////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                   //
// packages/ddp-common/method_invocation.js                                                          //
//                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                     //
// Instance name is this because it is usually referred to as this inside a                          // 1
// method definition                                                                                 // 2
/**                                                                                                  // 3
 * @summary The state for a single invocation of a method, referenced by this                        // 4
 * inside a method definition.                                                                       // 5
 * @param {Object} options                                                                           // 6
 * @instanceName this                                                                                // 7
 */                                                                                                  // 8
DDPCommon.MethodInvocation = function (options) {                                                    // 9
  var self = this;                                                                                   // 10
                                                                                                     // 11
  // true if we're running not the actual method, but a stub (that is,                               // 12
  // if we're on a client (which may be a browser, or in the future a                                // 13
  // server connecting to another server) and presently running a                                    // 14
  // simulation of a server-side method for latency compensation                                     // 15
  // purposes). not currently true except in a client such as a browser,                             // 16
  // since there's usually no point in running stubs unless you have a                               // 17
  // zero-latency connection to the user.                                                            // 18
                                                                                                     // 19
  /**                                                                                                // 20
   * @summary Access inside a method invocation.  Boolean value, true if this invocation is a stub.  // 21
   * @locus Anywhere                                                                                 // 22
   * @name  isSimulation                                                                             // 23
   * @memberOf DDPCommon.MethodInvocation                                                            // 24
   * @instance                                                                                       // 25
   * @type {Boolean}                                                                                 // 26
   */                                                                                                // 27
  this.isSimulation = options.isSimulation;                                                          // 28
                                                                                                     // 29
  // call this function to allow other method invocations (from the                                  // 30
  // same client) to continue running without waiting for this one to                                // 31
  // complete.                                                                                       // 32
  this._unblock = options.unblock || function () {};                                                 // 33
  this._calledUnblock = false;                                                                       // 34
                                                                                                     // 35
  // current user id                                                                                 // 36
                                                                                                     // 37
  /**                                                                                                // 38
   * @summary The id of the user that made this method call, or `null` if no user was logged in.     // 39
   * @locus Anywhere                                                                                 // 40
   * @name  userId                                                                                   // 41
   * @memberOf DDPCommon.MethodInvocation                                                            // 42
   * @instance                                                                                       // 43
   */                                                                                                // 44
  this.userId = options.userId;                                                                      // 45
                                                                                                     // 46
  // sets current user id in all appropriate server contexts and                                     // 47
  // reruns subscriptions                                                                            // 48
  this._setUserId = options.setUserId || function () {};                                             // 49
                                                                                                     // 50
  // On the server, the connection this method call came in on.                                      // 51
                                                                                                     // 52
  /**                                                                                                // 53
   * @summary Access inside a method invocation. The [connection](#meteor_onconnection) that this method was received on. `null` if the method is not associated with a connection, eg. a server initiated method call.
   * @locus Server                                                                                   // 55
   * @name  connection                                                                               // 56
   * @memberOf DDPCommon.MethodInvocation                                                            // 57
   * @instance                                                                                       // 58
   */                                                                                                // 59
  this.connection = options.connection;                                                              // 60
                                                                                                     // 61
  // The seed for randomStream value generation                                                      // 62
  this.randomSeed = options.randomSeed;                                                              // 63
                                                                                                     // 64
  // This is set by RandomStream.get; and holds the random stream state                              // 65
  this.randomStream = null;                                                                          // 66
};                                                                                                   // 67
                                                                                                     // 68
_.extend(DDPCommon.MethodInvocation.prototype, {                                                     // 69
  /**                                                                                                // 70
   * @summary Call inside a method invocation.  Allow subsequent method from this client to begin running in a new fiber.
   * @locus Server                                                                                   // 72
   * @memberOf DDPCommon.MethodInvocation                                                            // 73
   * @instance                                                                                       // 74
   */                                                                                                // 75
  unblock: function () {                                                                             // 76
    var self = this;                                                                                 // 77
    self._calledUnblock = true;                                                                      // 78
    self._unblock();                                                                                 // 79
  },                                                                                                 // 80
                                                                                                     // 81
  /**                                                                                                // 82
   * @summary Set the logged in user.                                                                // 83
   * @locus Server                                                                                   // 84
   * @memberOf DDPCommon.MethodInvocation                                                            // 85
   * @instance                                                                                       // 86
   * @param {String | null} userId The value that should be returned by `userId` on this connection.
   */                                                                                                // 88
  setUserId: function(userId) {                                                                      // 89
    var self = this;                                                                                 // 90
    if (self._calledUnblock)                                                                         // 91
      throw new Error("Can't call setUserId in a method after calling unblock");                     // 92
    self.userId = userId;                                                                            // 93
    self._setUserId(userId);                                                                         // 94
  }                                                                                                  // 95
});                                                                                                  // 96
                                                                                                     // 97
                                                                                                     // 98
///////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                   //
// packages/ddp-common/random_stream.js                                                              //
//                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                     //
// RandomStream allows for generation of pseudo-random values, from a seed.                          // 1
//                                                                                                   // 2
// We use this for consistent 'random' numbers across the client and server.                         // 3
// We want to generate probably-unique IDs on the client, and we ideally want                        // 4
// the server to generate the same IDs when it executes the method.                                  // 5
//                                                                                                   // 6
// For generated values to be the same, we must seed ourselves the same way,                         // 7
// and we must keep track of the current state of our pseudo-random generators.                      // 8
// We call this state the scope. By default, we use the current DDP method                           // 9
// invocation as our scope.  DDP now allows the client to specify a randomSeed.                      // 10
// If a randomSeed is provided it will be used to seed our random sequences.                         // 11
// In this way, client and server method calls will generate the same values.                        // 12
//                                                                                                   // 13
// We expose multiple named streams; each stream is independent                                      // 14
// and is seeded differently (but predictably from the name).                                        // 15
// By using multiple streams, we support reordering of requests,                                     // 16
// as long as they occur on different streams.                                                       // 17
//                                                                                                   // 18
// @param options {Optional Object}                                                                  // 19
//   seed: Array or value - Seed value(s) for the generator.                                         // 20
//                          If an array, will be used as-is                                          // 21
//                          If a value, will be converted to a single-value array                    // 22
//                          If omitted, a random array will be used as the seed.                     // 23
DDPCommon.RandomStream = function (options) {                                                        // 24
  var self = this;                                                                                   // 25
                                                                                                     // 26
  this.seed = [].concat(options.seed || randomToken());                                              // 27
                                                                                                     // 28
  this.sequences = {};                                                                               // 29
};                                                                                                   // 30
                                                                                                     // 31
// Returns a random string of sufficient length for a random seed.                                   // 32
// This is a placeholder function; a similar function is planned                                     // 33
// for Random itself; when that is added we should remove this function,                             // 34
// and call Random's randomToken instead.                                                            // 35
function randomToken() {                                                                             // 36
  return Random.hexString(20);                                                                       // 37
};                                                                                                   // 38
                                                                                                     // 39
// Returns the random stream with the specified name, in the specified                               // 40
// scope. If a scope is passed, then we use that to seed a (not                                      // 41
// cryptographically secure) PRNG using the fast Alea algorithm.  If                                 // 42
// scope is null (or otherwise falsey) then we use a generated seed.                                 // 43
//                                                                                                   // 44
// However, scope will normally be the current DDP method invocation,                                // 45
// so we'll use the stream with the specified name, and we should get                                // 46
// consistent values on the client and server sides of a method call.                                // 47
DDPCommon.RandomStream.get = function (scope, name) {                                                // 48
  if (!name) {                                                                                       // 49
    name = "default";                                                                                // 50
  }                                                                                                  // 51
  if (!scope) {                                                                                      // 52
    // There was no scope passed in; the sequence won't actually be                                  // 53
    // reproducible. but make it fast (and not cryptographically                                     // 54
    // secure) anyways, so that the behavior is similar to what you'd                                // 55
    // get by passing in a scope.                                                                    // 56
    return Random.insecure;                                                                          // 57
  }                                                                                                  // 58
  var randomStream = scope.randomStream;                                                             // 59
  if (!randomStream) {                                                                               // 60
    scope.randomStream = randomStream = new DDPCommon.RandomStream({                                 // 61
      seed: scope.randomSeed                                                                         // 62
    });                                                                                              // 63
  }                                                                                                  // 64
  return randomStream._sequence(name);                                                               // 65
};                                                                                                   // 66
                                                                                                     // 67
                                                                                                     // 68
// Creates a randomSeed for passing to a method call.                                                // 69
// Note that we take enclosing as an argument,                                                       // 70
// though we expect it to be DDP._CurrentInvocation.get()                                            // 71
// However, we often evaluate makeRpcSeed lazily, and thus the relevant                              // 72
// invocation may not be the one currently in scope.                                                 // 73
// If enclosing is null, we'll use Random and values won't be repeatable.                            // 74
DDPCommon.makeRpcSeed = function (enclosing, methodName) {                                           // 75
  var stream = DDPCommon.RandomStream.get(enclosing, '/rpc/' + methodName);                          // 76
  return stream.hexString(20);                                                                       // 77
};                                                                                                   // 78
                                                                                                     // 79
_.extend(DDPCommon.RandomStream.prototype, {                                                         // 80
  // Get a random sequence with the specified name, creating it if does not exist.                   // 81
  // New sequences are seeded with the seed concatenated with the name.                              // 82
  // By passing a seed into Random.create, we use the Alea generator.                                // 83
  _sequence: function (name) {                                                                       // 84
    var self = this;                                                                                 // 85
                                                                                                     // 86
    var sequence = self.sequences[name] || null;                                                     // 87
    if (sequence === null) {                                                                         // 88
      var sequenceSeed = self.seed.concat(name);                                                     // 89
      for (var i = 0; i < sequenceSeed.length; i++) {                                                // 90
        if (_.isFunction(sequenceSeed[i])) {                                                         // 91
          sequenceSeed[i] = sequenceSeed[i]();                                                       // 92
        }                                                                                            // 93
      }                                                                                              // 94
      self.sequences[name] = sequence = Random.createWithSeeds.apply(null, sequenceSeed);            // 95
    }                                                                                                // 96
    return sequence;                                                                                 // 97
  }                                                                                                  // 98
});                                                                                                  // 99
                                                                                                     // 100
///////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['ddp-common'] = {
  DDPCommon: DDPCommon
};

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var check = Package.check.check;
var Match = Package.check.Match;
var Random = Package.random.Random;
var EJSON = Package.ejson.EJSON;
var _ = Package.underscore._;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var Retry = Package.retry.Retry;
var IdMap = Package['id-map'].IdMap;
var DDPCommon = Package['ddp-common'].DDPCommon;
var DiffSequence = Package['diff-sequence'].DiffSequence;
var MongoID = Package['mongo-id'].MongoID;

/* Package-scope variables */
var DDP, LivedataTest, MongoIDMap, SockJS, toSockjsUrl, toWebsocketUrl, allConnections;

(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                //
// packages/ddp-client/namespace.js                                                                               //
//                                                                                                                //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                  //
/**                                                                                                               // 1
 * @namespace DDP                                                                                                 // 2
 * @summary Namespace for DDP-related methods/classes.                                                            // 3
 */                                                                                                               // 4
DDP          = {};                                                                                                // 5
LivedataTest = {};                                                                                                // 6
                                                                                                                  // 7
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                //
// packages/ddp-client/id_map.js                                                                                  //
//                                                                                                                //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                  //
MongoIDMap = function () {                                                                                        // 1
  var self = this;                                                                                                // 2
  IdMap.call(self, MongoID.idStringify, MongoID.idParse);                                                         // 3
};                                                                                                                // 4
                                                                                                                  // 5
Meteor._inherits(MongoIDMap, IdMap);                                                                              // 6
                                                                                                                  // 7
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                //
// packages/ddp-client/sockjs-0.3.4.js                                                                            //
//                                                                                                                //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                  //
// XXX METEOR changes in <METEOR>                                                                                 // 1
                                                                                                                  // 2
/* SockJS client, version 0.3.4, http://sockjs.org, MIT License                                                   // 3
                                                                                                                  // 4
Copyright (c) 2011-2012 VMware, Inc.                                                                              // 5
                                                                                                                  // 6
Permission is hereby granted, free of charge, to any person obtaining a copy                                      // 7
of this software and associated documentation files (the "Software"), to deal                                     // 8
in the Software without restriction, including without limitation the rights                                      // 9
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell                                         // 10
copies of the Software, and to permit persons to whom the Software is                                             // 11
furnished to do so, subject to the following conditions:                                                          // 12
                                                                                                                  // 13
The above copyright notice and this permission notice shall be included in                                        // 14
all copies or substantial portions of the Software.                                                               // 15
                                                                                                                  // 16
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR                                        // 17
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,                                          // 18
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE                                       // 19
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER                                            // 20
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,                                     // 21
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN                                         // 22
THE SOFTWARE.                                                                                                     // 23
*/                                                                                                                // 24
                                                                                                                  // 25
// <METEOR> Commented out JSO implementation (use json package instead).                                          // 26
// JSON2 by Douglas Crockford (minified).                                                                         // 27
// var JSON;JSON||(JSON={}),function(){function str(a,b){var c,d,e,f,g=gap,h,i=b[a];i&&typeof i=="object"&&typeof i.toJSON=="function"&&(i=i.toJSON(a)),typeof rep=="function"&&(i=rep.call(b,a,i));switch(typeof i){case"string":return quote(i);case"number":return isFinite(i)?String(i):"null";case"boolean":case"null":return String(i);case"object":if(!i)return"null";gap+=indent,h=[];if(Object.prototype.toString.apply(i)==="[object Array]"){f=i.length;for(c=0;c<f;c+=1)h[c]=str(c,i)||"null";e=h.length===0?"[]":gap?"[\n"+gap+h.join(",\n"+gap)+"\n"+g+"]":"["+h.join(",")+"]",gap=g;return e}if(rep&&typeof rep=="object"){f=rep.length;for(c=0;c<f;c+=1)typeof rep[c]=="string"&&(d=rep[c],e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e))}else for(d in i)Object.prototype.hasOwnProperty.call(i,d)&&(e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e));e=h.length===0?"{}":gap?"{\n"+gap+h.join(",\n"+gap)+"\n"+g+"}":"{"+h.join(",")+"}",gap=g;return e}}function quote(a){escapable.lastIndex=0;return escapable.test(a)?'"'+a.replace(escapable,function(a){var b=meta[a];return typeof b=="string"?b:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+a+'"'}function f(a){return a<10?"0"+a:a}"use strict",typeof Date.prototype.toJSON!="function"&&(Date.prototype.toJSON=function(a){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(a){return this.valueOf()});var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},rep;typeof JSON.stringify!="function"&&(JSON.stringify=function(a,b,c){var d;gap="",indent="";if(typeof c=="number")for(d=0;d<c;d+=1)indent+=" ";else typeof c=="string"&&(indent=c);rep=b;if(!b||typeof b=="function"||typeof b=="object"&&typeof b.length=="number")return str("",{"":a});throw new Error("JSON.stringify")}),typeof JSON.parse!="function"&&(JSON.parse=function(text,reviver){function walk(a,b){var c,d,e=a[b];if(e&&typeof e=="object")for(c in e)Object.prototype.hasOwnProperty.call(e,c)&&(d=walk(e,c),d!==undefined?e[c]=d:delete e[c]);return reviver.call(a,b,e)}var j;text=String(text),cx.lastIndex=0,cx.test(text)&&(text=text.replace(cx,function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)}));if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,""))){j=eval("("+text+")");return typeof reviver=="function"?walk({"":j},""):j}throw new SyntaxError("JSON.parse")})}()
// </METEOR>                                                                                                      // 29
                                                                                                                  // 30
//     [*] Including lib/index.js                                                                                 // 31
// Public object                                                                                                  // 32
SockJS = (function(){                                                                                             // 33
              var _document = document;                                                                           // 34
              var _window = window;                                                                               // 35
              var utils = {};                                                                                     // 36
                                                                                                                  // 37
                                                                                                                  // 38
//         [*] Including lib/reventtarget.js                                                                      // 39
/*                                                                                                                // 40
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 41
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 42
 *                                                                                                                // 43
 * For the license see COPYING.                                                                                   // 44
 * ***** END LICENSE BLOCK *****                                                                                  // 45
 */                                                                                                               // 46
                                                                                                                  // 47
/* Simplified implementation of DOM2 EventTarget.                                                                 // 48
 *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget                                       // 49
 */                                                                                                               // 50
var REventTarget = function() {};                                                                                 // 51
REventTarget.prototype.addEventListener = function (eventType, listener) {                                        // 52
    if(!this._listeners) {                                                                                        // 53
         this._listeners = {};                                                                                    // 54
    }                                                                                                             // 55
    if(!(eventType in this._listeners)) {                                                                         // 56
        this._listeners[eventType] = [];                                                                          // 57
    }                                                                                                             // 58
    var arr = this._listeners[eventType];                                                                         // 59
    if(utils.arrIndexOf(arr, listener) === -1) {                                                                  // 60
        arr.push(listener);                                                                                       // 61
    }                                                                                                             // 62
    return;                                                                                                       // 63
};                                                                                                                // 64
                                                                                                                  // 65
REventTarget.prototype.removeEventListener = function (eventType, listener) {                                     // 66
    if(!(this._listeners && (eventType in this._listeners))) {                                                    // 67
        return;                                                                                                   // 68
    }                                                                                                             // 69
    var arr = this._listeners[eventType];                                                                         // 70
    var idx = utils.arrIndexOf(arr, listener);                                                                    // 71
    if (idx !== -1) {                                                                                             // 72
        if(arr.length > 1) {                                                                                      // 73
            this._listeners[eventType] = arr.slice(0, idx).concat( arr.slice(idx+1) );                            // 74
        } else {                                                                                                  // 75
            delete this._listeners[eventType];                                                                    // 76
        }                                                                                                         // 77
        return;                                                                                                   // 78
    }                                                                                                             // 79
    return;                                                                                                       // 80
};                                                                                                                // 81
                                                                                                                  // 82
REventTarget.prototype.dispatchEvent = function (event) {                                                         // 83
    var t = event.type;                                                                                           // 84
    var args = Array.prototype.slice.call(arguments, 0);                                                          // 85
    if (this['on'+t]) {                                                                                           // 86
        this['on'+t].apply(this, args);                                                                           // 87
    }                                                                                                             // 88
    if (this._listeners && t in this._listeners) {                                                                // 89
        for(var i=0; i < this._listeners[t].length; i++) {                                                        // 90
            this._listeners[t][i].apply(this, args);                                                              // 91
        }                                                                                                         // 92
    }                                                                                                             // 93
};                                                                                                                // 94
//         [*] End of lib/reventtarget.js                                                                         // 95
                                                                                                                  // 96
                                                                                                                  // 97
//         [*] Including lib/simpleevent.js                                                                       // 98
/*                                                                                                                // 99
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 100
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 101
 *                                                                                                                // 102
 * For the license see COPYING.                                                                                   // 103
 * ***** END LICENSE BLOCK *****                                                                                  // 104
 */                                                                                                               // 105
                                                                                                                  // 106
var SimpleEvent = function(type, obj) {                                                                           // 107
    this.type = type;                                                                                             // 108
    if (typeof obj !== 'undefined') {                                                                             // 109
        for(var k in obj) {                                                                                       // 110
            if (!obj.hasOwnProperty(k)) continue;                                                                 // 111
            this[k] = obj[k];                                                                                     // 112
        }                                                                                                         // 113
    }                                                                                                             // 114
};                                                                                                                // 115
                                                                                                                  // 116
SimpleEvent.prototype.toString = function() {                                                                     // 117
    var r = [];                                                                                                   // 118
    for(var k in this) {                                                                                          // 119
        if (!this.hasOwnProperty(k)) continue;                                                                    // 120
        var v = this[k];                                                                                          // 121
        if (typeof v === 'function') v = '[function]';                                                            // 122
        r.push(k + '=' + v);                                                                                      // 123
    }                                                                                                             // 124
    return 'SimpleEvent(' + r.join(', ') + ')';                                                                   // 125
};                                                                                                                // 126
//         [*] End of lib/simpleevent.js                                                                          // 127
                                                                                                                  // 128
                                                                                                                  // 129
//         [*] Including lib/eventemitter.js                                                                      // 130
/*                                                                                                                // 131
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 132
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 133
 *                                                                                                                // 134
 * For the license see COPYING.                                                                                   // 135
 * ***** END LICENSE BLOCK *****                                                                                  // 136
 */                                                                                                               // 137
                                                                                                                  // 138
var EventEmitter = function(events) {                                                                             // 139
    var that = this;                                                                                              // 140
    that._events = events || [];                                                                                  // 141
    that._listeners = {};                                                                                         // 142
};                                                                                                                // 143
EventEmitter.prototype.emit = function(type) {                                                                    // 144
    var that = this;                                                                                              // 145
    that._verifyType(type);                                                                                       // 146
    if (that._nuked) return;                                                                                      // 147
                                                                                                                  // 148
    var args = Array.prototype.slice.call(arguments, 1);                                                          // 149
    if (that['on'+type]) {                                                                                        // 150
        that['on'+type].apply(that, args);                                                                        // 151
    }                                                                                                             // 152
    if (type in that._listeners) {                                                                                // 153
        for(var i = 0; i < that._listeners[type].length; i++) {                                                   // 154
            that._listeners[type][i].apply(that, args);                                                           // 155
        }                                                                                                         // 156
    }                                                                                                             // 157
};                                                                                                                // 158
                                                                                                                  // 159
EventEmitter.prototype.on = function(type, callback) {                                                            // 160
    var that = this;                                                                                              // 161
    that._verifyType(type);                                                                                       // 162
    if (that._nuked) return;                                                                                      // 163
                                                                                                                  // 164
    if (!(type in that._listeners)) {                                                                             // 165
        that._listeners[type] = [];                                                                               // 166
    }                                                                                                             // 167
    that._listeners[type].push(callback);                                                                         // 168
};                                                                                                                // 169
                                                                                                                  // 170
EventEmitter.prototype._verifyType = function(type) {                                                             // 171
    var that = this;                                                                                              // 172
    if (utils.arrIndexOf(that._events, type) === -1) {                                                            // 173
        utils.log('Event ' + JSON.stringify(type) +                                                               // 174
                  ' not listed ' + JSON.stringify(that._events) +                                                 // 175
                  ' in ' + that);                                                                                 // 176
    }                                                                                                             // 177
};                                                                                                                // 178
                                                                                                                  // 179
EventEmitter.prototype.nuke = function() {                                                                        // 180
    var that = this;                                                                                              // 181
    that._nuked = true;                                                                                           // 182
    for(var i=0; i<that._events.length; i++) {                                                                    // 183
        delete that[that._events[i]];                                                                             // 184
    }                                                                                                             // 185
    that._listeners = {};                                                                                         // 186
};                                                                                                                // 187
//         [*] End of lib/eventemitter.js                                                                         // 188
                                                                                                                  // 189
                                                                                                                  // 190
//         [*] Including lib/utils.js                                                                             // 191
/*                                                                                                                // 192
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 193
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 194
 *                                                                                                                // 195
 * For the license see COPYING.                                                                                   // 196
 * ***** END LICENSE BLOCK *****                                                                                  // 197
 */                                                                                                               // 198
                                                                                                                  // 199
var random_string_chars = 'abcdefghijklmnopqrstuvwxyz0123456789_';                                                // 200
utils.random_string = function(length, max) {                                                                     // 201
    max = max || random_string_chars.length;                                                                      // 202
    var i, ret = [];                                                                                              // 203
    for(i=0; i < length; i++) {                                                                                   // 204
        ret.push( random_string_chars.substr(Math.floor(Math.random() * max),1) );                                // 205
    }                                                                                                             // 206
    return ret.join('');                                                                                          // 207
};                                                                                                                // 208
utils.random_number = function(max) {                                                                             // 209
    return Math.floor(Math.random() * max);                                                                       // 210
};                                                                                                                // 211
utils.random_number_string = function(max) {                                                                      // 212
    var t = (''+(max - 1)).length;                                                                                // 213
    var p = Array(t+1).join('0');                                                                                 // 214
    return (p + utils.random_number(max)).slice(-t);                                                              // 215
};                                                                                                                // 216
                                                                                                                  // 217
// Assuming that url looks like: http://asdasd:111/asd                                                            // 218
utils.getOrigin = function(url) {                                                                                 // 219
    url += '/';                                                                                                   // 220
    var parts = url.split('/').slice(0, 3);                                                                       // 221
    return parts.join('/');                                                                                       // 222
};                                                                                                                // 223
                                                                                                                  // 224
utils.isSameOriginUrl = function(url_a, url_b) {                                                                  // 225
    // location.origin would do, but it's not always available.                                                   // 226
    if (!url_b) url_b = _window.location.href;                                                                    // 227
                                                                                                                  // 228
    return (url_a.split('/').slice(0,3).join('/')                                                                 // 229
                ===                                                                                               // 230
            url_b.split('/').slice(0,3).join('/'));                                                               // 231
};                                                                                                                // 232
                                                                                                                  // 233
// <METEOR>                                                                                                       // 234
// https://github.com/sockjs/sockjs-client/issues/79                                                              // 235
utils.isSameOriginScheme = function(url_a, url_b) {                                                               // 236
    if (!url_b) url_b = _window.location.href;                                                                    // 237
                                                                                                                  // 238
    return (url_a.split(':')[0]                                                                                   // 239
                ===                                                                                               // 240
            url_b.split(':')[0]);                                                                                 // 241
};                                                                                                                // 242
// </METEOR>                                                                                                      // 243
                                                                                                                  // 244
                                                                                                                  // 245
utils.getParentDomain = function(url) {                                                                           // 246
    // ipv4 ip address                                                                                            // 247
    if (/^[0-9.]*$/.test(url)) return url;                                                                        // 248
    // ipv6 ip address                                                                                            // 249
    if (/^\[/.test(url)) return url;                                                                              // 250
    // no dots                                                                                                    // 251
    if (!(/[.]/.test(url))) return url;                                                                           // 252
                                                                                                                  // 253
    var parts = url.split('.').slice(1);                                                                          // 254
    return parts.join('.');                                                                                       // 255
};                                                                                                                // 256
                                                                                                                  // 257
utils.objectExtend = function(dst, src) {                                                                         // 258
    for(var k in src) {                                                                                           // 259
        if (src.hasOwnProperty(k)) {                                                                              // 260
            dst[k] = src[k];                                                                                      // 261
        }                                                                                                         // 262
    }                                                                                                             // 263
    return dst;                                                                                                   // 264
};                                                                                                                // 265
                                                                                                                  // 266
var WPrefix = '_jp';                                                                                              // 267
                                                                                                                  // 268
utils.polluteGlobalNamespace = function() {                                                                       // 269
    if (!(WPrefix in _window)) {                                                                                  // 270
        _window[WPrefix] = {};                                                                                    // 271
    }                                                                                                             // 272
};                                                                                                                // 273
                                                                                                                  // 274
utils.closeFrame = function (code, reason) {                                                                      // 275
    return 'c'+JSON.stringify([code, reason]);                                                                    // 276
};                                                                                                                // 277
                                                                                                                  // 278
utils.userSetCode = function (code) {                                                                             // 279
    return code === 1000 || (code >= 3000 && code <= 4999);                                                       // 280
};                                                                                                                // 281
                                                                                                                  // 282
// See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/                                         // 283
// and RFC 2988.                                                                                                  // 284
utils.countRTO = function (rtt) {                                                                                 // 285
    var rto;                                                                                                      // 286
    if (rtt > 100) {                                                                                              // 287
        rto = 3 * rtt; // rto > 300msec                                                                           // 288
    } else {                                                                                                      // 289
        rto = rtt + 200; // 200msec < rto <= 300msec                                                              // 290
    }                                                                                                             // 291
    return rto;                                                                                                   // 292
}                                                                                                                 // 293
                                                                                                                  // 294
utils.log = function() {                                                                                          // 295
    if (_window.console && console.log && console.log.apply) {                                                    // 296
        console.log.apply(console, arguments);                                                                    // 297
    }                                                                                                             // 298
};                                                                                                                // 299
                                                                                                                  // 300
utils.bind = function(fun, that) {                                                                                // 301
    if (fun.bind) {                                                                                               // 302
        return fun.bind(that);                                                                                    // 303
    } else {                                                                                                      // 304
        return function() {                                                                                       // 305
            return fun.apply(that, arguments);                                                                    // 306
        };                                                                                                        // 307
    }                                                                                                             // 308
};                                                                                                                // 309
                                                                                                                  // 310
utils.flatUrl = function(url) {                                                                                   // 311
    return url.indexOf('?') === -1 && url.indexOf('#') === -1;                                                    // 312
};                                                                                                                // 313
                                                                                                                  // 314
// `relativeTo` is an optional absolute URL. If provided, `url` will be                                           // 315
// interpreted relative to `relativeTo`. Defaults to `document.location`.                                         // 316
// <METEOR>                                                                                                       // 317
utils.amendUrl = function(url, relativeTo) {                                                                      // 318
    var baseUrl;                                                                                                  // 319
    if (relativeTo === undefined) {                                                                               // 320
      baseUrl = _document.location;                                                                               // 321
    } else {                                                                                                      // 322
      var protocolMatch = /^([a-z0-9.+-]+:)/i.exec(relativeTo);                                                   // 323
      if (protocolMatch) {                                                                                        // 324
        var protocol = protocolMatch[0].toLowerCase();                                                            // 325
        var rest = relativeTo.substring(protocol.length);                                                         // 326
        var hostMatch = /[a-z0-9\.-]+(:[0-9]+)?/.exec(rest);                                                      // 327
        if (hostMatch)                                                                                            // 328
          var host = hostMatch[0];                                                                                // 329
      }                                                                                                           // 330
      if (! protocol || ! host)                                                                                   // 331
        throw new Error("relativeTo must be an absolute url");                                                    // 332
      baseUrl = {                                                                                                 // 333
        protocol: protocol,                                                                                       // 334
        host: host                                                                                                // 335
      };                                                                                                          // 336
    }                                                                                                             // 337
    if (!url) {                                                                                                   // 338
        throw new Error('Wrong url for SockJS');                                                                  // 339
    }                                                                                                             // 340
    if (!utils.flatUrl(url)) {                                                                                    // 341
        throw new Error('Only basic urls are supported in SockJS');                                               // 342
    }                                                                                                             // 343
                                                                                                                  // 344
    //  '//abc' --> 'http://abc'                                                                                  // 345
    if (url.indexOf('//') === 0) {                                                                                // 346
        url = baseUrl.protocol + url;                                                                             // 347
    }                                                                                                             // 348
    // '/abc' --> 'http://localhost:1234/abc'                                                                     // 349
    if (url.indexOf('/') === 0) {                                                                                 // 350
        url = baseUrl.protocol + '//' + baseUrl.host + url;                                                       // 351
    }                                                                                                             // 352
    // </METEOR>                                                                                                  // 353
    // strip trailing slashes                                                                                     // 354
    url = url.replace(/[/]+$/,'');                                                                                // 355
                                                                                                                  // 356
    // We have a full url here, with proto and host. For some browsers                                            // 357
    // http://localhost:80/ is not in the same origin as http://localhost/                                        // 358
	// Remove explicit :80 or :443 in such cases. See #74                                                            // 359
    var parts = url.split("/");                                                                                   // 360
    if ((parts[0] === "http:" && /:80$/.test(parts[2])) ||                                                        // 361
	    (parts[0] === "https:" && /:443$/.test(parts[2]))) {                                                         // 362
		parts[2] = parts[2].replace(/:(80|443)$/, "");                                                                  // 363
	}                                                                                                                // 364
    url = parts.join("/");                                                                                        // 365
    return url;                                                                                                   // 366
};                                                                                                                // 367
                                                                                                                  // 368
// IE doesn't support [].indexOf.                                                                                 // 369
utils.arrIndexOf = function(arr, obj){                                                                            // 370
    for(var i=0; i < arr.length; i++){                                                                            // 371
        if(arr[i] === obj){                                                                                       // 372
            return i;                                                                                             // 373
        }                                                                                                         // 374
    }                                                                                                             // 375
    return -1;                                                                                                    // 376
};                                                                                                                // 377
                                                                                                                  // 378
utils.arrSkip = function(arr, obj) {                                                                              // 379
    var idx = utils.arrIndexOf(arr, obj);                                                                         // 380
    if (idx === -1) {                                                                                             // 381
        return arr.slice();                                                                                       // 382
    } else {                                                                                                      // 383
        var dst = arr.slice(0, idx);                                                                              // 384
        return dst.concat(arr.slice(idx+1));                                                                      // 385
    }                                                                                                             // 386
};                                                                                                                // 387
                                                                                                                  // 388
// Via: https://gist.github.com/1133122/2121c601c5549155483f50be3da5305e83b8c5df                                  // 389
utils.isArray = Array.isArray || function(value) {                                                                // 390
    return {}.toString.call(value).indexOf('Array') >= 0                                                          // 391
};                                                                                                                // 392
                                                                                                                  // 393
utils.delay = function(t, fun) {                                                                                  // 394
    if(typeof t === 'function') {                                                                                 // 395
        fun = t;                                                                                                  // 396
        t = 0;                                                                                                    // 397
    }                                                                                                             // 398
    return setTimeout(fun, t);                                                                                    // 399
};                                                                                                                // 400
                                                                                                                  // 401
                                                                                                                  // 402
// Chars worth escaping, as defined by Douglas Crockford:                                                         // 403
//   https://github.com/douglascrockford/JSON-js/blob/47a9882cddeb1e8529e07af9736218075372b8ac/json2.js#L196      // 404
var json_escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    json_lookup = {                                                                                               // 406
"\u0000":"\\u0000","\u0001":"\\u0001","\u0002":"\\u0002","\u0003":"\\u0003",                                      // 407
"\u0004":"\\u0004","\u0005":"\\u0005","\u0006":"\\u0006","\u0007":"\\u0007",                                      // 408
"\b":"\\b","\t":"\\t","\n":"\\n","\u000b":"\\u000b","\f":"\\f","\r":"\\r",                                        // 409
"\u000e":"\\u000e","\u000f":"\\u000f","\u0010":"\\u0010","\u0011":"\\u0011",                                      // 410
"\u0012":"\\u0012","\u0013":"\\u0013","\u0014":"\\u0014","\u0015":"\\u0015",                                      // 411
"\u0016":"\\u0016","\u0017":"\\u0017","\u0018":"\\u0018","\u0019":"\\u0019",                                      // 412
"\u001a":"\\u001a","\u001b":"\\u001b","\u001c":"\\u001c","\u001d":"\\u001d",                                      // 413
"\u001e":"\\u001e","\u001f":"\\u001f","\"":"\\\"","\\":"\\\\",                                                    // 414
"\u007f":"\\u007f","\u0080":"\\u0080","\u0081":"\\u0081","\u0082":"\\u0082",                                      // 415
"\u0083":"\\u0083","\u0084":"\\u0084","\u0085":"\\u0085","\u0086":"\\u0086",                                      // 416
"\u0087":"\\u0087","\u0088":"\\u0088","\u0089":"\\u0089","\u008a":"\\u008a",                                      // 417
"\u008b":"\\u008b","\u008c":"\\u008c","\u008d":"\\u008d","\u008e":"\\u008e",                                      // 418
"\u008f":"\\u008f","\u0090":"\\u0090","\u0091":"\\u0091","\u0092":"\\u0092",                                      // 419
"\u0093":"\\u0093","\u0094":"\\u0094","\u0095":"\\u0095","\u0096":"\\u0096",                                      // 420
"\u0097":"\\u0097","\u0098":"\\u0098","\u0099":"\\u0099","\u009a":"\\u009a",                                      // 421
"\u009b":"\\u009b","\u009c":"\\u009c","\u009d":"\\u009d","\u009e":"\\u009e",                                      // 422
"\u009f":"\\u009f","\u00ad":"\\u00ad","\u0600":"\\u0600","\u0601":"\\u0601",                                      // 423
"\u0602":"\\u0602","\u0603":"\\u0603","\u0604":"\\u0604","\u070f":"\\u070f",                                      // 424
"\u17b4":"\\u17b4","\u17b5":"\\u17b5","\u200c":"\\u200c","\u200d":"\\u200d",                                      // 425
"\u200e":"\\u200e","\u200f":"\\u200f","\u2028":"\\u2028","\u2029":"\\u2029",                                      // 426
"\u202a":"\\u202a","\u202b":"\\u202b","\u202c":"\\u202c","\u202d":"\\u202d",                                      // 427
"\u202e":"\\u202e","\u202f":"\\u202f","\u2060":"\\u2060","\u2061":"\\u2061",                                      // 428
"\u2062":"\\u2062","\u2063":"\\u2063","\u2064":"\\u2064","\u2065":"\\u2065",                                      // 429
"\u2066":"\\u2066","\u2067":"\\u2067","\u2068":"\\u2068","\u2069":"\\u2069",                                      // 430
"\u206a":"\\u206a","\u206b":"\\u206b","\u206c":"\\u206c","\u206d":"\\u206d",                                      // 431
"\u206e":"\\u206e","\u206f":"\\u206f","\ufeff":"\\ufeff","\ufff0":"\\ufff0",                                      // 432
"\ufff1":"\\ufff1","\ufff2":"\\ufff2","\ufff3":"\\ufff3","\ufff4":"\\ufff4",                                      // 433
"\ufff5":"\\ufff5","\ufff6":"\\ufff6","\ufff7":"\\ufff7","\ufff8":"\\ufff8",                                      // 434
"\ufff9":"\\ufff9","\ufffa":"\\ufffa","\ufffb":"\\ufffb","\ufffc":"\\ufffc",                                      // 435
"\ufffd":"\\ufffd","\ufffe":"\\ufffe","\uffff":"\\uffff"};                                                        // 436
                                                                                                                  // 437
// Some extra characters that Chrome gets wrong, and substitutes with                                             // 438
// something else on the wire.                                                                                    // 439
var extra_escapable = /[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,
    extra_lookup;                                                                                                 // 441
                                                                                                                  // 442
// JSON Quote string. Use native implementation when possible.                                                    // 443
var JSONQuote = (JSON && JSON.stringify) || function(string) {                                                    // 444
    json_escapable.lastIndex = 0;                                                                                 // 445
    if (json_escapable.test(string)) {                                                                            // 446
        string = string.replace(json_escapable, function(a) {                                                     // 447
            return json_lookup[a];                                                                                // 448
        });                                                                                                       // 449
    }                                                                                                             // 450
    return '"' + string + '"';                                                                                    // 451
};                                                                                                                // 452
                                                                                                                  // 453
// This may be quite slow, so let's delay until user actually uses bad                                            // 454
// characters.                                                                                                    // 455
var unroll_lookup = function(escapable) {                                                                         // 456
    var i;                                                                                                        // 457
    var unrolled = {}                                                                                             // 458
    var c = []                                                                                                    // 459
    for(i=0; i<65536; i++) {                                                                                      // 460
        c.push( String.fromCharCode(i) );                                                                         // 461
    }                                                                                                             // 462
    escapable.lastIndex = 0;                                                                                      // 463
    c.join('').replace(escapable, function (a) {                                                                  // 464
        unrolled[ a ] = '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);                                // 465
        return '';                                                                                                // 466
    });                                                                                                           // 467
    escapable.lastIndex = 0;                                                                                      // 468
    return unrolled;                                                                                              // 469
};                                                                                                                // 470
                                                                                                                  // 471
// Quote string, also taking care of unicode characters that browsers                                             // 472
// often break. Especially, take care of unicode surrogates:                                                      // 473
//    http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates                                       // 474
utils.quote = function(string) {                                                                                  // 475
    var quoted = JSONQuote(string);                                                                               // 476
                                                                                                                  // 477
    // In most cases this should be very fast and good enough.                                                    // 478
    extra_escapable.lastIndex = 0;                                                                                // 479
    if(!extra_escapable.test(quoted)) {                                                                           // 480
        return quoted;                                                                                            // 481
    }                                                                                                             // 482
                                                                                                                  // 483
    if(!extra_lookup) extra_lookup = unroll_lookup(extra_escapable);                                              // 484
                                                                                                                  // 485
    return quoted.replace(extra_escapable, function(a) {                                                          // 486
        return extra_lookup[a];                                                                                   // 487
    });                                                                                                           // 488
}                                                                                                                 // 489
                                                                                                                  // 490
var _all_protocols = ['websocket',                                                                                // 491
                      'xdr-streaming',                                                                            // 492
                      'xhr-streaming',                                                                            // 493
                      'iframe-eventsource',                                                                       // 494
                      'iframe-htmlfile',                                                                          // 495
                      'xdr-polling',                                                                              // 496
                      'xhr-polling',                                                                              // 497
                      'iframe-xhr-polling',                                                                       // 498
                      'jsonp-polling'];                                                                           // 499
                                                                                                                  // 500
utils.probeProtocols = function() {                                                                               // 501
    var probed = {};                                                                                              // 502
    for(var i=0; i<_all_protocols.length; i++) {                                                                  // 503
        var protocol = _all_protocols[i];                                                                         // 504
        // User can have a typo in protocol name.                                                                 // 505
        probed[protocol] = SockJS[protocol] &&                                                                    // 506
                           SockJS[protocol].enabled();                                                            // 507
    }                                                                                                             // 508
    return probed;                                                                                                // 509
};                                                                                                                // 510
                                                                                                                  // 511
utils.detectProtocols = function(probed, protocols_whitelist, info) {                                             // 512
    var pe = {},                                                                                                  // 513
        protocols = [];                                                                                           // 514
    if (!protocols_whitelist) protocols_whitelist = _all_protocols;                                               // 515
    for(var i=0; i<protocols_whitelist.length; i++) {                                                             // 516
        var protocol = protocols_whitelist[i];                                                                    // 517
        pe[protocol] = probed[protocol];                                                                          // 518
    }                                                                                                             // 519
    var maybe_push = function(protos) {                                                                           // 520
        var proto = protos.shift();                                                                               // 521
        if (pe[proto]) {                                                                                          // 522
            protocols.push(proto);                                                                                // 523
        } else {                                                                                                  // 524
            if (protos.length > 0) {                                                                              // 525
                maybe_push(protos);                                                                               // 526
            }                                                                                                     // 527
        }                                                                                                         // 528
    }                                                                                                             // 529
                                                                                                                  // 530
    // 1. Websocket                                                                                               // 531
    if (info.websocket !== false) {                                                                               // 532
        maybe_push(['websocket']);                                                                                // 533
    }                                                                                                             // 534
                                                                                                                  // 535
    // 2. Streaming                                                                                               // 536
    if (pe['xhr-streaming'] && !info.null_origin) {                                                               // 537
        protocols.push('xhr-streaming');                                                                          // 538
    } else {                                                                                                      // 539
        if (pe['xdr-streaming'] && !info.cookie_needed && !info.null_origin) {                                    // 540
            protocols.push('xdr-streaming');                                                                      // 541
        } else {                                                                                                  // 542
            maybe_push(['iframe-eventsource',                                                                     // 543
                        'iframe-htmlfile']);                                                                      // 544
        }                                                                                                         // 545
    }                                                                                                             // 546
                                                                                                                  // 547
    // 3. Polling                                                                                                 // 548
    if (pe['xhr-polling'] && !info.null_origin) {                                                                 // 549
        protocols.push('xhr-polling');                                                                            // 550
    } else {                                                                                                      // 551
        if (pe['xdr-polling'] && !info.cookie_needed && !info.null_origin) {                                      // 552
            protocols.push('xdr-polling');                                                                        // 553
        } else {                                                                                                  // 554
            maybe_push(['iframe-xhr-polling',                                                                     // 555
                        'jsonp-polling']);                                                                        // 556
        }                                                                                                         // 557
    }                                                                                                             // 558
    return protocols;                                                                                             // 559
}                                                                                                                 // 560
//         [*] End of lib/utils.js                                                                                // 561
                                                                                                                  // 562
                                                                                                                  // 563
//         [*] Including lib/dom.js                                                                               // 564
/*                                                                                                                // 565
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 566
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 567
 *                                                                                                                // 568
 * For the license see COPYING.                                                                                   // 569
 * ***** END LICENSE BLOCK *****                                                                                  // 570
 */                                                                                                               // 571
                                                                                                                  // 572
// May be used by htmlfile jsonp and transports.                                                                  // 573
var MPrefix = '_sockjs_global';                                                                                   // 574
utils.createHook = function() {                                                                                   // 575
    var window_id = 'a' + utils.random_string(8);                                                                 // 576
    if (!(MPrefix in _window)) {                                                                                  // 577
        var map = {};                                                                                             // 578
        _window[MPrefix] = function(window_id) {                                                                  // 579
            if (!(window_id in map)) {                                                                            // 580
                map[window_id] = {                                                                                // 581
                    id: window_id,                                                                                // 582
                    del: function() {delete map[window_id];}                                                      // 583
                };                                                                                                // 584
            }                                                                                                     // 585
            return map[window_id];                                                                                // 586
        }                                                                                                         // 587
    }                                                                                                             // 588
    return _window[MPrefix](window_id);                                                                           // 589
};                                                                                                                // 590
                                                                                                                  // 591
                                                                                                                  // 592
                                                                                                                  // 593
utils.attachMessage = function(listener) {                                                                        // 594
    utils.attachEvent('message', listener);                                                                       // 595
};                                                                                                                // 596
utils.attachEvent = function(event, listener) {                                                                   // 597
    if (typeof _window.addEventListener !== 'undefined') {                                                        // 598
        _window.addEventListener(event, listener, false);                                                         // 599
    } else {                                                                                                      // 600
        // IE quirks.                                                                                             // 601
        // According to: http://stevesouders.com/misc/test-postmessage.php                                        // 602
        // the message gets delivered only to 'document', not 'window'.                                           // 603
        _document.attachEvent("on" + event, listener);                                                            // 604
        // I get 'window' for ie8.                                                                                // 605
        _window.attachEvent("on" + event, listener);                                                              // 606
    }                                                                                                             // 607
};                                                                                                                // 608
                                                                                                                  // 609
utils.detachMessage = function(listener) {                                                                        // 610
    utils.detachEvent('message', listener);                                                                       // 611
};                                                                                                                // 612
utils.detachEvent = function(event, listener) {                                                                   // 613
    if (typeof _window.addEventListener !== 'undefined') {                                                        // 614
        _window.removeEventListener(event, listener, false);                                                      // 615
    } else {                                                                                                      // 616
        _document.detachEvent("on" + event, listener);                                                            // 617
        _window.detachEvent("on" + event, listener);                                                              // 618
    }                                                                                                             // 619
};                                                                                                                // 620
                                                                                                                  // 621
                                                                                                                  // 622
var on_unload = {};                                                                                               // 623
// Things registered after beforeunload are to be called immediately.                                             // 624
var after_unload = false;                                                                                         // 625
                                                                                                                  // 626
var trigger_unload_callbacks = function() {                                                                       // 627
    for(var ref in on_unload) {                                                                                   // 628
        on_unload[ref]();                                                                                         // 629
        delete on_unload[ref];                                                                                    // 630
    };                                                                                                            // 631
};                                                                                                                // 632
                                                                                                                  // 633
var unload_triggered = function() {                                                                               // 634
    if(after_unload) return;                                                                                      // 635
    after_unload = true;                                                                                          // 636
    trigger_unload_callbacks();                                                                                   // 637
};                                                                                                                // 638
                                                                                                                  // 639
// 'unload' alone is not reliable in opera within an iframe, but we                                               // 640
// can't use `beforeunload` as IE fires it on javascript: links.                                                  // 641
utils.attachEvent('unload', unload_triggered);                                                                    // 642
                                                                                                                  // 643
utils.unload_add = function(listener) {                                                                           // 644
    var ref = utils.random_string(8);                                                                             // 645
    on_unload[ref] = listener;                                                                                    // 646
    if (after_unload) {                                                                                           // 647
        utils.delay(trigger_unload_callbacks);                                                                    // 648
    }                                                                                                             // 649
    return ref;                                                                                                   // 650
};                                                                                                                // 651
utils.unload_del = function(ref) {                                                                                // 652
    if (ref in on_unload)                                                                                         // 653
        delete on_unload[ref];                                                                                    // 654
};                                                                                                                // 655
                                                                                                                  // 656
                                                                                                                  // 657
utils.createIframe = function (iframe_url, error_callback) {                                                      // 658
    var iframe = _document.createElement('iframe');                                                               // 659
    var tref, unload_ref;                                                                                         // 660
    var unattach = function() {                                                                                   // 661
        clearTimeout(tref);                                                                                       // 662
        // Explorer had problems with that.                                                                       // 663
        try {iframe.onload = null;} catch (x) {}                                                                  // 664
        iframe.onerror = null;                                                                                    // 665
    };                                                                                                            // 666
    var cleanup = function() {                                                                                    // 667
        if (iframe) {                                                                                             // 668
            unattach();                                                                                           // 669
            // This timeout makes chrome fire onbeforeunload event                                                // 670
            // within iframe. Without the timeout it goes straight to                                             // 671
            // onunload.                                                                                          // 672
            setTimeout(function() {                                                                               // 673
                if(iframe) {                                                                                      // 674
                    iframe.parentNode.removeChild(iframe);                                                        // 675
                }                                                                                                 // 676
                iframe = null;                                                                                    // 677
            }, 0);                                                                                                // 678
            utils.unload_del(unload_ref);                                                                         // 679
        }                                                                                                         // 680
    };                                                                                                            // 681
    var onerror = function(r) {                                                                                   // 682
        if (iframe) {                                                                                             // 683
            cleanup();                                                                                            // 684
            error_callback(r);                                                                                    // 685
        }                                                                                                         // 686
    };                                                                                                            // 687
    var post = function(msg, origin) {                                                                            // 688
        try {                                                                                                     // 689
            // When the iframe is not loaded, IE raises an exception                                              // 690
            // on 'contentWindow'.                                                                                // 691
            if (iframe && iframe.contentWindow) {                                                                 // 692
                iframe.contentWindow.postMessage(msg, origin);                                                    // 693
            }                                                                                                     // 694
        } catch (x) {};                                                                                           // 695
    };                                                                                                            // 696
                                                                                                                  // 697
    iframe.src = iframe_url;                                                                                      // 698
    iframe.style.display = 'none';                                                                                // 699
    iframe.style.position = 'absolute';                                                                           // 700
    iframe.onerror = function(){onerror('onerror');};                                                             // 701
    iframe.onload = function() {                                                                                  // 702
        // `onload` is triggered before scripts on the iframe are                                                 // 703
        // executed. Give it few seconds to actually load stuff.                                                  // 704
        clearTimeout(tref);                                                                                       // 705
        tref = setTimeout(function(){onerror('onload timeout');}, 2000);                                          // 706
    };                                                                                                            // 707
    _document.body.appendChild(iframe);                                                                           // 708
    tref = setTimeout(function(){onerror('timeout');}, 15000);                                                    // 709
    unload_ref = utils.unload_add(cleanup);                                                                       // 710
    return {                                                                                                      // 711
        post: post,                                                                                               // 712
        cleanup: cleanup,                                                                                         // 713
        loaded: unattach                                                                                          // 714
    };                                                                                                            // 715
};                                                                                                                // 716
                                                                                                                  // 717
utils.createHtmlfile = function (iframe_url, error_callback) {                                                    // 718
    var doc = new ActiveXObject('htmlfile');                                                                      // 719
    var tref, unload_ref;                                                                                         // 720
    var iframe;                                                                                                   // 721
    var unattach = function() {                                                                                   // 722
        clearTimeout(tref);                                                                                       // 723
    };                                                                                                            // 724
    var cleanup = function() {                                                                                    // 725
        if (doc) {                                                                                                // 726
            unattach();                                                                                           // 727
            utils.unload_del(unload_ref);                                                                         // 728
            iframe.parentNode.removeChild(iframe);                                                                // 729
            iframe = doc = null;                                                                                  // 730
            CollectGarbage();                                                                                     // 731
        }                                                                                                         // 732
    };                                                                                                            // 733
    var onerror = function(r)  {                                                                                  // 734
        if (doc) {                                                                                                // 735
            cleanup();                                                                                            // 736
            error_callback(r);                                                                                    // 737
        }                                                                                                         // 738
    };                                                                                                            // 739
    var post = function(msg, origin) {                                                                            // 740
        try {                                                                                                     // 741
            // When the iframe is not loaded, IE raises an exception                                              // 742
            // on 'contentWindow'.                                                                                // 743
            if (iframe && iframe.contentWindow) {                                                                 // 744
                iframe.contentWindow.postMessage(msg, origin);                                                    // 745
            }                                                                                                     // 746
        } catch (x) {};                                                                                           // 747
    };                                                                                                            // 748
                                                                                                                  // 749
    doc.open();                                                                                                   // 750
    doc.write('<html><s' + 'cript>' +                                                                             // 751
              'document.domain="' + document.domain + '";' +                                                      // 752
              '</s' + 'cript></html>');                                                                           // 753
    doc.close();                                                                                                  // 754
    doc.parentWindow[WPrefix] = _window[WPrefix];                                                                 // 755
    var c = doc.createElement('div');                                                                             // 756
    doc.body.appendChild(c);                                                                                      // 757
    iframe = doc.createElement('iframe');                                                                         // 758
    c.appendChild(iframe);                                                                                        // 759
    iframe.src = iframe_url;                                                                                      // 760
    tref = setTimeout(function(){onerror('timeout');}, 15000);                                                    // 761
    unload_ref = utils.unload_add(cleanup);                                                                       // 762
    return {                                                                                                      // 763
        post: post,                                                                                               // 764
        cleanup: cleanup,                                                                                         // 765
        loaded: unattach                                                                                          // 766
    };                                                                                                            // 767
};                                                                                                                // 768
//         [*] End of lib/dom.js                                                                                  // 769
                                                                                                                  // 770
                                                                                                                  // 771
//         [*] Including lib/dom2.js                                                                              // 772
/*                                                                                                                // 773
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 774
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 775
 *                                                                                                                // 776
 * For the license see COPYING.                                                                                   // 777
 * ***** END LICENSE BLOCK *****                                                                                  // 778
 */                                                                                                               // 779
                                                                                                                  // 780
var AbstractXHRObject = function(){};                                                                             // 781
AbstractXHRObject.prototype = new EventEmitter(['chunk', 'finish']);                                              // 782
                                                                                                                  // 783
AbstractXHRObject.prototype._start = function(method, url, payload, opts) {                                       // 784
    var that = this;                                                                                              // 785
                                                                                                                  // 786
    try {                                                                                                         // 787
        that.xhr = new XMLHttpRequest();                                                                          // 788
    } catch(x) {};                                                                                                // 789
                                                                                                                  // 790
    if (!that.xhr) {                                                                                              // 791
        try {                                                                                                     // 792
            that.xhr = new _window.ActiveXObject('Microsoft.XMLHTTP');                                            // 793
        } catch(x) {};                                                                                            // 794
    }                                                                                                             // 795
    if (_window.ActiveXObject || _window.XDomainRequest) {                                                        // 796
        // IE8 caches even POSTs                                                                                  // 797
        url += ((url.indexOf('?') === -1) ? '?' : '&') + 't='+(+new Date);                                        // 798
    }                                                                                                             // 799
                                                                                                                  // 800
    // Explorer tends to keep connection open, even after the                                                     // 801
    // tab gets closed: http://bugs.jquery.com/ticket/5280                                                        // 802
    that.unload_ref = utils.unload_add(function(){that._cleanup(true);});                                         // 803
    try {                                                                                                         // 804
        that.xhr.open(method, url, true);                                                                         // 805
    } catch(e) {                                                                                                  // 806
        // IE raises an exception on wrong port.                                                                  // 807
        that.emit('finish', 0, '');                                                                               // 808
        that._cleanup();                                                                                          // 809
        return;                                                                                                   // 810
    };                                                                                                            // 811
                                                                                                                  // 812
    if (!opts || !opts.no_credentials) {                                                                          // 813
        // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :                                    // 814
        // "This never affects same-site requests."                                                               // 815
        that.xhr.withCredentials = 'true';                                                                        // 816
    }                                                                                                             // 817
    if (opts && opts.headers) {                                                                                   // 818
        for(var key in opts.headers) {                                                                            // 819
            that.xhr.setRequestHeader(key, opts.headers[key]);                                                    // 820
        }                                                                                                         // 821
    }                                                                                                             // 822
                                                                                                                  // 823
    that.xhr.onreadystatechange = function() {                                                                    // 824
        if (that.xhr) {                                                                                           // 825
            var x = that.xhr;                                                                                     // 826
            switch (x.readyState) {                                                                               // 827
            case 3:                                                                                               // 828
                // IE doesn't like peeking into responseText or status                                            // 829
                // on Microsoft.XMLHTTP and readystate=3                                                          // 830
                try {                                                                                             // 831
                    var status = x.status;                                                                        // 832
                    var text = x.responseText;                                                                    // 833
                } catch (x) {};                                                                                   // 834
                // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450                                    // 835
                if (status === 1223) status = 204;                                                                // 836
                                                                                                                  // 837
                // IE does return readystate == 3 for 404 answers.                                                // 838
                if (text && text.length > 0) {                                                                    // 839
                    that.emit('chunk', status, text);                                                             // 840
                }                                                                                                 // 841
                break;                                                                                            // 842
            case 4:                                                                                               // 843
                var status = x.status;                                                                            // 844
                // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450                                    // 845
                if (status === 1223) status = 204;                                                                // 846
                                                                                                                  // 847
                that.emit('finish', status, x.responseText);                                                      // 848
                that._cleanup(false);                                                                             // 849
                break;                                                                                            // 850
            }                                                                                                     // 851
        }                                                                                                         // 852
    };                                                                                                            // 853
    that.xhr.send(payload);                                                                                       // 854
};                                                                                                                // 855
                                                                                                                  // 856
AbstractXHRObject.prototype._cleanup = function(abort) {                                                          // 857
    var that = this;                                                                                              // 858
    if (!that.xhr) return;                                                                                        // 859
    utils.unload_del(that.unload_ref);                                                                            // 860
                                                                                                                  // 861
    // IE needs this field to be a function                                                                       // 862
    that.xhr.onreadystatechange = function(){};                                                                   // 863
                                                                                                                  // 864
    if (abort) {                                                                                                  // 865
        try {                                                                                                     // 866
            that.xhr.abort();                                                                                     // 867
        } catch(x) {};                                                                                            // 868
    }                                                                                                             // 869
    that.unload_ref = that.xhr = null;                                                                            // 870
};                                                                                                                // 871
                                                                                                                  // 872
AbstractXHRObject.prototype.close = function() {                                                                  // 873
    var that = this;                                                                                              // 874
    that.nuke();                                                                                                  // 875
    that._cleanup(true);                                                                                          // 876
};                                                                                                                // 877
                                                                                                                  // 878
var XHRCorsObject = utils.XHRCorsObject = function() {                                                            // 879
    var that = this, args = arguments;                                                                            // 880
    utils.delay(function(){that._start.apply(that, args);});                                                      // 881
};                                                                                                                // 882
XHRCorsObject.prototype = new AbstractXHRObject();                                                                // 883
                                                                                                                  // 884
var XHRLocalObject = utils.XHRLocalObject = function(method, url, payload) {                                      // 885
    var that = this;                                                                                              // 886
    utils.delay(function(){                                                                                       // 887
        that._start(method, url, payload, {                                                                       // 888
            no_credentials: true                                                                                  // 889
        });                                                                                                       // 890
    });                                                                                                           // 891
};                                                                                                                // 892
XHRLocalObject.prototype = new AbstractXHRObject();                                                               // 893
                                                                                                                  // 894
                                                                                                                  // 895
                                                                                                                  // 896
// References:                                                                                                    // 897
//   http://ajaxian.com/archives/100-line-ajax-wrapper                                                            // 898
//   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx                                               // 899
var XDRObject = utils.XDRObject = function(method, url, payload) {                                                // 900
    var that = this;                                                                                              // 901
    utils.delay(function(){that._start(method, url, payload);});                                                  // 902
};                                                                                                                // 903
XDRObject.prototype = new EventEmitter(['chunk', 'finish']);                                                      // 904
XDRObject.prototype._start = function(method, url, payload) {                                                     // 905
    var that = this;                                                                                              // 906
    var xdr = new XDomainRequest();                                                                               // 907
    // IE caches even POSTs                                                                                       // 908
    url += ((url.indexOf('?') === -1) ? '?' : '&') + 't='+(+new Date);                                            // 909
                                                                                                                  // 910
    var onerror = xdr.ontimeout = xdr.onerror = function() {                                                      // 911
        that.emit('finish', 0, '');                                                                               // 912
        that._cleanup(false);                                                                                     // 913
    };                                                                                                            // 914
    xdr.onprogress = function() {                                                                                 // 915
        that.emit('chunk', 200, xdr.responseText);                                                                // 916
    };                                                                                                            // 917
    xdr.onload = function() {                                                                                     // 918
        that.emit('finish', 200, xdr.responseText);                                                               // 919
        that._cleanup(false);                                                                                     // 920
    };                                                                                                            // 921
    that.xdr = xdr;                                                                                               // 922
    that.unload_ref = utils.unload_add(function(){that._cleanup(true);});                                         // 923
    try {                                                                                                         // 924
        // Fails with AccessDenied if port number is bogus                                                        // 925
        that.xdr.open(method, url);                                                                               // 926
        that.xdr.send(payload);                                                                                   // 927
    } catch(x) {                                                                                                  // 928
        onerror();                                                                                                // 929
    }                                                                                                             // 930
};                                                                                                                // 931
                                                                                                                  // 932
XDRObject.prototype._cleanup = function(abort) {                                                                  // 933
    var that = this;                                                                                              // 934
    if (!that.xdr) return;                                                                                        // 935
    utils.unload_del(that.unload_ref);                                                                            // 936
                                                                                                                  // 937
    that.xdr.ontimeout = that.xdr.onerror = that.xdr.onprogress =                                                 // 938
        that.xdr.onload = null;                                                                                   // 939
    if (abort) {                                                                                                  // 940
        try {                                                                                                     // 941
            that.xdr.abort();                                                                                     // 942
        } catch(x) {};                                                                                            // 943
    }                                                                                                             // 944
    that.unload_ref = that.xdr = null;                                                                            // 945
};                                                                                                                // 946
                                                                                                                  // 947
XDRObject.prototype.close = function() {                                                                          // 948
    var that = this;                                                                                              // 949
    that.nuke();                                                                                                  // 950
    that._cleanup(true);                                                                                          // 951
};                                                                                                                // 952
                                                                                                                  // 953
// 1. Is natively via XHR                                                                                         // 954
// 2. Is natively via XDR                                                                                         // 955
// 3. Nope, but postMessage is there so it should work via the Iframe.                                            // 956
// 4. Nope, sorry.                                                                                                // 957
utils.isXHRCorsCapable = function() {                                                                             // 958
    if (_window.XMLHttpRequest && 'withCredentials' in new XMLHttpRequest()) {                                    // 959
        return 1;                                                                                                 // 960
    }                                                                                                             // 961
    // XDomainRequest doesn't work if page is served from file://                                                 // 962
    if (_window.XDomainRequest && _document.domain) {                                                             // 963
        return 2;                                                                                                 // 964
    }                                                                                                             // 965
    if (IframeTransport.enabled()) {                                                                              // 966
        return 3;                                                                                                 // 967
    }                                                                                                             // 968
    return 4;                                                                                                     // 969
};                                                                                                                // 970
//         [*] End of lib/dom2.js                                                                                 // 971
                                                                                                                  // 972
                                                                                                                  // 973
//         [*] Including lib/sockjs.js                                                                            // 974
/*                                                                                                                // 975
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 976
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 977
 *                                                                                                                // 978
 * For the license see COPYING.                                                                                   // 979
 * ***** END LICENSE BLOCK *****                                                                                  // 980
 */                                                                                                               // 981
                                                                                                                  // 982
var SockJS = function(url, dep_protocols_whitelist, options) {                                                    // 983
    if (!(this instanceof SockJS)) {                                                                              // 984
        // makes `new` optional                                                                                   // 985
        return new SockJS(url, dep_protocols_whitelist, options);                                                 // 986
    }                                                                                                             // 987
                                                                                                                  // 988
    var that = this, protocols_whitelist;                                                                         // 989
    that._options = {devel: false, debug: false, protocols_whitelist: [],                                         // 990
                     info: undefined, rtt: undefined};                                                            // 991
    if (options) {                                                                                                // 992
        utils.objectExtend(that._options, options);                                                               // 993
    }                                                                                                             // 994
    that._base_url = utils.amendUrl(url);                                                                         // 995
    that._server = that._options.server || utils.random_number_string(1000);                                      // 996
    if (that._options.protocols_whitelist &&                                                                      // 997
        that._options.protocols_whitelist.length) {                                                               // 998
        protocols_whitelist = that._options.protocols_whitelist;                                                  // 999
    } else {                                                                                                      // 1000
        // Deprecated API                                                                                         // 1001
        if (typeof dep_protocols_whitelist === 'string' &&                                                        // 1002
            dep_protocols_whitelist.length > 0) {                                                                 // 1003
            protocols_whitelist = [dep_protocols_whitelist];                                                      // 1004
        } else if (utils.isArray(dep_protocols_whitelist)) {                                                      // 1005
            protocols_whitelist = dep_protocols_whitelist                                                         // 1006
        } else {                                                                                                  // 1007
            protocols_whitelist = null;                                                                           // 1008
        }                                                                                                         // 1009
        if (protocols_whitelist) {                                                                                // 1010
            that._debug('Deprecated API: Use "protocols_whitelist" option ' +                                     // 1011
                        'instead of supplying protocol list as a second ' +                                       // 1012
                        'parameter to SockJS constructor.');                                                      // 1013
        }                                                                                                         // 1014
    }                                                                                                             // 1015
    that._protocols = [];                                                                                         // 1016
    that.protocol = null;                                                                                         // 1017
    that.readyState = SockJS.CONNECTING;                                                                          // 1018
    that._ir = createInfoReceiver(that._base_url);                                                                // 1019
    that._ir.onfinish = function(info, rtt) {                                                                     // 1020
        that._ir = null;                                                                                          // 1021
        if (info) {                                                                                               // 1022
            if (that._options.info) {                                                                             // 1023
                // Override if user supplies the option                                                           // 1024
                info = utils.objectExtend(info, that._options.info);                                              // 1025
            }                                                                                                     // 1026
            if (that._options.rtt) {                                                                              // 1027
                rtt = that._options.rtt;                                                                          // 1028
            }                                                                                                     // 1029
            that._applyInfo(info, rtt, protocols_whitelist);                                                      // 1030
            that._didClose();                                                                                     // 1031
        } else {                                                                                                  // 1032
            that._didClose(1002, 'Can\'t connect to server', true);                                               // 1033
        }                                                                                                         // 1034
    };                                                                                                            // 1035
};                                                                                                                // 1036
// Inheritance                                                                                                    // 1037
SockJS.prototype = new REventTarget();                                                                            // 1038
                                                                                                                  // 1039
SockJS.version = "0.3.4";                                                                                         // 1040
                                                                                                                  // 1041
SockJS.CONNECTING = 0;                                                                                            // 1042
SockJS.OPEN = 1;                                                                                                  // 1043
SockJS.CLOSING = 2;                                                                                               // 1044
SockJS.CLOSED = 3;                                                                                                // 1045
                                                                                                                  // 1046
SockJS.prototype._debug = function() {                                                                            // 1047
    if (this._options.debug)                                                                                      // 1048
        utils.log.apply(utils, arguments);                                                                        // 1049
};                                                                                                                // 1050
                                                                                                                  // 1051
SockJS.prototype._dispatchOpen = function() {                                                                     // 1052
    var that = this;                                                                                              // 1053
    if (that.readyState === SockJS.CONNECTING) {                                                                  // 1054
        if (that._transport_tref) {                                                                               // 1055
            clearTimeout(that._transport_tref);                                                                   // 1056
            that._transport_tref = null;                                                                          // 1057
        }                                                                                                         // 1058
        that.readyState = SockJS.OPEN;                                                                            // 1059
        that.dispatchEvent(new SimpleEvent("open"));                                                              // 1060
    } else {                                                                                                      // 1061
        // The server might have been restarted, and lost track of our                                            // 1062
        // connection.                                                                                            // 1063
        that._didClose(1006, "Server lost session");                                                              // 1064
    }                                                                                                             // 1065
};                                                                                                                // 1066
                                                                                                                  // 1067
SockJS.prototype._dispatchMessage = function(data) {                                                              // 1068
    var that = this;                                                                                              // 1069
    if (that.readyState !== SockJS.OPEN)                                                                          // 1070
            return;                                                                                               // 1071
    that.dispatchEvent(new SimpleEvent("message", {data: data}));                                                 // 1072
};                                                                                                                // 1073
                                                                                                                  // 1074
SockJS.prototype._dispatchHeartbeat = function(data) {                                                            // 1075
    var that = this;                                                                                              // 1076
    if (that.readyState !== SockJS.OPEN)                                                                          // 1077
        return;                                                                                                   // 1078
    that.dispatchEvent(new SimpleEvent('heartbeat', {}));                                                         // 1079
};                                                                                                                // 1080
                                                                                                                  // 1081
SockJS.prototype._didClose = function(code, reason, force) {                                                      // 1082
    var that = this;                                                                                              // 1083
    if (that.readyState !== SockJS.CONNECTING &&                                                                  // 1084
        that.readyState !== SockJS.OPEN &&                                                                        // 1085
        that.readyState !== SockJS.CLOSING)                                                                       // 1086
            throw new Error('INVALID_STATE_ERR');                                                                 // 1087
    if (that._ir) {                                                                                               // 1088
        that._ir.nuke();                                                                                          // 1089
        that._ir = null;                                                                                          // 1090
    }                                                                                                             // 1091
                                                                                                                  // 1092
    if (that._transport) {                                                                                        // 1093
        that._transport.doCleanup();                                                                              // 1094
        that._transport = null;                                                                                   // 1095
    }                                                                                                             // 1096
                                                                                                                  // 1097
    var close_event = new SimpleEvent("close", {                                                                  // 1098
        code: code,                                                                                               // 1099
        reason: reason,                                                                                           // 1100
        wasClean: utils.userSetCode(code)});                                                                      // 1101
                                                                                                                  // 1102
    if (!utils.userSetCode(code) &&                                                                               // 1103
        that.readyState === SockJS.CONNECTING && !force) {                                                        // 1104
        if (that._try_next_protocol(close_event)) {                                                               // 1105
            return;                                                                                               // 1106
        }                                                                                                         // 1107
        close_event = new SimpleEvent("close", {code: 2000,                                                       // 1108
                                                reason: "All transports failed",                                  // 1109
                                                wasClean: false,                                                  // 1110
                                                last_event: close_event});                                        // 1111
    }                                                                                                             // 1112
    that.readyState = SockJS.CLOSED;                                                                              // 1113
                                                                                                                  // 1114
    utils.delay(function() {                                                                                      // 1115
                   that.dispatchEvent(close_event);                                                               // 1116
                });                                                                                               // 1117
};                                                                                                                // 1118
                                                                                                                  // 1119
SockJS.prototype._didMessage = function(data) {                                                                   // 1120
    var that = this;                                                                                              // 1121
    var type = data.slice(0, 1);                                                                                  // 1122
    switch(type) {                                                                                                // 1123
    case 'o':                                                                                                     // 1124
        that._dispatchOpen();                                                                                     // 1125
        break;                                                                                                    // 1126
    case 'a':                                                                                                     // 1127
        var payload = JSON.parse(data.slice(1) || '[]');                                                          // 1128
        for(var i=0; i < payload.length; i++){                                                                    // 1129
            that._dispatchMessage(payload[i]);                                                                    // 1130
        }                                                                                                         // 1131
        break;                                                                                                    // 1132
    case 'm':                                                                                                     // 1133
        var payload = JSON.parse(data.slice(1) || 'null');                                                        // 1134
        that._dispatchMessage(payload);                                                                           // 1135
        break;                                                                                                    // 1136
    case 'c':                                                                                                     // 1137
        var payload = JSON.parse(data.slice(1) || '[]');                                                          // 1138
        that._didClose(payload[0], payload[1]);                                                                   // 1139
        break;                                                                                                    // 1140
    case 'h':                                                                                                     // 1141
        that._dispatchHeartbeat();                                                                                // 1142
        break;                                                                                                    // 1143
    }                                                                                                             // 1144
};                                                                                                                // 1145
                                                                                                                  // 1146
SockJS.prototype._try_next_protocol = function(close_event) {                                                     // 1147
    var that = this;                                                                                              // 1148
    if (that.protocol) {                                                                                          // 1149
        that._debug('Closed transport:', that.protocol, ''+close_event);                                          // 1150
        that.protocol = null;                                                                                     // 1151
    }                                                                                                             // 1152
    if (that._transport_tref) {                                                                                   // 1153
        clearTimeout(that._transport_tref);                                                                       // 1154
        that._transport_tref = null;                                                                              // 1155
    }                                                                                                             // 1156
                                                                                                                  // 1157
    while(1) {                                                                                                    // 1158
        var protocol = that.protocol = that._protocols.shift();                                                   // 1159
        if (!protocol) {                                                                                          // 1160
            return false;                                                                                         // 1161
        }                                                                                                         // 1162
        // Some protocols require access to `body`, what if were in                                               // 1163
        // the `head`?                                                                                            // 1164
        if (SockJS[protocol] &&                                                                                   // 1165
            SockJS[protocol].need_body === true &&                                                                // 1166
            (!_document.body ||                                                                                   // 1167
             (typeof _document.readyState !== 'undefined'                                                         // 1168
              && _document.readyState !== 'complete'))) {                                                         // 1169
            that._protocols.unshift(protocol);                                                                    // 1170
            that.protocol = 'waiting-for-load';                                                                   // 1171
            utils.attachEvent('load', function(){                                                                 // 1172
                that._try_next_protocol();                                                                        // 1173
            });                                                                                                   // 1174
            return true;                                                                                          // 1175
        }                                                                                                         // 1176
                                                                                                                  // 1177
        if (!SockJS[protocol] ||                                                                                  // 1178
              !SockJS[protocol].enabled(that._options)) {                                                         // 1179
            that._debug('Skipping transport:', protocol);                                                         // 1180
        } else {                                                                                                  // 1181
            var roundTrips = SockJS[protocol].roundTrips || 1;                                                    // 1182
            var to = ((that._options.rto || 0) * roundTrips) || 5000;                                             // 1183
            that._transport_tref = utils.delay(to, function() {                                                   // 1184
                if (that.readyState === SockJS.CONNECTING) {                                                      // 1185
                    // I can't understand how it is possible to run                                               // 1186
                    // this timer, when the state is CLOSED, but                                                  // 1187
                    // apparently in IE everythin is possible.                                                    // 1188
                    that._didClose(2007, "Transport timeouted");                                                  // 1189
                }                                                                                                 // 1190
            });                                                                                                   // 1191
                                                                                                                  // 1192
            var connid = utils.random_string(8);                                                                  // 1193
            var trans_url = that._base_url + '/' + that._server + '/' + connid;                                   // 1194
            that._debug('Opening transport:', protocol, ' url:'+trans_url,                                        // 1195
                        ' RTO:'+that._options.rto);                                                               // 1196
            that._transport = new SockJS[protocol](that, trans_url,                                               // 1197
                                                   that._base_url);                                               // 1198
            return true;                                                                                          // 1199
        }                                                                                                         // 1200
    }                                                                                                             // 1201
};                                                                                                                // 1202
                                                                                                                  // 1203
SockJS.prototype.close = function(code, reason) {                                                                 // 1204
    var that = this;                                                                                              // 1205
    if (code && !utils.userSetCode(code))                                                                         // 1206
        throw new Error("INVALID_ACCESS_ERR");                                                                    // 1207
    if(that.readyState !== SockJS.CONNECTING &&                                                                   // 1208
       that.readyState !== SockJS.OPEN) {                                                                         // 1209
        return false;                                                                                             // 1210
    }                                                                                                             // 1211
    that.readyState = SockJS.CLOSING;                                                                             // 1212
    that._didClose(code || 1000, reason || "Normal closure");                                                     // 1213
    return true;                                                                                                  // 1214
};                                                                                                                // 1215
                                                                                                                  // 1216
SockJS.prototype.send = function(data) {                                                                          // 1217
    var that = this;                                                                                              // 1218
    if (that.readyState === SockJS.CONNECTING)                                                                    // 1219
        throw new Error('INVALID_STATE_ERR');                                                                     // 1220
    if (that.readyState === SockJS.OPEN) {                                                                        // 1221
        that._transport.doSend(utils.quote('' + data));                                                           // 1222
    }                                                                                                             // 1223
    return true;                                                                                                  // 1224
};                                                                                                                // 1225
                                                                                                                  // 1226
SockJS.prototype._applyInfo = function(info, rtt, protocols_whitelist) {                                          // 1227
    var that = this;                                                                                              // 1228
    that._options.info = info;                                                                                    // 1229
    that._options.rtt = rtt;                                                                                      // 1230
    that._options.rto = utils.countRTO(rtt);                                                                      // 1231
    that._options.info.null_origin = !_document.domain;                                                           // 1232
    // Servers can override base_url, eg to provide a randomized domain name and                                  // 1233
    // avoid browser per-domain connection limits.                                                                // 1234
    if (info.base_url)                                                                                            // 1235
      // <METEOR>                                                                                                 // 1236
      that._base_url = utils.amendUrl(info.base_url, that._base_url);                                             // 1237
      // </METEOR>                                                                                                // 1238
    var probed = utils.probeProtocols();                                                                          // 1239
    that._protocols = utils.detectProtocols(probed, protocols_whitelist, info);                                   // 1240
// <METEOR>                                                                                                       // 1241
// https://github.com/sockjs/sockjs-client/issues/79                                                              // 1242
    // Hack to avoid XDR when using different protocols                                                           // 1243
    // We're on IE trying to do cross-protocol. jsonp only.                                                       // 1244
    if (!utils.isSameOriginScheme(that._base_url) &&                                                              // 1245
        2 === utils.isXHRCorsCapable()) {                                                                         // 1246
        that._protocols = ['jsonp-polling'];                                                                      // 1247
    }                                                                                                             // 1248
// </METEOR>                                                                                                      // 1249
};                                                                                                                // 1250
//         [*] End of lib/sockjs.js                                                                               // 1251
                                                                                                                  // 1252
                                                                                                                  // 1253
//         [*] Including lib/trans-websocket.js                                                                   // 1254
/*                                                                                                                // 1255
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 1256
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 1257
 *                                                                                                                // 1258
 * For the license see COPYING.                                                                                   // 1259
 * ***** END LICENSE BLOCK *****                                                                                  // 1260
 */                                                                                                               // 1261
                                                                                                                  // 1262
var WebSocketTransport = SockJS.websocket = function(ri, trans_url) {                                             // 1263
    var that = this;                                                                                              // 1264
    var url = trans_url + '/websocket';                                                                           // 1265
    if (url.slice(0, 5) === 'https') {                                                                            // 1266
        url = 'wss' + url.slice(5);                                                                               // 1267
    } else {                                                                                                      // 1268
        url = 'ws' + url.slice(4);                                                                                // 1269
    }                                                                                                             // 1270
    that.ri = ri;                                                                                                 // 1271
    that.url = url;                                                                                               // 1272
    var Constructor = _window.WebSocket || _window.MozWebSocket;                                                  // 1273
                                                                                                                  // 1274
    that.ws = new Constructor(that.url);                                                                          // 1275
    that.ws.onmessage = function(e) {                                                                             // 1276
        that.ri._didMessage(e.data);                                                                              // 1277
    };                                                                                                            // 1278
    // Firefox has an interesting bug. If a websocket connection is                                               // 1279
    // created after onunload, it stays alive even when user                                                      // 1280
    // navigates away from the page. In such situation let's lie -                                                // 1281
    // let's not open the ws connection at all. See:                                                              // 1282
    // https://github.com/sockjs/sockjs-client/issues/28                                                          // 1283
    // https://bugzilla.mozilla.org/show_bug.cgi?id=696085                                                        // 1284
    that.unload_ref = utils.unload_add(function(){that.ws.close()});                                              // 1285
    that.ws.onclose = function() {                                                                                // 1286
        that.ri._didMessage(utils.closeFrame(1006, "WebSocket connection broken"));                               // 1287
    };                                                                                                            // 1288
};                                                                                                                // 1289
                                                                                                                  // 1290
WebSocketTransport.prototype.doSend = function(data) {                                                            // 1291
    this.ws.send('[' + data + ']');                                                                               // 1292
};                                                                                                                // 1293
                                                                                                                  // 1294
WebSocketTransport.prototype.doCleanup = function() {                                                             // 1295
    var that = this;                                                                                              // 1296
    var ws = that.ws;                                                                                             // 1297
    if (ws) {                                                                                                     // 1298
        ws.onmessage = ws.onclose = null;                                                                         // 1299
        ws.close();                                                                                               // 1300
        utils.unload_del(that.unload_ref);                                                                        // 1301
        that.unload_ref = that.ri = that.ws = null;                                                               // 1302
    }                                                                                                             // 1303
};                                                                                                                // 1304
                                                                                                                  // 1305
WebSocketTransport.enabled = function() {                                                                         // 1306
    return !!(_window.WebSocket || _window.MozWebSocket);                                                         // 1307
};                                                                                                                // 1308
                                                                                                                  // 1309
// In theory, ws should require 1 round trip. But in chrome, this is                                              // 1310
// not very stable over SSL. Most likely a ws connection requires a                                               // 1311
// separate SSL connection, in which case 2 round trips are an                                                    // 1312
// absolute minumum.                                                                                              // 1313
WebSocketTransport.roundTrips = 2;                                                                                // 1314
//         [*] End of lib/trans-websocket.js                                                                      // 1315
                                                                                                                  // 1316
                                                                                                                  // 1317
//         [*] Including lib/trans-sender.js                                                                      // 1318
/*                                                                                                                // 1319
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 1320
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 1321
 *                                                                                                                // 1322
 * For the license see COPYING.                                                                                   // 1323
 * ***** END LICENSE BLOCK *****                                                                                  // 1324
 */                                                                                                               // 1325
                                                                                                                  // 1326
var BufferedSender = function() {};                                                                               // 1327
BufferedSender.prototype.send_constructor = function(sender) {                                                    // 1328
    var that = this;                                                                                              // 1329
    that.send_buffer = [];                                                                                        // 1330
    that.sender = sender;                                                                                         // 1331
};                                                                                                                // 1332
BufferedSender.prototype.doSend = function(message) {                                                             // 1333
    var that = this;                                                                                              // 1334
    that.send_buffer.push(message);                                                                               // 1335
    if (!that.send_stop) {                                                                                        // 1336
        that.send_schedule();                                                                                     // 1337
    }                                                                                                             // 1338
};                                                                                                                // 1339
                                                                                                                  // 1340
// For polling transports in a situation when in the message callback,                                            // 1341
// new message is being send. If the sending connection was started                                               // 1342
// before receiving one, it is possible to saturate the network and                                               // 1343
// timeout due to the lack of receiving socket. To avoid that we delay                                            // 1344
// sending messages by some small time, in order to let receiving                                                 // 1345
// connection be started beforehand. This is only a halfmeasure and                                               // 1346
// does not fix the big problem, but it does make the tests go more                                               // 1347
// stable on slow networks.                                                                                       // 1348
BufferedSender.prototype.send_schedule_wait = function() {                                                        // 1349
    var that = this;                                                                                              // 1350
    var tref;                                                                                                     // 1351
    that.send_stop = function() {                                                                                 // 1352
        that.send_stop = null;                                                                                    // 1353
        clearTimeout(tref);                                                                                       // 1354
    };                                                                                                            // 1355
    tref = utils.delay(25, function() {                                                                           // 1356
        that.send_stop = null;                                                                                    // 1357
        that.send_schedule();                                                                                     // 1358
    });                                                                                                           // 1359
};                                                                                                                // 1360
                                                                                                                  // 1361
BufferedSender.prototype.send_schedule = function() {                                                             // 1362
    var that = this;                                                                                              // 1363
    if (that.send_buffer.length > 0) {                                                                            // 1364
        var payload = '[' + that.send_buffer.join(',') + ']';                                                     // 1365
        that.send_stop = that.sender(that.trans_url, payload, function(success, abort_reason) {                   // 1366
            that.send_stop = null;                                                                                // 1367
            if (success === false) {                                                                              // 1368
                that.ri._didClose(1006, 'Sending error ' + abort_reason);                                         // 1369
            } else {                                                                                              // 1370
                that.send_schedule_wait();                                                                        // 1371
            }                                                                                                     // 1372
        });                                                                                                       // 1373
        that.send_buffer = [];                                                                                    // 1374
    }                                                                                                             // 1375
};                                                                                                                // 1376
                                                                                                                  // 1377
BufferedSender.prototype.send_destructor = function() {                                                           // 1378
    var that = this;                                                                                              // 1379
    if (that._send_stop) {                                                                                        // 1380
        that._send_stop();                                                                                        // 1381
    }                                                                                                             // 1382
    that._send_stop = null;                                                                                       // 1383
};                                                                                                                // 1384
                                                                                                                  // 1385
var jsonPGenericSender = function(url, payload, callback) {                                                       // 1386
    var that = this;                                                                                              // 1387
                                                                                                                  // 1388
    if (!('_send_form' in that)) {                                                                                // 1389
        var form = that._send_form = _document.createElement('form');                                             // 1390
        var area = that._send_area = _document.createElement('textarea');                                         // 1391
        area.name = 'd';                                                                                          // 1392
        form.style.display = 'none';                                                                              // 1393
        form.style.position = 'absolute';                                                                         // 1394
        form.method = 'POST';                                                                                     // 1395
        form.enctype = 'application/x-www-form-urlencoded';                                                       // 1396
        form.acceptCharset = "UTF-8";                                                                             // 1397
        form.appendChild(area);                                                                                   // 1398
        _document.body.appendChild(form);                                                                         // 1399
    }                                                                                                             // 1400
    var form = that._send_form;                                                                                   // 1401
    var area = that._send_area;                                                                                   // 1402
    var id = 'a' + utils.random_string(8);                                                                        // 1403
    form.target = id;                                                                                             // 1404
    form.action = url + '/jsonp_send?i=' + id;                                                                    // 1405
                                                                                                                  // 1406
    var iframe;                                                                                                   // 1407
    try {                                                                                                         // 1408
        // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)                                    // 1409
        iframe = _document.createElement('<iframe name="'+ id +'">');                                             // 1410
    } catch(x) {                                                                                                  // 1411
        iframe = _document.createElement('iframe');                                                               // 1412
        iframe.name = id;                                                                                         // 1413
    }                                                                                                             // 1414
    iframe.id = id;                                                                                               // 1415
    form.appendChild(iframe);                                                                                     // 1416
    iframe.style.display = 'none';                                                                                // 1417
                                                                                                                  // 1418
    try {                                                                                                         // 1419
        area.value = payload;                                                                                     // 1420
    } catch(e) {                                                                                                  // 1421
        utils.log('Your browser is seriously broken. Go home! ' + e.message);                                     // 1422
    }                                                                                                             // 1423
    form.submit();                                                                                                // 1424
                                                                                                                  // 1425
    var completed = function(e) {                                                                                 // 1426
        if (!iframe.onerror) return;                                                                              // 1427
        iframe.onreadystatechange = iframe.onerror = iframe.onload = null;                                        // 1428
        // Opera mini doesn't like if we GC iframe                                                                // 1429
        // immediately, thus this timeout.                                                                        // 1430
        utils.delay(500, function() {                                                                             // 1431
                       iframe.parentNode.removeChild(iframe);                                                     // 1432
                       iframe = null;                                                                             // 1433
                   });                                                                                            // 1434
        area.value = '';                                                                                          // 1435
        // It is not possible to detect if the iframe succeeded or                                                // 1436
        // failed to submit our form.                                                                             // 1437
        callback(true);                                                                                           // 1438
    };                                                                                                            // 1439
    iframe.onerror = iframe.onload = completed;                                                                   // 1440
    iframe.onreadystatechange = function(e) {                                                                     // 1441
        if (iframe.readyState == 'complete') completed();                                                         // 1442
    };                                                                                                            // 1443
    return completed;                                                                                             // 1444
};                                                                                                                // 1445
                                                                                                                  // 1446
var createAjaxSender = function(AjaxObject) {                                                                     // 1447
    return function(url, payload, callback) {                                                                     // 1448
        var xo = new AjaxObject('POST', url + '/xhr_send', payload);                                              // 1449
        xo.onfinish = function(status, text) {                                                                    // 1450
            callback(status === 200 || status === 204,                                                            // 1451
                     'http status ' + status);                                                                    // 1452
        };                                                                                                        // 1453
        return function(abort_reason) {                                                                           // 1454
            callback(false, abort_reason);                                                                        // 1455
        };                                                                                                        // 1456
    };                                                                                                            // 1457
};                                                                                                                // 1458
//         [*] End of lib/trans-sender.js                                                                         // 1459
                                                                                                                  // 1460
                                                                                                                  // 1461
//         [*] Including lib/trans-jsonp-receiver.js                                                              // 1462
/*                                                                                                                // 1463
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 1464
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 1465
 *                                                                                                                // 1466
 * For the license see COPYING.                                                                                   // 1467
 * ***** END LICENSE BLOCK *****                                                                                  // 1468
 */                                                                                                               // 1469
                                                                                                                  // 1470
// Parts derived from Socket.io:                                                                                  // 1471
//    https://github.com/LearnBoost/socket.io/blob/0.6.17/lib/socket.io/transports/jsonp-polling.js               // 1472
// and jQuery-JSONP:                                                                                              // 1473
//    https://code.google.com/p/jquery-jsonp/source/browse/trunk/core/jquery.jsonp.js                             // 1474
var jsonPGenericReceiver = function(url, callback) {                                                              // 1475
    var tref;                                                                                                     // 1476
    var script = _document.createElement('script');                                                               // 1477
    var script2;  // Opera synchronous load trick.                                                                // 1478
    var close_script = function(frame) {                                                                          // 1479
        if (script2) {                                                                                            // 1480
            script2.parentNode.removeChild(script2);                                                              // 1481
            script2 = null;                                                                                       // 1482
        }                                                                                                         // 1483
        if (script) {                                                                                             // 1484
            clearTimeout(tref);                                                                                   // 1485
            // Unfortunately, you can't really abort script loading of                                            // 1486
            // the script.                                                                                        // 1487
            script.parentNode.removeChild(script);                                                                // 1488
            script.onreadystatechange = script.onerror =                                                          // 1489
                script.onload = script.onclick = null;                                                            // 1490
            script = null;                                                                                        // 1491
            callback(frame);                                                                                      // 1492
            callback = null;                                                                                      // 1493
        }                                                                                                         // 1494
    };                                                                                                            // 1495
                                                                                                                  // 1496
    // IE9 fires 'error' event after orsc or before, in random order.                                             // 1497
    var loaded_okay = false;                                                                                      // 1498
    var error_timer = null;                                                                                       // 1499
                                                                                                                  // 1500
    script.id = 'a' + utils.random_string(8);                                                                     // 1501
    script.src = url;                                                                                             // 1502
    script.type = 'text/javascript';                                                                              // 1503
    script.charset = 'UTF-8';                                                                                     // 1504
    script.onerror = function(e) {                                                                                // 1505
        if (!error_timer) {                                                                                       // 1506
            // Delay firing close_script.                                                                         // 1507
            error_timer = setTimeout(function() {                                                                 // 1508
                if (!loaded_okay) {                                                                               // 1509
                    close_script(utils.closeFrame(                                                                // 1510
                        1006,                                                                                     // 1511
                        "JSONP script loaded abnormally (onerror)"));                                             // 1512
                }                                                                                                 // 1513
            }, 1000);                                                                                             // 1514
        }                                                                                                         // 1515
    };                                                                                                            // 1516
    script.onload = function(e) {                                                                                 // 1517
        close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onload)"));                          // 1518
    };                                                                                                            // 1519
                                                                                                                  // 1520
    script.onreadystatechange = function(e) {                                                                     // 1521
        if (/loaded|closed/.test(script.readyState)) {                                                            // 1522
            if (script && script.htmlFor && script.onclick) {                                                     // 1523
                loaded_okay = true;                                                                               // 1524
                try {                                                                                             // 1525
                    // In IE, actually execute the script.                                                        // 1526
                    script.onclick();                                                                             // 1527
                } catch (x) {}                                                                                    // 1528
            }                                                                                                     // 1529
            if (script) {                                                                                         // 1530
                close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onreadystatechange)"));      // 1531
            }                                                                                                     // 1532
        }                                                                                                         // 1533
    };                                                                                                            // 1534
    // IE: event/htmlFor/onclick trick.                                                                           // 1535
    // One can't rely on proper order for onreadystatechange. In order to                                         // 1536
    // make sure, set a 'htmlFor' and 'event' properties, so that                                                 // 1537
    // script code will be installed as 'onclick' handler for the                                                 // 1538
    // script object. Later, onreadystatechange, manually execute this                                            // 1539
    // code. FF and Chrome doesn't work with 'event' and 'htmlFor'                                                // 1540
    // set. For reference see:                                                                                    // 1541
    //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html                                    // 1542
    // Also, read on that about script ordering:                                                                  // 1543
    //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order                                               // 1544
    if (typeof script.async === 'undefined' && _document.attachEvent) {                                           // 1545
        // According to mozilla docs, in recent browsers script.async defaults                                    // 1546
        // to 'true', so we may use it to detect a good browser:                                                  // 1547
        // https://developer.mozilla.org/en/HTML/Element/script                                                   // 1548
        if (!/opera/i.test(navigator.userAgent)) {                                                                // 1549
            // Naively assume we're in IE                                                                         // 1550
            try {                                                                                                 // 1551
                script.htmlFor = script.id;                                                                       // 1552
                script.event = "onclick";                                                                         // 1553
            } catch (x) {}                                                                                        // 1554
            script.async = true;                                                                                  // 1555
        } else {                                                                                                  // 1556
            // Opera, second sync script hack                                                                     // 1557
            script2 = _document.createElement('script');                                                          // 1558
            script2.text = "try{var a = document.getElementById('"+script.id+"'); if(a)a.onerror();}catch(x){};";
            script.async = script2.async = false;                                                                 // 1560
        }                                                                                                         // 1561
    }                                                                                                             // 1562
    if (typeof script.async !== 'undefined') {                                                                    // 1563
        script.async = true;                                                                                      // 1564
    }                                                                                                             // 1565
                                                                                                                  // 1566
    // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.                                  // 1567
    tref = setTimeout(function() {                                                                                // 1568
                          close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (timeout)"));       // 1569
                      }, 35000);                                                                                  // 1570
                                                                                                                  // 1571
    var head = _document.getElementsByTagName('head')[0];                                                         // 1572
    head.insertBefore(script, head.firstChild);                                                                   // 1573
    if (script2) {                                                                                                // 1574
        head.insertBefore(script2, head.firstChild);                                                              // 1575
    }                                                                                                             // 1576
    return close_script;                                                                                          // 1577
};                                                                                                                // 1578
//         [*] End of lib/trans-jsonp-receiver.js                                                                 // 1579
                                                                                                                  // 1580
                                                                                                                  // 1581
//         [*] Including lib/trans-jsonp-polling.js                                                               // 1582
/*                                                                                                                // 1583
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 1584
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 1585
 *                                                                                                                // 1586
 * For the license see COPYING.                                                                                   // 1587
 * ***** END LICENSE BLOCK *****                                                                                  // 1588
 */                                                                                                               // 1589
                                                                                                                  // 1590
// The simplest and most robust transport, using the well-know cross                                              // 1591
// domain hack - JSONP. This transport is quite inefficient - one                                                 // 1592
// mssage could use up to one http request. But at least it works almost                                          // 1593
// everywhere.                                                                                                    // 1594
// Known limitations:                                                                                             // 1595
//   o you will get a spinning cursor                                                                             // 1596
//   o for Konqueror a dumb timer is needed to detect errors                                                      // 1597
                                                                                                                  // 1598
                                                                                                                  // 1599
var JsonPTransport = SockJS['jsonp-polling'] = function(ri, trans_url) {                                          // 1600
    utils.polluteGlobalNamespace();                                                                               // 1601
    var that = this;                                                                                              // 1602
    that.ri = ri;                                                                                                 // 1603
    that.trans_url = trans_url;                                                                                   // 1604
    that.send_constructor(jsonPGenericSender);                                                                    // 1605
    that._schedule_recv();                                                                                        // 1606
};                                                                                                                // 1607
                                                                                                                  // 1608
// Inheritnace                                                                                                    // 1609
JsonPTransport.prototype = new BufferedSender();                                                                  // 1610
                                                                                                                  // 1611
JsonPTransport.prototype._schedule_recv = function() {                                                            // 1612
    var that = this;                                                                                              // 1613
    var callback = function(data) {                                                                               // 1614
        that._recv_stop = null;                                                                                   // 1615
        if (data) {                                                                                               // 1616
            // no data - heartbeat;                                                                               // 1617
            if (!that._is_closing) {                                                                              // 1618
                that.ri._didMessage(data);                                                                        // 1619
            }                                                                                                     // 1620
        }                                                                                                         // 1621
        // The message can be a close message, and change is_closing state.                                       // 1622
        if (!that._is_closing) {                                                                                  // 1623
            that._schedule_recv();                                                                                // 1624
        }                                                                                                         // 1625
    };                                                                                                            // 1626
    that._recv_stop = jsonPReceiverWrapper(that.trans_url + '/jsonp',                                             // 1627
                                           jsonPGenericReceiver, callback);                                       // 1628
};                                                                                                                // 1629
                                                                                                                  // 1630
JsonPTransport.enabled = function() {                                                                             // 1631
    return true;                                                                                                  // 1632
};                                                                                                                // 1633
                                                                                                                  // 1634
JsonPTransport.need_body = true;                                                                                  // 1635
                                                                                                                  // 1636
                                                                                                                  // 1637
JsonPTransport.prototype.doCleanup = function() {                                                                 // 1638
    var that = this;                                                                                              // 1639
    that._is_closing = true;                                                                                      // 1640
    if (that._recv_stop) {                                                                                        // 1641
        that._recv_stop();                                                                                        // 1642
    }                                                                                                             // 1643
    that.ri = that._recv_stop = null;                                                                             // 1644
    that.send_destructor();                                                                                       // 1645
};                                                                                                                // 1646
                                                                                                                  // 1647
                                                                                                                  // 1648
// Abstract away code that handles global namespace pollution.                                                    // 1649
var jsonPReceiverWrapper = function(url, constructReceiver, user_callback) {                                      // 1650
    var id = 'a' + utils.random_string(6);                                                                        // 1651
    var url_id = url + '?c=' + escape(WPrefix + '.' + id);                                                        // 1652
                                                                                                                  // 1653
    // Unfortunately it is not possible to abort loading of the                                                   // 1654
    // script. We need to keep track of frake close frames.                                                       // 1655
    var aborting = 0;                                                                                             // 1656
                                                                                                                  // 1657
    // Callback will be called exactly once.                                                                      // 1658
    var callback = function(frame) {                                                                              // 1659
        switch(aborting) {                                                                                        // 1660
        case 0:                                                                                                   // 1661
            // Normal behaviour - delete hook _and_ emit message.                                                 // 1662
            delete _window[WPrefix][id];                                                                          // 1663
            user_callback(frame);                                                                                 // 1664
            break;                                                                                                // 1665
        case 1:                                                                                                   // 1666
            // Fake close frame - emit but don't delete hook.                                                     // 1667
            user_callback(frame);                                                                                 // 1668
            aborting = 2;                                                                                         // 1669
            break;                                                                                                // 1670
        case 2:                                                                                                   // 1671
            // Got frame after connection was closed, delete hook, don't emit.                                    // 1672
            delete _window[WPrefix][id];                                                                          // 1673
            break;                                                                                                // 1674
        }                                                                                                         // 1675
    };                                                                                                            // 1676
                                                                                                                  // 1677
    var close_script = constructReceiver(url_id, callback);                                                       // 1678
    _window[WPrefix][id] = close_script;                                                                          // 1679
    var stop = function() {                                                                                       // 1680
        if (_window[WPrefix][id]) {                                                                               // 1681
            aborting = 1;                                                                                         // 1682
            _window[WPrefix][id](utils.closeFrame(1000, "JSONP user aborted read"));                              // 1683
        }                                                                                                         // 1684
    };                                                                                                            // 1685
    return stop;                                                                                                  // 1686
};                                                                                                                // 1687
//         [*] End of lib/trans-jsonp-polling.js                                                                  // 1688
                                                                                                                  // 1689
                                                                                                                  // 1690
//         [*] Including lib/trans-xhr.js                                                                         // 1691
/*                                                                                                                // 1692
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 1693
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 1694
 *                                                                                                                // 1695
 * For the license see COPYING.                                                                                   // 1696
 * ***** END LICENSE BLOCK *****                                                                                  // 1697
 */                                                                                                               // 1698
                                                                                                                  // 1699
var AjaxBasedTransport = function() {};                                                                           // 1700
AjaxBasedTransport.prototype = new BufferedSender();                                                              // 1701
                                                                                                                  // 1702
AjaxBasedTransport.prototype.run = function(ri, trans_url,                                                        // 1703
                                            url_suffix, Receiver, AjaxObject) {                                   // 1704
    var that = this;                                                                                              // 1705
    that.ri = ri;                                                                                                 // 1706
    that.trans_url = trans_url;                                                                                   // 1707
    that.send_constructor(createAjaxSender(AjaxObject));                                                          // 1708
    that.poll = new Polling(ri, Receiver,                                                                         // 1709
                            trans_url + url_suffix, AjaxObject);                                                  // 1710
};                                                                                                                // 1711
                                                                                                                  // 1712
AjaxBasedTransport.prototype.doCleanup = function() {                                                             // 1713
    var that = this;                                                                                              // 1714
    if (that.poll) {                                                                                              // 1715
        that.poll.abort();                                                                                        // 1716
        that.poll = null;                                                                                         // 1717
    }                                                                                                             // 1718
};                                                                                                                // 1719
                                                                                                                  // 1720
// xhr-streaming                                                                                                  // 1721
var XhrStreamingTransport = SockJS['xhr-streaming'] = function(ri, trans_url) {                                   // 1722
    this.run(ri, trans_url, '/xhr_streaming', XhrReceiver, utils.XHRCorsObject);                                  // 1723
};                                                                                                                // 1724
                                                                                                                  // 1725
XhrStreamingTransport.prototype = new AjaxBasedTransport();                                                       // 1726
                                                                                                                  // 1727
XhrStreamingTransport.enabled = function() {                                                                      // 1728
    // Support for CORS Ajax aka Ajax2? Opera 12 claims CORS but                                                  // 1729
    // doesn't do streaming.                                                                                      // 1730
    return (_window.XMLHttpRequest &&                                                                             // 1731
            'withCredentials' in new XMLHttpRequest() &&                                                          // 1732
            (!/opera/i.test(navigator.userAgent)));                                                               // 1733
};                                                                                                                // 1734
XhrStreamingTransport.roundTrips = 2; // preflight, ajax                                                          // 1735
                                                                                                                  // 1736
// Safari gets confused when a streaming ajax request is started                                                  // 1737
// before onload. This causes the load indicator to spin indefinetely.                                            // 1738
XhrStreamingTransport.need_body = true;                                                                           // 1739
                                                                                                                  // 1740
                                                                                                                  // 1741
// According to:                                                                                                  // 1742
//   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests           // 1743
//   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/                                        // 1744
                                                                                                                  // 1745
                                                                                                                  // 1746
// xdr-streaming                                                                                                  // 1747
var XdrStreamingTransport = SockJS['xdr-streaming'] = function(ri, trans_url) {                                   // 1748
    this.run(ri, trans_url, '/xhr_streaming', XhrReceiver, utils.XDRObject);                                      // 1749
};                                                                                                                // 1750
                                                                                                                  // 1751
XdrStreamingTransport.prototype = new AjaxBasedTransport();                                                       // 1752
                                                                                                                  // 1753
XdrStreamingTransport.enabled = function() {                                                                      // 1754
    return !!_window.XDomainRequest;                                                                              // 1755
};                                                                                                                // 1756
XdrStreamingTransport.roundTrips = 2; // preflight, ajax                                                          // 1757
                                                                                                                  // 1758
                                                                                                                  // 1759
                                                                                                                  // 1760
// xhr-polling                                                                                                    // 1761
var XhrPollingTransport = SockJS['xhr-polling'] = function(ri, trans_url) {                                       // 1762
    this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XHRCorsObject);                                            // 1763
};                                                                                                                // 1764
                                                                                                                  // 1765
XhrPollingTransport.prototype = new AjaxBasedTransport();                                                         // 1766
                                                                                                                  // 1767
XhrPollingTransport.enabled = XhrStreamingTransport.enabled;                                                      // 1768
XhrPollingTransport.roundTrips = 2; // preflight, ajax                                                            // 1769
                                                                                                                  // 1770
                                                                                                                  // 1771
// xdr-polling                                                                                                    // 1772
var XdrPollingTransport = SockJS['xdr-polling'] = function(ri, trans_url) {                                       // 1773
    this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XDRObject);                                                // 1774
};                                                                                                                // 1775
                                                                                                                  // 1776
XdrPollingTransport.prototype = new AjaxBasedTransport();                                                         // 1777
                                                                                                                  // 1778
XdrPollingTransport.enabled = XdrStreamingTransport.enabled;                                                      // 1779
XdrPollingTransport.roundTrips = 2; // preflight, ajax                                                            // 1780
//         [*] End of lib/trans-xhr.js                                                                            // 1781
                                                                                                                  // 1782
                                                                                                                  // 1783
//         [*] Including lib/trans-iframe.js                                                                      // 1784
/*                                                                                                                // 1785
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 1786
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 1787
 *                                                                                                                // 1788
 * For the license see COPYING.                                                                                   // 1789
 * ***** END LICENSE BLOCK *****                                                                                  // 1790
 */                                                                                                               // 1791
                                                                                                                  // 1792
// Few cool transports do work only for same-origin. In order to make                                             // 1793
// them working cross-domain we shall use iframe, served form the                                                 // 1794
// remote domain. New browsers, have capabilities to communicate with                                             // 1795
// cross domain iframe, using postMessage(). In IE it was implemented                                             // 1796
// from IE 8+, but of course, IE got some details wrong:                                                          // 1797
//    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx                                              // 1798
//    http://stevesouders.com/misc/test-postmessage.php                                                           // 1799
                                                                                                                  // 1800
var IframeTransport = function() {};                                                                              // 1801
                                                                                                                  // 1802
IframeTransport.prototype.i_constructor = function(ri, trans_url, base_url) {                                     // 1803
    var that = this;                                                                                              // 1804
    that.ri = ri;                                                                                                 // 1805
    that.origin = utils.getOrigin(base_url);                                                                      // 1806
    that.base_url = base_url;                                                                                     // 1807
    that.trans_url = trans_url;                                                                                   // 1808
                                                                                                                  // 1809
    var iframe_url = base_url + '/iframe.html';                                                                   // 1810
    if (that.ri._options.devel) {                                                                                 // 1811
        iframe_url += '?t=' + (+new Date);                                                                        // 1812
    }                                                                                                             // 1813
    that.window_id = utils.random_string(8);                                                                      // 1814
    iframe_url += '#' + that.window_id;                                                                           // 1815
                                                                                                                  // 1816
    that.iframeObj = utils.createIframe(iframe_url, function(r) {                                                 // 1817
                                            that.ri._didClose(1006, "Unable to load an iframe (" + r + ")");      // 1818
                                        });                                                                       // 1819
                                                                                                                  // 1820
    that.onmessage_cb = utils.bind(that.onmessage, that);                                                         // 1821
    utils.attachMessage(that.onmessage_cb);                                                                       // 1822
};                                                                                                                // 1823
                                                                                                                  // 1824
IframeTransport.prototype.doCleanup = function() {                                                                // 1825
    var that = this;                                                                                              // 1826
    if (that.iframeObj) {                                                                                         // 1827
        utils.detachMessage(that.onmessage_cb);                                                                   // 1828
        try {                                                                                                     // 1829
            // When the iframe is not loaded, IE raises an exception                                              // 1830
            // on 'contentWindow'.                                                                                // 1831
            if (that.iframeObj.iframe.contentWindow) {                                                            // 1832
                that.postMessage('c');                                                                            // 1833
            }                                                                                                     // 1834
        } catch (x) {}                                                                                            // 1835
        that.iframeObj.cleanup();                                                                                 // 1836
        that.iframeObj = null;                                                                                    // 1837
        that.onmessage_cb = that.iframeObj = null;                                                                // 1838
    }                                                                                                             // 1839
};                                                                                                                // 1840
                                                                                                                  // 1841
IframeTransport.prototype.onmessage = function(e) {                                                               // 1842
    var that = this;                                                                                              // 1843
    if (e.origin !== that.origin) return;                                                                         // 1844
    var window_id = e.data.slice(0, 8);                                                                           // 1845
    var type = e.data.slice(8, 9);                                                                                // 1846
    var data = e.data.slice(9);                                                                                   // 1847
                                                                                                                  // 1848
    if (window_id !== that.window_id) return;                                                                     // 1849
                                                                                                                  // 1850
    switch(type) {                                                                                                // 1851
    case 's':                                                                                                     // 1852
        that.iframeObj.loaded();                                                                                  // 1853
        that.postMessage('s', JSON.stringify([SockJS.version, that.protocol, that.trans_url, that.base_url]));    // 1854
        break;                                                                                                    // 1855
    case 't':                                                                                                     // 1856
        that.ri._didMessage(data);                                                                                // 1857
        break;                                                                                                    // 1858
    }                                                                                                             // 1859
};                                                                                                                // 1860
                                                                                                                  // 1861
IframeTransport.prototype.postMessage = function(type, data) {                                                    // 1862
    var that = this;                                                                                              // 1863
    that.iframeObj.post(that.window_id + type + (data || ''), that.origin);                                       // 1864
};                                                                                                                // 1865
                                                                                                                  // 1866
IframeTransport.prototype.doSend = function (message) {                                                           // 1867
    this.postMessage('m', message);                                                                               // 1868
};                                                                                                                // 1869
                                                                                                                  // 1870
IframeTransport.enabled = function() {                                                                            // 1871
    // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with                                // 1872
    // huge delay, or not at all.                                                                                 // 1873
    var konqueror = navigator && navigator.userAgent && navigator.userAgent.indexOf('Konqueror') !== -1;          // 1874
    return ((typeof _window.postMessage === 'function' ||                                                         // 1875
            typeof _window.postMessage === 'object') && (!konqueror));                                            // 1876
};                                                                                                                // 1877
//         [*] End of lib/trans-iframe.js                                                                         // 1878
                                                                                                                  // 1879
                                                                                                                  // 1880
//         [*] Including lib/trans-iframe-within.js                                                               // 1881
/*                                                                                                                // 1882
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 1883
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 1884
 *                                                                                                                // 1885
 * For the license see COPYING.                                                                                   // 1886
 * ***** END LICENSE BLOCK *****                                                                                  // 1887
 */                                                                                                               // 1888
                                                                                                                  // 1889
var curr_window_id;                                                                                               // 1890
                                                                                                                  // 1891
var postMessage = function (type, data) {                                                                         // 1892
    if(parent !== _window) {                                                                                      // 1893
        parent.postMessage(curr_window_id + type + (data || ''), '*');                                            // 1894
    } else {                                                                                                      // 1895
        utils.log("Can't postMessage, no parent window.", type, data);                                            // 1896
    }                                                                                                             // 1897
};                                                                                                                // 1898
                                                                                                                  // 1899
var FacadeJS = function() {};                                                                                     // 1900
FacadeJS.prototype._didClose = function (code, reason) {                                                          // 1901
    postMessage('t', utils.closeFrame(code, reason));                                                             // 1902
};                                                                                                                // 1903
FacadeJS.prototype._didMessage = function (frame) {                                                               // 1904
    postMessage('t', frame);                                                                                      // 1905
};                                                                                                                // 1906
FacadeJS.prototype._doSend = function (data) {                                                                    // 1907
    this._transport.doSend(data);                                                                                 // 1908
};                                                                                                                // 1909
FacadeJS.prototype._doCleanup = function () {                                                                     // 1910
    this._transport.doCleanup();                                                                                  // 1911
};                                                                                                                // 1912
                                                                                                                  // 1913
utils.parent_origin = undefined;                                                                                  // 1914
                                                                                                                  // 1915
SockJS.bootstrap_iframe = function() {                                                                            // 1916
    var facade;                                                                                                   // 1917
    curr_window_id = _document.location.hash.slice(1);                                                            // 1918
    var onMessage = function(e) {                                                                                 // 1919
        if(e.source !== parent) return;                                                                           // 1920
        if(typeof utils.parent_origin === 'undefined')                                                            // 1921
            utils.parent_origin = e.origin;                                                                       // 1922
        if (e.origin !== utils.parent_origin) return;                                                             // 1923
                                                                                                                  // 1924
        var window_id = e.data.slice(0, 8);                                                                       // 1925
        var type = e.data.slice(8, 9);                                                                            // 1926
        var data = e.data.slice(9);                                                                               // 1927
        if (window_id !== curr_window_id) return;                                                                 // 1928
        switch(type) {                                                                                            // 1929
        case 's':                                                                                                 // 1930
            var p = JSON.parse(data);                                                                             // 1931
            var version = p[0];                                                                                   // 1932
            var protocol = p[1];                                                                                  // 1933
            var trans_url = p[2];                                                                                 // 1934
            var base_url = p[3];                                                                                  // 1935
            if (version !== SockJS.version) {                                                                     // 1936
                utils.log("Incompatibile SockJS! Main site uses:" +                                               // 1937
                          " \"" + version + "\", the iframe:" +                                                   // 1938
                          " \"" + SockJS.version + "\".");                                                        // 1939
            }                                                                                                     // 1940
            if (!utils.flatUrl(trans_url) || !utils.flatUrl(base_url)) {                                          // 1941
                utils.log("Only basic urls are supported in SockJS");                                             // 1942
                return;                                                                                           // 1943
            }                                                                                                     // 1944
                                                                                                                  // 1945
            if (!utils.isSameOriginUrl(trans_url) ||                                                              // 1946
                !utils.isSameOriginUrl(base_url)) {                                                               // 1947
                utils.log("Can't connect to different domain from within an " +                                   // 1948
                          "iframe. (" + JSON.stringify([_window.location.href, trans_url, base_url]) +            // 1949
                          ")");                                                                                   // 1950
                return;                                                                                           // 1951
            }                                                                                                     // 1952
            facade = new FacadeJS();                                                                              // 1953
            facade._transport = new FacadeJS[protocol](facade, trans_url, base_url);                              // 1954
            break;                                                                                                // 1955
        case 'm':                                                                                                 // 1956
            facade._doSend(data);                                                                                 // 1957
            break;                                                                                                // 1958
        case 'c':                                                                                                 // 1959
            if (facade)                                                                                           // 1960
                facade._doCleanup();                                                                              // 1961
            facade = null;                                                                                        // 1962
            break;                                                                                                // 1963
        }                                                                                                         // 1964
    };                                                                                                            // 1965
                                                                                                                  // 1966
    // alert('test ticker');                                                                                      // 1967
    // facade = new FacadeJS();                                                                                   // 1968
    // facade._transport = new FacadeJS['w-iframe-xhr-polling'](facade, 'http://host.com:9999/ticker/12/basd');   // 1969
                                                                                                                  // 1970
    utils.attachMessage(onMessage);                                                                               // 1971
                                                                                                                  // 1972
    // Start                                                                                                      // 1973
    postMessage('s');                                                                                             // 1974
};                                                                                                                // 1975
//         [*] End of lib/trans-iframe-within.js                                                                  // 1976
                                                                                                                  // 1977
                                                                                                                  // 1978
//         [*] Including lib/info.js                                                                              // 1979
/*                                                                                                                // 1980
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 1981
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 1982
 *                                                                                                                // 1983
 * For the license see COPYING.                                                                                   // 1984
 * ***** END LICENSE BLOCK *****                                                                                  // 1985
 */                                                                                                               // 1986
                                                                                                                  // 1987
var InfoReceiver = function(base_url, AjaxObject) {                                                               // 1988
    var that = this;                                                                                              // 1989
    utils.delay(function(){that.doXhr(base_url, AjaxObject);});                                                   // 1990
};                                                                                                                // 1991
                                                                                                                  // 1992
InfoReceiver.prototype = new EventEmitter(['finish']);                                                            // 1993
                                                                                                                  // 1994
InfoReceiver.prototype.doXhr = function(base_url, AjaxObject) {                                                   // 1995
    var that = this;                                                                                              // 1996
    var t0 = (new Date()).getTime();                                                                              // 1997
                                                                                                                  // 1998
// <METEOR>                                                                                                       // 1999
  // https://github.com/sockjs/sockjs-client/pull/129                                                             // 2000
  // var xo = new AjaxObject('GET', base_url + '/info');                                                          // 2001
                                                                                                                  // 2002
    var xo = new AjaxObject(                                                                                      // 2003
      // add cachebusting parameter to url to work around a chrome bug:                                           // 2004
      // https://code.google.com/p/chromium/issues/detail?id=263981                                               // 2005
      // or misbehaving proxies.                                                                                  // 2006
      'GET', base_url + '/info?cb=' + utils.random_string(10))                                                    // 2007
// </METEOR>                                                                                                      // 2008
                                                                                                                  // 2009
    var tref = utils.delay(8000,                                                                                  // 2010
                           function(){xo.ontimeout();});                                                          // 2011
                                                                                                                  // 2012
    xo.onfinish = function(status, text) {                                                                        // 2013
        clearTimeout(tref);                                                                                       // 2014
        tref = null;                                                                                              // 2015
        if (status === 200) {                                                                                     // 2016
            var rtt = (new Date()).getTime() - t0;                                                                // 2017
            var info = JSON.parse(text);                                                                          // 2018
            if (typeof info !== 'object') info = {};                                                              // 2019
            that.emit('finish', info, rtt);                                                                       // 2020
        } else {                                                                                                  // 2021
            that.emit('finish');                                                                                  // 2022
        }                                                                                                         // 2023
    };                                                                                                            // 2024
    xo.ontimeout = function() {                                                                                   // 2025
        xo.close();                                                                                               // 2026
        that.emit('finish');                                                                                      // 2027
    };                                                                                                            // 2028
};                                                                                                                // 2029
                                                                                                                  // 2030
var InfoReceiverIframe = function(base_url) {                                                                     // 2031
    var that = this;                                                                                              // 2032
    var go = function() {                                                                                         // 2033
        var ifr = new IframeTransport();                                                                          // 2034
        ifr.protocol = 'w-iframe-info-receiver';                                                                  // 2035
        var fun = function(r) {                                                                                   // 2036
            if (typeof r === 'string' && r.substr(0,1) === 'm') {                                                 // 2037
                var d = JSON.parse(r.substr(1));                                                                  // 2038
                var info = d[0], rtt = d[1];                                                                      // 2039
                that.emit('finish', info, rtt);                                                                   // 2040
            } else {                                                                                              // 2041
                that.emit('finish');                                                                              // 2042
            }                                                                                                     // 2043
            ifr.doCleanup();                                                                                      // 2044
            ifr = null;                                                                                           // 2045
        };                                                                                                        // 2046
        var mock_ri = {                                                                                           // 2047
            _options: {},                                                                                         // 2048
            _didClose: fun,                                                                                       // 2049
            _didMessage: fun                                                                                      // 2050
        };                                                                                                        // 2051
        ifr.i_constructor(mock_ri, base_url, base_url);                                                           // 2052
    }                                                                                                             // 2053
    if(!_document.body) {                                                                                         // 2054
        utils.attachEvent('load', go);                                                                            // 2055
    } else {                                                                                                      // 2056
        go();                                                                                                     // 2057
    }                                                                                                             // 2058
};                                                                                                                // 2059
InfoReceiverIframe.prototype = new EventEmitter(['finish']);                                                      // 2060
                                                                                                                  // 2061
                                                                                                                  // 2062
var InfoReceiverFake = function() {                                                                               // 2063
    // It may not be possible to do cross domain AJAX to get the info                                             // 2064
    // data, for example for IE7. But we want to run JSONP, so let's                                              // 2065
    // fake the response, with rtt=2s (rto=6s).                                                                   // 2066
    var that = this;                                                                                              // 2067
    utils.delay(function() {                                                                                      // 2068
        that.emit('finish', {}, 2000);                                                                            // 2069
    });                                                                                                           // 2070
};                                                                                                                // 2071
InfoReceiverFake.prototype = new EventEmitter(['finish']);                                                        // 2072
                                                                                                                  // 2073
var createInfoReceiver = function(base_url) {                                                                     // 2074
    if (utils.isSameOriginUrl(base_url)) {                                                                        // 2075
        // If, for some reason, we have SockJS locally - there's no                                               // 2076
        // need to start up the complex machinery. Just use ajax.                                                 // 2077
        return new InfoReceiver(base_url, utils.XHRLocalObject);                                                  // 2078
    }                                                                                                             // 2079
    switch (utils.isXHRCorsCapable()) {                                                                           // 2080
    case 1:                                                                                                       // 2081
        // XHRLocalObject -> no_credentials=true                                                                  // 2082
        return new InfoReceiver(base_url, utils.XHRLocalObject);                                                  // 2083
    case 2:                                                                                                       // 2084
// <METEOR>                                                                                                       // 2085
// https://github.com/sockjs/sockjs-client/issues/79                                                              // 2086
        // XDR doesn't work across different schemes                                                              // 2087
        // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
        if (utils.isSameOriginScheme(base_url))                                                                   // 2089
            return new InfoReceiver(base_url, utils.XDRObject);                                                   // 2090
        else                                                                                                      // 2091
            return new InfoReceiverFake();                                                                        // 2092
// </METEOR>                                                                                                      // 2093
    case 3:                                                                                                       // 2094
        // Opera                                                                                                  // 2095
        return new InfoReceiverIframe(base_url);                                                                  // 2096
    default:                                                                                                      // 2097
        // IE 7                                                                                                   // 2098
        return new InfoReceiverFake();                                                                            // 2099
    };                                                                                                            // 2100
};                                                                                                                // 2101
                                                                                                                  // 2102
                                                                                                                  // 2103
var WInfoReceiverIframe = FacadeJS['w-iframe-info-receiver'] = function(ri, _trans_url, base_url) {               // 2104
    var ir = new InfoReceiver(base_url, utils.XHRLocalObject);                                                    // 2105
    ir.onfinish = function(info, rtt) {                                                                           // 2106
        ri._didMessage('m'+JSON.stringify([info, rtt]));                                                          // 2107
        ri._didClose();                                                                                           // 2108
    }                                                                                                             // 2109
};                                                                                                                // 2110
WInfoReceiverIframe.prototype.doCleanup = function() {};                                                          // 2111
//         [*] End of lib/info.js                                                                                 // 2112
                                                                                                                  // 2113
                                                                                                                  // 2114
//         [*] Including lib/trans-iframe-eventsource.js                                                          // 2115
/*                                                                                                                // 2116
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 2117
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 2118
 *                                                                                                                // 2119
 * For the license see COPYING.                                                                                   // 2120
 * ***** END LICENSE BLOCK *****                                                                                  // 2121
 */                                                                                                               // 2122
                                                                                                                  // 2123
var EventSourceIframeTransport = SockJS['iframe-eventsource'] = function () {                                     // 2124
    var that = this;                                                                                              // 2125
    that.protocol = 'w-iframe-eventsource';                                                                       // 2126
    that.i_constructor.apply(that, arguments);                                                                    // 2127
};                                                                                                                // 2128
                                                                                                                  // 2129
EventSourceIframeTransport.prototype = new IframeTransport();                                                     // 2130
                                                                                                                  // 2131
EventSourceIframeTransport.enabled = function () {                                                                // 2132
    return ('EventSource' in _window) && IframeTransport.enabled();                                               // 2133
};                                                                                                                // 2134
                                                                                                                  // 2135
EventSourceIframeTransport.need_body = true;                                                                      // 2136
EventSourceIframeTransport.roundTrips = 3; // html, javascript, eventsource                                       // 2137
                                                                                                                  // 2138
                                                                                                                  // 2139
// w-iframe-eventsource                                                                                           // 2140
var EventSourceTransport = FacadeJS['w-iframe-eventsource'] = function(ri, trans_url) {                           // 2141
    this.run(ri, trans_url, '/eventsource', EventSourceReceiver, utils.XHRLocalObject);                           // 2142
}                                                                                                                 // 2143
EventSourceTransport.prototype = new AjaxBasedTransport();                                                        // 2144
//         [*] End of lib/trans-iframe-eventsource.js                                                             // 2145
                                                                                                                  // 2146
                                                                                                                  // 2147
//         [*] Including lib/trans-iframe-xhr-polling.js                                                          // 2148
/*                                                                                                                // 2149
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 2150
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 2151
 *                                                                                                                // 2152
 * For the license see COPYING.                                                                                   // 2153
 * ***** END LICENSE BLOCK *****                                                                                  // 2154
 */                                                                                                               // 2155
                                                                                                                  // 2156
var XhrPollingIframeTransport = SockJS['iframe-xhr-polling'] = function () {                                      // 2157
    var that = this;                                                                                              // 2158
    that.protocol = 'w-iframe-xhr-polling';                                                                       // 2159
    that.i_constructor.apply(that, arguments);                                                                    // 2160
};                                                                                                                // 2161
                                                                                                                  // 2162
XhrPollingIframeTransport.prototype = new IframeTransport();                                                      // 2163
                                                                                                                  // 2164
XhrPollingIframeTransport.enabled = function () {                                                                 // 2165
    return _window.XMLHttpRequest && IframeTransport.enabled();                                                   // 2166
};                                                                                                                // 2167
                                                                                                                  // 2168
XhrPollingIframeTransport.need_body = true;                                                                       // 2169
XhrPollingIframeTransport.roundTrips = 3; // html, javascript, xhr                                                // 2170
                                                                                                                  // 2171
                                                                                                                  // 2172
// w-iframe-xhr-polling                                                                                           // 2173
var XhrPollingITransport = FacadeJS['w-iframe-xhr-polling'] = function(ri, trans_url) {                           // 2174
    this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XHRLocalObject);                                           // 2175
};                                                                                                                // 2176
                                                                                                                  // 2177
XhrPollingITransport.prototype = new AjaxBasedTransport();                                                        // 2178
//         [*] End of lib/trans-iframe-xhr-polling.js                                                             // 2179
                                                                                                                  // 2180
                                                                                                                  // 2181
//         [*] Including lib/trans-iframe-htmlfile.js                                                             // 2182
/*                                                                                                                // 2183
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 2184
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 2185
 *                                                                                                                // 2186
 * For the license see COPYING.                                                                                   // 2187
 * ***** END LICENSE BLOCK *****                                                                                  // 2188
 */                                                                                                               // 2189
                                                                                                                  // 2190
// This transport generally works in any browser, but will cause a                                                // 2191
// spinning cursor to appear in any browser other than IE.                                                        // 2192
// We may test this transport in all browsers - why not, but in                                                   // 2193
// production it should be only run in IE.                                                                        // 2194
                                                                                                                  // 2195
var HtmlFileIframeTransport = SockJS['iframe-htmlfile'] = function () {                                           // 2196
    var that = this;                                                                                              // 2197
    that.protocol = 'w-iframe-htmlfile';                                                                          // 2198
    that.i_constructor.apply(that, arguments);                                                                    // 2199
};                                                                                                                // 2200
                                                                                                                  // 2201
// Inheritance.                                                                                                   // 2202
HtmlFileIframeTransport.prototype = new IframeTransport();                                                        // 2203
                                                                                                                  // 2204
HtmlFileIframeTransport.enabled = function() {                                                                    // 2205
    return IframeTransport.enabled();                                                                             // 2206
};                                                                                                                // 2207
                                                                                                                  // 2208
HtmlFileIframeTransport.need_body = true;                                                                         // 2209
HtmlFileIframeTransport.roundTrips = 3; // html, javascript, htmlfile                                             // 2210
                                                                                                                  // 2211
                                                                                                                  // 2212
// w-iframe-htmlfile                                                                                              // 2213
var HtmlFileTransport = FacadeJS['w-iframe-htmlfile'] = function(ri, trans_url) {                                 // 2214
    this.run(ri, trans_url, '/htmlfile', HtmlfileReceiver, utils.XHRLocalObject);                                 // 2215
};                                                                                                                // 2216
HtmlFileTransport.prototype = new AjaxBasedTransport();                                                           // 2217
//         [*] End of lib/trans-iframe-htmlfile.js                                                                // 2218
                                                                                                                  // 2219
                                                                                                                  // 2220
//         [*] Including lib/trans-polling.js                                                                     // 2221
/*                                                                                                                // 2222
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 2223
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 2224
 *                                                                                                                // 2225
 * For the license see COPYING.                                                                                   // 2226
 * ***** END LICENSE BLOCK *****                                                                                  // 2227
 */                                                                                                               // 2228
                                                                                                                  // 2229
var Polling = function(ri, Receiver, recv_url, AjaxObject) {                                                      // 2230
    var that = this;                                                                                              // 2231
    that.ri = ri;                                                                                                 // 2232
    that.Receiver = Receiver;                                                                                     // 2233
    that.recv_url = recv_url;                                                                                     // 2234
    that.AjaxObject = AjaxObject;                                                                                 // 2235
    that._scheduleRecv();                                                                                         // 2236
};                                                                                                                // 2237
                                                                                                                  // 2238
Polling.prototype._scheduleRecv = function() {                                                                    // 2239
    var that = this;                                                                                              // 2240
    var poll = that.poll = new that.Receiver(that.recv_url, that.AjaxObject);                                     // 2241
    var msg_counter = 0;                                                                                          // 2242
    poll.onmessage = function(e) {                                                                                // 2243
        msg_counter += 1;                                                                                         // 2244
        that.ri._didMessage(e.data);                                                                              // 2245
    };                                                                                                            // 2246
    poll.onclose = function(e) {                                                                                  // 2247
        that.poll = poll = poll.onmessage = poll.onclose = null;                                                  // 2248
        if (!that.poll_is_closing) {                                                                              // 2249
            if (e.reason === 'permanent') {                                                                       // 2250
                that.ri._didClose(1006, 'Polling error (' + e.reason + ')');                                      // 2251
            } else {                                                                                              // 2252
                that._scheduleRecv();                                                                             // 2253
            }                                                                                                     // 2254
        }                                                                                                         // 2255
    };                                                                                                            // 2256
};                                                                                                                // 2257
                                                                                                                  // 2258
Polling.prototype.abort = function() {                                                                            // 2259
    var that = this;                                                                                              // 2260
    that.poll_is_closing = true;                                                                                  // 2261
    if (that.poll) {                                                                                              // 2262
        that.poll.abort();                                                                                        // 2263
    }                                                                                                             // 2264
};                                                                                                                // 2265
//         [*] End of lib/trans-polling.js                                                                        // 2266
                                                                                                                  // 2267
                                                                                                                  // 2268
//         [*] Including lib/trans-receiver-eventsource.js                                                        // 2269
/*                                                                                                                // 2270
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 2271
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 2272
 *                                                                                                                // 2273
 * For the license see COPYING.                                                                                   // 2274
 * ***** END LICENSE BLOCK *****                                                                                  // 2275
 */                                                                                                               // 2276
                                                                                                                  // 2277
var EventSourceReceiver = function(url) {                                                                         // 2278
    var that = this;                                                                                              // 2279
    var es = new EventSource(url);                                                                                // 2280
    es.onmessage = function(e) {                                                                                  // 2281
        that.dispatchEvent(new SimpleEvent('message',                                                             // 2282
                                           {'data': unescape(e.data)}));                                          // 2283
    };                                                                                                            // 2284
    that.es_close = es.onerror = function(e, abort_reason) {                                                      // 2285
        // ES on reconnection has readyState = 0 or 1.                                                            // 2286
        // on network error it's CLOSED = 2                                                                       // 2287
        var reason = abort_reason ? 'user' :                                                                      // 2288
            (es.readyState !== 2 ? 'network' : 'permanent');                                                      // 2289
        that.es_close = es.onmessage = es.onerror = null;                                                         // 2290
        // EventSource reconnects automatically.                                                                  // 2291
        es.close();                                                                                               // 2292
        es = null;                                                                                                // 2293
        // Safari and chrome < 15 crash if we close window before                                                 // 2294
        // waiting for ES cleanup. See:                                                                           // 2295
        //   https://code.google.com/p/chromium/issues/detail?id=89155                                            // 2296
        utils.delay(200, function() {                                                                             // 2297
                        that.dispatchEvent(new SimpleEvent('close', {reason: reason}));                           // 2298
                    });                                                                                           // 2299
    };                                                                                                            // 2300
};                                                                                                                // 2301
                                                                                                                  // 2302
EventSourceReceiver.prototype = new REventTarget();                                                               // 2303
                                                                                                                  // 2304
EventSourceReceiver.prototype.abort = function() {                                                                // 2305
    var that = this;                                                                                              // 2306
    if (that.es_close) {                                                                                          // 2307
        that.es_close({}, true);                                                                                  // 2308
    }                                                                                                             // 2309
};                                                                                                                // 2310
//         [*] End of lib/trans-receiver-eventsource.js                                                           // 2311
                                                                                                                  // 2312
                                                                                                                  // 2313
//         [*] Including lib/trans-receiver-htmlfile.js                                                           // 2314
/*                                                                                                                // 2315
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 2316
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 2317
 *                                                                                                                // 2318
 * For the license see COPYING.                                                                                   // 2319
 * ***** END LICENSE BLOCK *****                                                                                  // 2320
 */                                                                                                               // 2321
                                                                                                                  // 2322
var _is_ie_htmlfile_capable;                                                                                      // 2323
var isIeHtmlfileCapable = function() {                                                                            // 2324
    if (_is_ie_htmlfile_capable === undefined) {                                                                  // 2325
        if ('ActiveXObject' in _window) {                                                                         // 2326
            try {                                                                                                 // 2327
                _is_ie_htmlfile_capable = !!new ActiveXObject('htmlfile');                                        // 2328
            } catch (x) {}                                                                                        // 2329
        } else {                                                                                                  // 2330
            _is_ie_htmlfile_capable = false;                                                                      // 2331
        }                                                                                                         // 2332
    }                                                                                                             // 2333
    return _is_ie_htmlfile_capable;                                                                               // 2334
};                                                                                                                // 2335
                                                                                                                  // 2336
                                                                                                                  // 2337
var HtmlfileReceiver = function(url) {                                                                            // 2338
    var that = this;                                                                                              // 2339
    utils.polluteGlobalNamespace();                                                                               // 2340
                                                                                                                  // 2341
    that.id = 'a' + utils.random_string(6, 26);                                                                   // 2342
    url += ((url.indexOf('?') === -1) ? '?' : '&') +                                                              // 2343
        'c=' + escape(WPrefix + '.' + that.id);                                                                   // 2344
                                                                                                                  // 2345
    var constructor = isIeHtmlfileCapable() ?                                                                     // 2346
        utils.createHtmlfile : utils.createIframe;                                                                // 2347
                                                                                                                  // 2348
    var iframeObj;                                                                                                // 2349
    _window[WPrefix][that.id] = {                                                                                 // 2350
        start: function () {                                                                                      // 2351
            iframeObj.loaded();                                                                                   // 2352
        },                                                                                                        // 2353
        message: function (data) {                                                                                // 2354
            that.dispatchEvent(new SimpleEvent('message', {'data': data}));                                       // 2355
        },                                                                                                        // 2356
        stop: function () {                                                                                       // 2357
            that.iframe_close({}, 'network');                                                                     // 2358
        }                                                                                                         // 2359
    };                                                                                                            // 2360
    that.iframe_close = function(e, abort_reason) {                                                               // 2361
        iframeObj.cleanup();                                                                                      // 2362
        that.iframe_close = iframeObj = null;                                                                     // 2363
        delete _window[WPrefix][that.id];                                                                         // 2364
        that.dispatchEvent(new SimpleEvent('close', {reason: abort_reason}));                                     // 2365
    };                                                                                                            // 2366
    iframeObj = constructor(url, function(e) {                                                                    // 2367
                                that.iframe_close({}, 'permanent');                                               // 2368
                            });                                                                                   // 2369
};                                                                                                                // 2370
                                                                                                                  // 2371
HtmlfileReceiver.prototype = new REventTarget();                                                                  // 2372
                                                                                                                  // 2373
HtmlfileReceiver.prototype.abort = function() {                                                                   // 2374
    var that = this;                                                                                              // 2375
    if (that.iframe_close) {                                                                                      // 2376
        that.iframe_close({}, 'user');                                                                            // 2377
    }                                                                                                             // 2378
};                                                                                                                // 2379
//         [*] End of lib/trans-receiver-htmlfile.js                                                              // 2380
                                                                                                                  // 2381
                                                                                                                  // 2382
//         [*] Including lib/trans-receiver-xhr.js                                                                // 2383
/*                                                                                                                // 2384
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 2385
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 2386
 *                                                                                                                // 2387
 * For the license see COPYING.                                                                                   // 2388
 * ***** END LICENSE BLOCK *****                                                                                  // 2389
 */                                                                                                               // 2390
                                                                                                                  // 2391
var XhrReceiver = function(url, AjaxObject) {                                                                     // 2392
    var that = this;                                                                                              // 2393
    var buf_pos = 0;                                                                                              // 2394
                                                                                                                  // 2395
    that.xo = new AjaxObject('POST', url, null);                                                                  // 2396
    that.xo.onchunk = function(status, text) {                                                                    // 2397
        if (status !== 200) return;                                                                               // 2398
        while (1) {                                                                                               // 2399
            var buf = text.slice(buf_pos);                                                                        // 2400
            var p = buf.indexOf('\n');                                                                            // 2401
            if (p === -1) break;                                                                                  // 2402
            buf_pos += p+1;                                                                                       // 2403
            var msg = buf.slice(0, p);                                                                            // 2404
            that.dispatchEvent(new SimpleEvent('message', {data: msg}));                                          // 2405
        }                                                                                                         // 2406
    };                                                                                                            // 2407
    that.xo.onfinish = function(status, text) {                                                                   // 2408
        that.xo.onchunk(status, text);                                                                            // 2409
        that.xo = null;                                                                                           // 2410
        var reason = status === 200 ? 'network' : 'permanent';                                                    // 2411
        that.dispatchEvent(new SimpleEvent('close', {reason: reason}));                                           // 2412
    }                                                                                                             // 2413
};                                                                                                                // 2414
                                                                                                                  // 2415
XhrReceiver.prototype = new REventTarget();                                                                       // 2416
                                                                                                                  // 2417
XhrReceiver.prototype.abort = function() {                                                                        // 2418
    var that = this;                                                                                              // 2419
    if (that.xo) {                                                                                                // 2420
        that.xo.close();                                                                                          // 2421
        that.dispatchEvent(new SimpleEvent('close', {reason: 'user'}));                                           // 2422
        that.xo = null;                                                                                           // 2423
    }                                                                                                             // 2424
};                                                                                                                // 2425
//         [*] End of lib/trans-receiver-xhr.js                                                                   // 2426
                                                                                                                  // 2427
                                                                                                                  // 2428
//         [*] Including lib/test-hooks.js                                                                        // 2429
/*                                                                                                                // 2430
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 2431
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 2432
 *                                                                                                                // 2433
 * For the license see COPYING.                                                                                   // 2434
 * ***** END LICENSE BLOCK *****                                                                                  // 2435
 */                                                                                                               // 2436
                                                                                                                  // 2437
// For testing                                                                                                    // 2438
SockJS.getUtils = function(){                                                                                     // 2439
    return utils;                                                                                                 // 2440
};                                                                                                                // 2441
                                                                                                                  // 2442
SockJS.getIframeTransport = function(){                                                                           // 2443
    return IframeTransport;                                                                                       // 2444
};                                                                                                                // 2445
//         [*] End of lib/test-hooks.js                                                                           // 2446
                                                                                                                  // 2447
                  return SockJS;                                                                                  // 2448
          })();                                                                                                   // 2449
if ('_sockjs_onload' in window) setTimeout(_sockjs_onload, 1);                                                    // 2450
                                                                                                                  // 2451
// AMD compliance                                                                                                 // 2452
if (typeof define === 'function' && define.amd) {                                                                 // 2453
    define('sockjs', [], function(){return SockJS;});                                                             // 2454
}                                                                                                                 // 2455
//     [*] End of lib/index.js                                                                                    // 2456
                                                                                                                  // 2457
// [*] End of lib/all.js                                                                                          // 2458
                                                                                                                  // 2459
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                //
// packages/ddp-client/stream_client_sockjs.js                                                                    //
//                                                                                                                //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                  //
// @param url {String} URL to Meteor app                                                                          // 1
//   "http://subdomain.meteor.com/" or "/" or                                                                     // 2
//   "ddp+sockjs://foo-**.meteor.com/sockjs"                                                                      // 3
LivedataTest.ClientStream = function (url, options) {                                                             // 4
  var self = this;                                                                                                // 5
  self.options = _.extend({                                                                                       // 6
    retry: true                                                                                                   // 7
  }, options);                                                                                                    // 8
  self._initCommon(self.options);                                                                                 // 9
                                                                                                                  // 10
  //// Constants                                                                                                  // 11
                                                                                                                  // 12
                                                                                                                  // 13
  // how long between hearing heartbeat from the server until we declare                                          // 14
  // the connection dead. heartbeats come every 45s (stream_server.js)                                            // 15
  //                                                                                                              // 16
  // NOTE: this is a older timeout mechanism. We now send heartbeats at                                           // 17
  // the DDP level (https://github.com/meteor/meteor/pull/1865), and                                              // 18
  // expect those timeouts to kill a non-responsive connection before                                             // 19
  // this timeout fires. This is kept around for compatibility (when                                              // 20
  // talking to a server that doesn't support DDP heartbeats) and can be                                          // 21
  // removed later.                                                                                               // 22
  self.HEARTBEAT_TIMEOUT = 100*1000;                                                                              // 23
                                                                                                                  // 24
  self.rawUrl = url;                                                                                              // 25
  self.socket = null;                                                                                             // 26
                                                                                                                  // 27
  self.heartbeatTimer = null;                                                                                     // 28
                                                                                                                  // 29
  // Listen to global 'online' event if we are running in a browser.                                              // 30
  // (IE8 does not support addEventListener)                                                                      // 31
  if (typeof window !== 'undefined' && window.addEventListener)                                                   // 32
    window.addEventListener("online", _.bind(self._online, self),                                                 // 33
                            false /* useCapture. make FF3.6 happy. */);                                           // 34
                                                                                                                  // 35
  //// Kickoff!                                                                                                   // 36
  self._launchConnection();                                                                                       // 37
};                                                                                                                // 38
                                                                                                                  // 39
_.extend(LivedataTest.ClientStream.prototype, {                                                                   // 40
                                                                                                                  // 41
  // data is a utf8 string. Data sent while not connected is dropped on                                           // 42
  // the floor, and it is up the user of this API to retransmit lost                                              // 43
  // messages on 'reset'                                                                                          // 44
  send: function (data) {                                                                                         // 45
    var self = this;                                                                                              // 46
    if (self.currentStatus.connected) {                                                                           // 47
      self.socket.send(data);                                                                                     // 48
    }                                                                                                             // 49
  },                                                                                                              // 50
                                                                                                                  // 51
  // Changes where this connection points                                                                         // 52
  _changeUrl: function (url) {                                                                                    // 53
    var self = this;                                                                                              // 54
    self.rawUrl = url;                                                                                            // 55
  },                                                                                                              // 56
                                                                                                                  // 57
  _connected: function () {                                                                                       // 58
    var self = this;                                                                                              // 59
                                                                                                                  // 60
    if (self.connectionTimer) {                                                                                   // 61
      clearTimeout(self.connectionTimer);                                                                         // 62
      self.connectionTimer = null;                                                                                // 63
    }                                                                                                             // 64
                                                                                                                  // 65
    if (self.currentStatus.connected) {                                                                           // 66
      // already connected. do nothing. this probably shouldn't happen.                                           // 67
      return;                                                                                                     // 68
    }                                                                                                             // 69
                                                                                                                  // 70
    // update status                                                                                              // 71
    self.currentStatus.status = "connected";                                                                      // 72
    self.currentStatus.connected = true;                                                                          // 73
    self.currentStatus.retryCount = 0;                                                                            // 74
    self.statusChanged();                                                                                         // 75
                                                                                                                  // 76
    // fire resets. This must come after status change so that clients                                            // 77
    // can call send from within a reset callback.                                                                // 78
    _.each(self.eventCallbacks.reset, function (callback) { callback(); });                                       // 79
                                                                                                                  // 80
  },                                                                                                              // 81
                                                                                                                  // 82
  _cleanup: function (maybeError) {                                                                               // 83
    var self = this;                                                                                              // 84
                                                                                                                  // 85
    self._clearConnectionAndHeartbeatTimers();                                                                    // 86
    if (self.socket) {                                                                                            // 87
      self.socket.onmessage = self.socket.onclose                                                                 // 88
        = self.socket.onerror = self.socket.onheartbeat = function () {};                                         // 89
      self.socket.close();                                                                                        // 90
      self.socket = null;                                                                                         // 91
    }                                                                                                             // 92
                                                                                                                  // 93
    _.each(self.eventCallbacks.disconnect, function (callback) {                                                  // 94
      callback(maybeError);                                                                                       // 95
    });                                                                                                           // 96
  },                                                                                                              // 97
                                                                                                                  // 98
  _clearConnectionAndHeartbeatTimers: function () {                                                               // 99
    var self = this;                                                                                              // 100
    if (self.connectionTimer) {                                                                                   // 101
      clearTimeout(self.connectionTimer);                                                                         // 102
      self.connectionTimer = null;                                                                                // 103
    }                                                                                                             // 104
    if (self.heartbeatTimer) {                                                                                    // 105
      clearTimeout(self.heartbeatTimer);                                                                          // 106
      self.heartbeatTimer = null;                                                                                 // 107
    }                                                                                                             // 108
  },                                                                                                              // 109
                                                                                                                  // 110
  _heartbeat_timeout: function () {                                                                               // 111
    var self = this;                                                                                              // 112
    Meteor._debug("Connection timeout. No sockjs heartbeat received.");                                           // 113
    self._lostConnection(new DDP.ConnectionError("Heartbeat timed out"));                                         // 114
  },                                                                                                              // 115
                                                                                                                  // 116
  _heartbeat_received: function () {                                                                              // 117
    var self = this;                                                                                              // 118
    // If we've already permanently shut down this stream, the timeout is                                         // 119
    // already cleared, and we don't need to set it again.                                                        // 120
    if (self._forcedToDisconnect)                                                                                 // 121
      return;                                                                                                     // 122
    if (self.heartbeatTimer)                                                                                      // 123
      clearTimeout(self.heartbeatTimer);                                                                          // 124
    self.heartbeatTimer = setTimeout(                                                                             // 125
      _.bind(self._heartbeat_timeout, self),                                                                      // 126
      self.HEARTBEAT_TIMEOUT);                                                                                    // 127
  },                                                                                                              // 128
                                                                                                                  // 129
  _sockjsProtocolsWhitelist: function () {                                                                        // 130
    // only allow polling protocols. no streaming.  streaming                                                     // 131
    // makes safari spin.                                                                                         // 132
    var protocolsWhitelist = [                                                                                    // 133
      'xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling'];                                       // 134
                                                                                                                  // 135
    // iOS 4 and 5 and below crash when using websockets over certain                                             // 136
    // proxies. this seems to be resolved with iOS 6. eg                                                          // 137
    // https://github.com/LearnBoost/socket.io/issues/193#issuecomment-7308865.                                   // 138
    //                                                                                                            // 139
    // iOS <4 doesn't support websockets at all so sockjs will just                                               // 140
    // immediately fall back to http                                                                              // 141
    var noWebsockets = navigator &&                                                                               // 142
          /iPhone|iPad|iPod/.test(navigator.userAgent) &&                                                         // 143
          /OS 4_|OS 5_/.test(navigator.userAgent);                                                                // 144
                                                                                                                  // 145
    if (!noWebsockets)                                                                                            // 146
      protocolsWhitelist = ['websocket'].concat(protocolsWhitelist);                                              // 147
                                                                                                                  // 148
    return protocolsWhitelist;                                                                                    // 149
  },                                                                                                              // 150
                                                                                                                  // 151
  _launchConnection: function () {                                                                                // 152
    var self = this;                                                                                              // 153
    self._cleanup(); // cleanup the old socket, if there was one.                                                 // 154
                                                                                                                  // 155
    var options = _.extend({                                                                                      // 156
      protocols_whitelist:self._sockjsProtocolsWhitelist()                                                        // 157
    }, self.options._sockjsOptions);                                                                              // 158
                                                                                                                  // 159
    // Convert raw URL to SockJS URL each time we open a connection, so that we                                   // 160
    // can connect to random hostnames and get around browser per-host                                            // 161
    // connection limits.                                                                                         // 162
    self.socket = new SockJS(toSockjsUrl(self.rawUrl), undefined, options);                                       // 163
    self.socket.onopen = function (data) {                                                                        // 164
      self._connected();                                                                                          // 165
    };                                                                                                            // 166
    self.socket.onmessage = function (data) {                                                                     // 167
      self._heartbeat_received();                                                                                 // 168
                                                                                                                  // 169
      if (self.currentStatus.connected)                                                                           // 170
        _.each(self.eventCallbacks.message, function (callback) {                                                 // 171
          callback(data.data);                                                                                    // 172
        });                                                                                                       // 173
    };                                                                                                            // 174
    self.socket.onclose = function () {                                                                           // 175
      self._lostConnection();                                                                                     // 176
    };                                                                                                            // 177
    self.socket.onerror = function () {                                                                           // 178
      // XXX is this ever called?                                                                                 // 179
      Meteor._debug("stream error", _.toArray(arguments), (new Date()).toDateString());                           // 180
    };                                                                                                            // 181
                                                                                                                  // 182
    self.socket.onheartbeat =  function () {                                                                      // 183
      self._heartbeat_received();                                                                                 // 184
    };                                                                                                            // 185
                                                                                                                  // 186
    if (self.connectionTimer)                                                                                     // 187
      clearTimeout(self.connectionTimer);                                                                         // 188
    self.connectionTimer = setTimeout(function () {                                                               // 189
      self._lostConnection(                                                                                       // 190
        new DDP.ConnectionError("DDP connection timed out"));                                                     // 191
    }, self.CONNECT_TIMEOUT);                                                                                     // 192
  }                                                                                                               // 193
});                                                                                                               // 194
                                                                                                                  // 195
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                //
// packages/ddp-client/stream_client_common.js                                                                    //
//                                                                                                                //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                  //
// XXX from Underscore.String (http://epeli.github.com/underscore.string/)                                        // 1
var startsWith = function(str, starts) {                                                                          // 2
  return str.length >= starts.length &&                                                                           // 3
    str.substring(0, starts.length) === starts;                                                                   // 4
};                                                                                                                // 5
var endsWith = function(str, ends) {                                                                              // 6
  return str.length >= ends.length &&                                                                             // 7
    str.substring(str.length - ends.length) === ends;                                                             // 8
};                                                                                                                // 9
                                                                                                                  // 10
// @param url {String} URL to Meteor app, eg:                                                                     // 11
//   "/" or "madewith.meteor.com" or "https://foo.meteor.com"                                                     // 12
//   or "ddp+sockjs://ddp--****-foo.meteor.com/sockjs"                                                            // 13
// @returns {String} URL to the endpoint with the specific scheme and subPath, e.g.                               // 14
// for scheme "http" and subPath "sockjs"                                                                         // 15
//   "http://subdomain.meteor.com/sockjs" or "/sockjs"                                                            // 16
//   or "https://ddp--1234-foo.meteor.com/sockjs"                                                                 // 17
var translateUrl =  function(url, newSchemeBase, subPath) {                                                       // 18
  if (! newSchemeBase) {                                                                                          // 19
    newSchemeBase = "http";                                                                                       // 20
  }                                                                                                               // 21
                                                                                                                  // 22
  var ddpUrlMatch = url.match(/^ddp(i?)\+sockjs:\/\//);                                                           // 23
  var httpUrlMatch = url.match(/^http(s?):\/\//);                                                                 // 24
  var newScheme;                                                                                                  // 25
  if (ddpUrlMatch) {                                                                                              // 26
    // Remove scheme and split off the host.                                                                      // 27
    var urlAfterDDP = url.substr(ddpUrlMatch[0].length);                                                          // 28
    newScheme = ddpUrlMatch[1] === "i" ? newSchemeBase : newSchemeBase + "s";                                     // 29
    var slashPos = urlAfterDDP.indexOf('/');                                                                      // 30
    var host =                                                                                                    // 31
          slashPos === -1 ? urlAfterDDP : urlAfterDDP.substr(0, slashPos);                                        // 32
    var rest = slashPos === -1 ? '' : urlAfterDDP.substr(slashPos);                                               // 33
                                                                                                                  // 34
    // In the host (ONLY!), change '*' characters into random digits. This                                        // 35
    // allows different stream connections to connect to different hostnames                                      // 36
    // and avoid browser per-hostname connection limits.                                                          // 37
    host = host.replace(/\*/g, function () {                                                                      // 38
      return Math.floor(Random.fraction()*10);                                                                    // 39
    });                                                                                                           // 40
                                                                                                                  // 41
    return newScheme + '://' + host + rest;                                                                       // 42
  } else if (httpUrlMatch) {                                                                                      // 43
    newScheme = !httpUrlMatch[1] ? newSchemeBase : newSchemeBase + "s";                                           // 44
    var urlAfterHttp = url.substr(httpUrlMatch[0].length);                                                        // 45
    url = newScheme + "://" + urlAfterHttp;                                                                       // 46
  }                                                                                                               // 47
                                                                                                                  // 48
  // Prefix FQDNs but not relative URLs                                                                           // 49
  if (url.indexOf("://") === -1 && !startsWith(url, "/")) {                                                       // 50
    url = newSchemeBase + "://" + url;                                                                            // 51
  }                                                                                                               // 52
                                                                                                                  // 53
  // XXX This is not what we should be doing: if I have a site                                                    // 54
  // deployed at "/foo", then DDP.connect("/") should actually connect                                            // 55
  // to "/", not to "/foo". "/" is an absolute path. (Contrast: if                                                // 56
  // deployed at "/foo", it would be reasonable for DDP.connect("bar")                                            // 57
  // to connect to "/foo/bar").                                                                                   // 58
  //                                                                                                              // 59
  // We should make this properly honor absolute paths rather than                                                // 60
  // forcing the path to be relative to the site root. Simultaneously,                                            // 61
  // we should set DDP_DEFAULT_CONNECTION_URL to include the site                                                 // 62
  // root. See also client_convenience.js #RationalizingRelativeDDPURLs                                           // 63
  url = Meteor._relativeToSiteRootUrl(url);                                                                       // 64
                                                                                                                  // 65
  if (endsWith(url, "/"))                                                                                         // 66
    return url + subPath;                                                                                         // 67
  else                                                                                                            // 68
    return url + "/" + subPath;                                                                                   // 69
};                                                                                                                // 70
                                                                                                                  // 71
toSockjsUrl = function (url) {                                                                                    // 72
  return translateUrl(url, "http", "sockjs");                                                                     // 73
};                                                                                                                // 74
                                                                                                                  // 75
toWebsocketUrl = function (url) {                                                                                 // 76
  var ret = translateUrl(url, "ws", "websocket");                                                                 // 77
  return ret;                                                                                                     // 78
};                                                                                                                // 79
                                                                                                                  // 80
LivedataTest.toSockjsUrl = toSockjsUrl;                                                                           // 81
                                                                                                                  // 82
                                                                                                                  // 83
_.extend(LivedataTest.ClientStream.prototype, {                                                                   // 84
                                                                                                                  // 85
  // Register for callbacks.                                                                                      // 86
  on: function (name, callback) {                                                                                 // 87
    var self = this;                                                                                              // 88
                                                                                                                  // 89
    if (name !== 'message' && name !== 'reset' && name !== 'disconnect')                                          // 90
      throw new Error("unknown event type: " + name);                                                             // 91
                                                                                                                  // 92
    if (!self.eventCallbacks[name])                                                                               // 93
      self.eventCallbacks[name] = [];                                                                             // 94
    self.eventCallbacks[name].push(callback);                                                                     // 95
  },                                                                                                              // 96
                                                                                                                  // 97
                                                                                                                  // 98
  _initCommon: function (options) {                                                                               // 99
    var self = this;                                                                                              // 100
    options = options || {};                                                                                      // 101
                                                                                                                  // 102
    //// Constants                                                                                                // 103
                                                                                                                  // 104
    // how long to wait until we declare the connection attempt                                                   // 105
    // failed.                                                                                                    // 106
    self.CONNECT_TIMEOUT = options.connectTimeoutMs || 10000;                                                     // 107
                                                                                                                  // 108
    self.eventCallbacks = {}; // name -> [callback]                                                               // 109
                                                                                                                  // 110
    self._forcedToDisconnect = false;                                                                             // 111
                                                                                                                  // 112
    //// Reactive status                                                                                          // 113
    self.currentStatus = {                                                                                        // 114
      status: "connecting",                                                                                       // 115
      connected: false,                                                                                           // 116
      retryCount: 0                                                                                               // 117
    };                                                                                                            // 118
                                                                                                                  // 119
                                                                                                                  // 120
    self.statusListeners = typeof Tracker !== 'undefined' && new Tracker.Dependency;                              // 121
    self.statusChanged = function () {                                                                            // 122
      if (self.statusListeners)                                                                                   // 123
        self.statusListeners.changed();                                                                           // 124
    };                                                                                                            // 125
                                                                                                                  // 126
    //// Retry logic                                                                                              // 127
    self._retry = new Retry;                                                                                      // 128
    self.connectionTimer = null;                                                                                  // 129
                                                                                                                  // 130
  },                                                                                                              // 131
                                                                                                                  // 132
  // Trigger a reconnect.                                                                                         // 133
  reconnect: function (options) {                                                                                 // 134
    var self = this;                                                                                              // 135
    options = options || {};                                                                                      // 136
                                                                                                                  // 137
    if (options.url) {                                                                                            // 138
      self._changeUrl(options.url);                                                                               // 139
    }                                                                                                             // 140
                                                                                                                  // 141
    if (options._sockjsOptions) {                                                                                 // 142
      self.options._sockjsOptions = options._sockjsOptions;                                                       // 143
    }                                                                                                             // 144
                                                                                                                  // 145
    if (self.currentStatus.connected) {                                                                           // 146
      if (options._force || options.url) {                                                                        // 147
        // force reconnect.                                                                                       // 148
        self._lostConnection(new DDP.ForcedReconnectError);                                                       // 149
      } // else, noop.                                                                                            // 150
      return;                                                                                                     // 151
    }                                                                                                             // 152
                                                                                                                  // 153
    // if we're mid-connection, stop it.                                                                          // 154
    if (self.currentStatus.status === "connecting") {                                                             // 155
      // Pretend it's a clean close.                                                                              // 156
      self._lostConnection();                                                                                     // 157
    }                                                                                                             // 158
                                                                                                                  // 159
    self._retry.clear();                                                                                          // 160
    self.currentStatus.retryCount -= 1; // don't count manual retries                                             // 161
    self._retryNow();                                                                                             // 162
  },                                                                                                              // 163
                                                                                                                  // 164
  disconnect: function (options) {                                                                                // 165
    var self = this;                                                                                              // 166
    options = options || {};                                                                                      // 167
                                                                                                                  // 168
    // Failed is permanent. If we're failed, don't let people go back                                             // 169
    // online by calling 'disconnect' then 'reconnect'.                                                           // 170
    if (self._forcedToDisconnect)                                                                                 // 171
      return;                                                                                                     // 172
                                                                                                                  // 173
    // If _permanent is set, permanently disconnect a stream. Once a stream                                       // 174
    // is forced to disconnect, it can never reconnect. This is for                                               // 175
    // error cases such as ddp version mismatch, where trying again                                               // 176
    // won't fix the problem.                                                                                     // 177
    if (options._permanent) {                                                                                     // 178
      self._forcedToDisconnect = true;                                                                            // 179
    }                                                                                                             // 180
                                                                                                                  // 181
    self._cleanup();                                                                                              // 182
    self._retry.clear();                                                                                          // 183
                                                                                                                  // 184
    self.currentStatus = {                                                                                        // 185
      status: (options._permanent ? "failed" : "offline"),                                                        // 186
      connected: false,                                                                                           // 187
      retryCount: 0                                                                                               // 188
    };                                                                                                            // 189
                                                                                                                  // 190
    if (options._permanent && options._error)                                                                     // 191
      self.currentStatus.reason = options._error;                                                                 // 192
                                                                                                                  // 193
    self.statusChanged();                                                                                         // 194
  },                                                                                                              // 195
                                                                                                                  // 196
  // maybeError is set unless it's a clean protocol-level close.                                                  // 197
  _lostConnection: function (maybeError) {                                                                        // 198
    var self = this;                                                                                              // 199
                                                                                                                  // 200
    self._cleanup(maybeError);                                                                                    // 201
    self._retryLater(maybeError); // sets status. no need to do it here.                                          // 202
  },                                                                                                              // 203
                                                                                                                  // 204
  // fired when we detect that we've gone online. try to reconnect                                                // 205
  // immediately.                                                                                                 // 206
  _online: function () {                                                                                          // 207
    // if we've requested to be offline by disconnecting, don't reconnect.                                        // 208
    if (this.currentStatus.status != "offline")                                                                   // 209
      this.reconnect();                                                                                           // 210
  },                                                                                                              // 211
                                                                                                                  // 212
  _retryLater: function (maybeError) {                                                                            // 213
    var self = this;                                                                                              // 214
                                                                                                                  // 215
    var timeout = 0;                                                                                              // 216
    if (self.options.retry ||                                                                                     // 217
        (maybeError && maybeError.errorType === "DDP.ForcedReconnectError")) {                                    // 218
      timeout = self._retry.retryLater(                                                                           // 219
        self.currentStatus.retryCount,                                                                            // 220
        _.bind(self._retryNow, self)                                                                              // 221
      );                                                                                                          // 222
      self.currentStatus.status = "waiting";                                                                      // 223
      self.currentStatus.retryTime = (new Date()).getTime() + timeout;                                            // 224
    } else {                                                                                                      // 225
      self.currentStatus.status = "failed";                                                                       // 226
      delete self.currentStatus.retryTime;                                                                        // 227
    }                                                                                                             // 228
                                                                                                                  // 229
    self.currentStatus.connected = false;                                                                         // 230
    self.statusChanged();                                                                                         // 231
  },                                                                                                              // 232
                                                                                                                  // 233
  _retryNow: function () {                                                                                        // 234
    var self = this;                                                                                              // 235
                                                                                                                  // 236
    if (self._forcedToDisconnect)                                                                                 // 237
      return;                                                                                                     // 238
                                                                                                                  // 239
    self.currentStatus.retryCount += 1;                                                                           // 240
    self.currentStatus.status = "connecting";                                                                     // 241
    self.currentStatus.connected = false;                                                                         // 242
    delete self.currentStatus.retryTime;                                                                          // 243
    self.statusChanged();                                                                                         // 244
                                                                                                                  // 245
    self._launchConnection();                                                                                     // 246
  },                                                                                                              // 247
                                                                                                                  // 248
                                                                                                                  // 249
  // Get current status. Reactive.                                                                                // 250
  status: function () {                                                                                           // 251
    var self = this;                                                                                              // 252
    if (self.statusListeners)                                                                                     // 253
      self.statusListeners.depend();                                                                              // 254
    return self.currentStatus;                                                                                    // 255
  }                                                                                                               // 256
});                                                                                                               // 257
                                                                                                                  // 258
DDP.ConnectionError = Meteor.makeErrorType(                                                                       // 259
  "DDP.ConnectionError", function (message) {                                                                     // 260
    var self = this;                                                                                              // 261
    self.message = message;                                                                                       // 262
});                                                                                                               // 263
                                                                                                                  // 264
DDP.ForcedReconnectError = Meteor.makeErrorType(                                                                  // 265
  "DDP.ForcedReconnectError", function () {});                                                                    // 266
                                                                                                                  // 267
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                //
// packages/ddp-client/livedata_common.js                                                                         //
//                                                                                                                //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                  //
LivedataTest.SUPPORTED_DDP_VERSIONS = DDPCommon.SUPPORTED_DDP_VERSIONS;                                           // 1
                                                                                                                  // 2
// This is private but it's used in a few places. accounts-base uses                                              // 3
// it to get the current user. Meteor.setTimeout and friends clear                                                // 4
// it. We can probably find a better way to factor this.                                                          // 5
DDP._CurrentInvocation = new Meteor.EnvironmentVariable;                                                          // 6
                                                                                                                  // 7
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                //
// packages/ddp-client/random_stream.js                                                                           //
//                                                                                                                //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                  //
// Returns the named sequence of pseudo-random values.                                                            // 1
// The scope will be DDP._CurrentInvocation.get(), so the stream will produce                                     // 2
// consistent values for method calls on the client and server.                                                   // 3
DDP.randomStream = function (name) {                                                                              // 4
  var scope = DDP._CurrentInvocation.get();                                                                       // 5
  return DDPCommon.RandomStream.get(scope, name);                                                                 // 6
};                                                                                                                // 7
                                                                                                                  // 8
                                                                                                                  // 9
                                                                                                                  // 10
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                //
// packages/ddp-client/livedata_connection.js                                                                     //
//                                                                                                                //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                  //
if (Meteor.isServer) {                                                                                            // 1
  var path = Npm.require('path');                                                                                 // 2
  var Fiber = Npm.require('fibers');                                                                              // 3
  var Future = Npm.require(path.join('fibers', 'future'));                                                        // 4
}                                                                                                                 // 5
                                                                                                                  // 6
// @param url {String|Object} URL to Meteor app,                                                                  // 7
//   or an object as a test hook (see code)                                                                       // 8
// Options:                                                                                                       // 9
//   reloadWithOutstanding: is it OK to reload if there are outstanding methods?                                  // 10
//   headers: extra headers to send on the websockets connection, for                                             // 11
//     server-to-server DDP only                                                                                  // 12
//   _sockjsOptions: Specifies options to pass through to the sockjs client                                       // 13
//   onDDPNegotiationVersionFailure: callback when version negotiation fails.                                     // 14
//                                                                                                                // 15
// XXX There should be a way to destroy a DDP connection, causing all                                             // 16
// outstanding method calls to fail.                                                                              // 17
//                                                                                                                // 18
// XXX Our current way of handling failure and reconnection is great                                              // 19
// for an app (where we want to tolerate being disconnected as an                                                 // 20
// expect state, and keep trying forever to reconnect) but cumbersome                                             // 21
// for something like a command line tool that wants to make a                                                    // 22
// connection, call a method, and print an error if connection                                                    // 23
// fails. We should have better usability in the latter case (while                                               // 24
// still transparently reconnecting if it's just a transient failure                                              // 25
// or the server migrating us).                                                                                   // 26
var Connection = function (url, options) {                                                                        // 27
  var self = this;                                                                                                // 28
  options = _.extend({                                                                                            // 29
    onConnected: function () {},                                                                                  // 30
    onDDPVersionNegotiationFailure: function (description) {                                                      // 31
      Meteor._debug(description);                                                                                 // 32
    },                                                                                                            // 33
    heartbeatInterval: 17500,                                                                                     // 34
    heartbeatTimeout: 15000,                                                                                      // 35
    // These options are only for testing.                                                                        // 36
    reloadWithOutstanding: false,                                                                                 // 37
    supportedDDPVersions: DDPCommon.SUPPORTED_DDP_VERSIONS,                                                       // 38
    retry: true,                                                                                                  // 39
    respondToPings: true                                                                                          // 40
  }, options);                                                                                                    // 41
                                                                                                                  // 42
  // If set, called when we reconnect, queuing method calls _before_ the                                          // 43
  // existing outstanding ones. This is the only data member that is part of the                                  // 44
  // public API!                                                                                                  // 45
  self.onReconnect = null;                                                                                        // 46
                                                                                                                  // 47
  // as a test hook, allow passing a stream instead of a url.                                                     // 48
  if (typeof url === "object") {                                                                                  // 49
    self._stream = url;                                                                                           // 50
  } else {                                                                                                        // 51
    self._stream = new LivedataTest.ClientStream(url, {                                                           // 52
      retry: options.retry,                                                                                       // 53
      headers: options.headers,                                                                                   // 54
      _sockjsOptions: options._sockjsOptions,                                                                     // 55
      // Used to keep some tests quiet, or for other cases in which                                               // 56
      // the right thing to do with connection errors is to silently                                              // 57
      // fail (e.g. sending package usage stats). At some point we                                                // 58
      // should have a real API for handling client-stream-level                                                  // 59
      // errors.                                                                                                  // 60
      _dontPrintErrors: options._dontPrintErrors,                                                                 // 61
      connectTimeoutMs: options.connectTimeoutMs                                                                  // 62
    });                                                                                                           // 63
  }                                                                                                               // 64
                                                                                                                  // 65
  self._lastSessionId = null;                                                                                     // 66
  self._versionSuggestion = null;  // The last proposed DDP version.                                              // 67
  self._version = null;   // The DDP version agreed on by client and server.                                      // 68
  self._stores = {}; // name -> object with methods                                                               // 69
  self._methodHandlers = {}; // name -> func                                                                      // 70
  self._nextMethodId = 1;                                                                                         // 71
  self._supportedDDPVersions = options.supportedDDPVersions;                                                      // 72
                                                                                                                  // 73
  self._heartbeatInterval = options.heartbeatInterval;                                                            // 74
  self._heartbeatTimeout = options.heartbeatTimeout;                                                              // 75
                                                                                                                  // 76
  // Tracks methods which the user has tried to call but which have not yet                                       // 77
  // called their user callback (ie, they are waiting on their result or for all                                  // 78
  // of their writes to be written to the local cache). Map from method ID to                                     // 79
  // MethodInvoker object.                                                                                        // 80
  self._methodInvokers = {};                                                                                      // 81
                                                                                                                  // 82
  // Tracks methods which the user has called but whose result messages have not                                  // 83
  // arrived yet.                                                                                                 // 84
  //                                                                                                              // 85
  // _outstandingMethodBlocks is an array of blocks of methods. Each block                                        // 86
  // represents a set of methods that can run at the same time. The first block                                   // 87
  // represents the methods which are currently in flight; subsequent blocks                                      // 88
  // must wait for previous blocks to be fully finished before they can be sent                                   // 89
  // to the server.                                                                                               // 90
  //                                                                                                              // 91
  // Each block is an object with the following fields:                                                           // 92
  // - methods: a list of MethodInvoker objects                                                                   // 93
  // - wait: a boolean; if true, this block had a single method invoked with                                      // 94
  //         the "wait" option                                                                                    // 95
  //                                                                                                              // 96
  // There will never be adjacent blocks with wait=false, because the only thing                                  // 97
  // that makes methods need to be serialized is a wait method.                                                   // 98
  //                                                                                                              // 99
  // Methods are removed from the first block when their "result" is                                              // 100
  // received. The entire first block is only removed when all of the in-flight                                   // 101
  // methods have received their results (so the "methods" list is empty) *AND*                                   // 102
  // all of the data written by those methods are visible in the local cache. So                                  // 103
  // it is possible for the first block's methods list to be empty, if we are                                     // 104
  // still waiting for some objects to quiesce.                                                                   // 105
  //                                                                                                              // 106
  // Example:                                                                                                     // 107
  //  _outstandingMethodBlocks = [                                                                                // 108
  //    {wait: false, methods: []},                                                                               // 109
  //    {wait: true, methods: [<MethodInvoker for 'login'>]},                                                     // 110
  //    {wait: false, methods: [<MethodInvoker for 'foo'>,                                                        // 111
  //                            <MethodInvoker for 'bar'>]}]                                                      // 112
  // This means that there were some methods which were sent to the server and                                    // 113
  // which have returned their results, but some of the data written by                                           // 114
  // the methods may not be visible in the local cache. Once all that data is                                     // 115
  // visible, we will send a 'login' method. Once the login method has returned                                   // 116
  // and all the data is visible (including re-running subs if userId changes),                                   // 117
  // we will send the 'foo' and 'bar' methods in parallel.                                                        // 118
  self._outstandingMethodBlocks = [];                                                                             // 119
                                                                                                                  // 120
  // method ID -> array of objects with keys 'collection' and 'id', listing                                       // 121
  // documents written by a given method's stub. keys are associated with                                         // 122
  // methods whose stub wrote at least one document, and whose data-done message                                  // 123
  // has not yet been received.                                                                                   // 124
  self._documentsWrittenByStub = {};                                                                              // 125
  // collection -> IdMap of "server document" object. A "server document" has:                                    // 126
  // - "document": the version of the document according the                                                      // 127
  //   server (ie, the snapshot before a stub wrote it, amended by any changes                                    // 128
  //   received from the server)                                                                                  // 129
  //   It is undefined if we think the document does not exist                                                    // 130
  // - "writtenByStubs": a set of method IDs whose stubs wrote to the document                                    // 131
  //   whose "data done" messages have not yet been processed                                                     // 132
  self._serverDocuments = {};                                                                                     // 133
                                                                                                                  // 134
  // Array of callbacks to be called after the next update of the local                                           // 135
  // cache. Used for:                                                                                             // 136
  //  - Calling methodInvoker.dataVisible and sub ready callbacks after                                           // 137
  //    the relevant data is flushed.                                                                             // 138
  //  - Invoking the callbacks of "half-finished" methods after reconnect                                         // 139
  //    quiescence. Specifically, methods whose result was received over the old                                  // 140
  //    connection (so we don't re-send it) but whose data had not been made                                      // 141
  //    visible.                                                                                                  // 142
  self._afterUpdateCallbacks = [];                                                                                // 143
                                                                                                                  // 144
  // In two contexts, we buffer all incoming data messages and then process them                                  // 145
  // all at once in a single update:                                                                              // 146
  //   - During reconnect, we buffer all data messages until all subs that had                                    // 147
  //     been ready before reconnect are ready again, and all methods that are                                    // 148
  //     active have returned their "data done message"; then                                                     // 149
  //   - During the execution of a "wait" method, we buffer all data messages                                     // 150
  //     until the wait method gets its "data done" message. (If the wait method                                  // 151
  //     occurs during reconnect, it doesn't get any special handling.)                                           // 152
  // all data messages are processed in one update.                                                               // 153
  //                                                                                                              // 154
  // The following fields are used for this "quiescence" process.                                                 // 155
                                                                                                                  // 156
  // This buffers the messages that aren't being processed yet.                                                   // 157
  self._messagesBufferedUntilQuiescence = [];                                                                     // 158
  // Map from method ID -> true. Methods are removed from this when their                                         // 159
  // "data done" message is received, and we will not quiesce until it is                                         // 160
  // empty.                                                                                                       // 161
  self._methodsBlockingQuiescence = {};                                                                           // 162
  // map from sub ID -> true for subs that were ready (ie, called the sub                                         // 163
  // ready callback) before reconnect but haven't become ready again yet                                          // 164
  self._subsBeingRevived = {}; // map from sub._id -> true                                                        // 165
  // if true, the next data update should reset all stores. (set during                                           // 166
  // reconnect.)                                                                                                  // 167
  self._resetStores = false;                                                                                      // 168
                                                                                                                  // 169
  // name -> array of updates for (yet to be created) collections                                                 // 170
  self._updatesForUnknownStores = {};                                                                             // 171
  // if we're blocking a migration, the retry func                                                                // 172
  self._retryMigrate = null;                                                                                      // 173
                                                                                                                  // 174
  // metadata for subscriptions.  Map from sub ID to object with keys:                                            // 175
  //   - id                                                                                                       // 176
  //   - name                                                                                                     // 177
  //   - params                                                                                                   // 178
  //   - inactive (if true, will be cleaned up if not reused in re-run)                                           // 179
  //   - ready (has the 'ready' message been received?)                                                           // 180
  //   - readyCallback (an optional callback to call when ready)                                                  // 181
  //   - errorCallback (an optional callback to call if the sub terminates with                                   // 182
  //                    an error, XXX COMPAT WITH 1.0.3.1)                                                        // 183
  //   - stopCallback (an optional callback to call when the sub terminates                                       // 184
  //     for any reason, with an error argument if an error triggered the stop)                                   // 185
  self._subscriptions = {};                                                                                       // 186
                                                                                                                  // 187
  // Reactive userId.                                                                                             // 188
  self._userId = null;                                                                                            // 189
  self._userIdDeps = new Tracker.Dependency;                                                                      // 190
                                                                                                                  // 191
  // Block auto-reload while we're waiting for method responses.                                                  // 192
  if (Meteor.isClient && Package.reload && !options.reloadWithOutstanding) {                                      // 193
    Package.reload.Reload._onMigrate(function (retry) {                                                           // 194
      if (!self._readyToMigrate()) {                                                                              // 195
        if (self._retryMigrate)                                                                                   // 196
          throw new Error("Two migrations in progress?");                                                         // 197
        self._retryMigrate = retry;                                                                               // 198
        return false;                                                                                             // 199
      } else {                                                                                                    // 200
        return [true];                                                                                            // 201
      }                                                                                                           // 202
    });                                                                                                           // 203
  }                                                                                                               // 204
                                                                                                                  // 205
  var onMessage = function (raw_msg) {                                                                            // 206
    try {                                                                                                         // 207
      var msg = DDPCommon.parseDDP(raw_msg);                                                                      // 208
    } catch (e) {                                                                                                 // 209
      Meteor._debug("Exception while parsing DDP", e);                                                            // 210
      return;                                                                                                     // 211
    }                                                                                                             // 212
                                                                                                                  // 213
    // Any message counts as receiving a pong, as it demonstrates that                                            // 214
    // the server is still alive.                                                                                 // 215
    if (self._heartbeat) {                                                                                        // 216
      self._heartbeat.messageReceived();                                                                          // 217
    }                                                                                                             // 218
                                                                                                                  // 219
    if (msg === null || !msg.msg) {                                                                               // 220
      // XXX COMPAT WITH 0.6.6. ignore the old welcome message for back                                           // 221
      // compat.  Remove this 'if' once the server stops sending welcome                                          // 222
      // messages (stream_server.js).                                                                             // 223
      if (! (msg && msg.server_id))                                                                               // 224
        Meteor._debug("discarding invalid livedata message", msg);                                                // 225
      return;                                                                                                     // 226
    }                                                                                                             // 227
                                                                                                                  // 228
    if (msg.msg === 'connected') {                                                                                // 229
      self._version = self._versionSuggestion;                                                                    // 230
      self._livedata_connected(msg);                                                                              // 231
      options.onConnected();                                                                                      // 232
    }                                                                                                             // 233
    else if (msg.msg === 'failed') {                                                                              // 234
      if (_.contains(self._supportedDDPVersions, msg.version)) {                                                  // 235
        self._versionSuggestion = msg.version;                                                                    // 236
        self._stream.reconnect({_force: true});                                                                   // 237
      } else {                                                                                                    // 238
        var description =                                                                                         // 239
              "DDP version negotiation failed; server requested version " + msg.version;                          // 240
        self._stream.disconnect({_permanent: true, _error: description});                                         // 241
        options.onDDPVersionNegotiationFailure(description);                                                      // 242
      }                                                                                                           // 243
    }                                                                                                             // 244
    else if (msg.msg === 'ping' && options.respondToPings) {                                                      // 245
      self._send({msg: "pong", id: msg.id});                                                                      // 246
    }                                                                                                             // 247
    else if (msg.msg === 'pong') {                                                                                // 248
      // noop, as we assume everything's a pong                                                                   // 249
    }                                                                                                             // 250
    else if (_.include(['added', 'changed', 'removed', 'ready', 'updated'], msg.msg))                             // 251
      self._livedata_data(msg);                                                                                   // 252
    else if (msg.msg === 'nosub')                                                                                 // 253
      self._livedata_nosub(msg);                                                                                  // 254
    else if (msg.msg === 'result')                                                                                // 255
      self._livedata_result(msg);                                                                                 // 256
    else if (msg.msg === 'error')                                                                                 // 257
      self._livedata_error(msg);                                                                                  // 258
    else                                                                                                          // 259
      Meteor._debug("discarding unknown livedata message type", msg);                                             // 260
  };                                                                                                              // 261
                                                                                                                  // 262
  var onReset = function () {                                                                                     // 263
    // Send a connect message at the beginning of the stream.                                                     // 264
    // NOTE: reset is called even on the first connection, so this is                                             // 265
    // the only place we send this message.                                                                       // 266
    var msg = {msg: 'connect'};                                                                                   // 267
    if (self._lastSessionId)                                                                                      // 268
      msg.session = self._lastSessionId;                                                                          // 269
    msg.version = self._versionSuggestion || self._supportedDDPVersions[0];                                       // 270
    self._versionSuggestion = msg.version;                                                                        // 271
    msg.support = self._supportedDDPVersions;                                                                     // 272
    self._send(msg);                                                                                              // 273
                                                                                                                  // 274
    // Now, to minimize setup latency, go ahead and blast out all of                                              // 275
    // our pending methods ands subscriptions before we've even taken                                             // 276
    // the necessary RTT to know if we successfully reconnected. (1)                                              // 277
    // They're supposed to be idempotent; (2) even if we did                                                      // 278
    // reconnect, we're not sure what messages might have gotten lost                                             // 279
    // (in either direction) since we were disconnected (TCP being                                                // 280
    // sloppy about that.)                                                                                        // 281
                                                                                                                  // 282
    // If the current block of methods all got their results (but didn't all get                                  // 283
    // their data visible), discard the empty block now.                                                          // 284
    if (! _.isEmpty(self._outstandingMethodBlocks) &&                                                             // 285
        _.isEmpty(self._outstandingMethodBlocks[0].methods)) {                                                    // 286
      self._outstandingMethodBlocks.shift();                                                                      // 287
    }                                                                                                             // 288
                                                                                                                  // 289
    // Mark all messages as unsent, they have not yet been sent on this                                           // 290
    // connection.                                                                                                // 291
    _.each(self._methodInvokers, function (m) {                                                                   // 292
      m.sentMessage = false;                                                                                      // 293
    });                                                                                                           // 294
                                                                                                                  // 295
    // If an `onReconnect` handler is set, call it first. Go through                                              // 296
    // some hoops to ensure that methods that are called from within                                              // 297
    // `onReconnect` get executed _before_ ones that were originally                                              // 298
    // outstanding (since `onReconnect` is used to re-establish auth                                              // 299
    // certificates)                                                                                              // 300
    if (self.onReconnect)                                                                                         // 301
      self._callOnReconnectAndSendAppropriateOutstandingMethods();                                                // 302
    else                                                                                                          // 303
      self._sendOutstandingMethods();                                                                             // 304
                                                                                                                  // 305
    // add new subscriptions at the end. this way they take effect after                                          // 306
    // the handlers and we don't see flicker.                                                                     // 307
    _.each(self._subscriptions, function (sub, id) {                                                              // 308
      self._send({                                                                                                // 309
        msg: 'sub',                                                                                               // 310
        id: id,                                                                                                   // 311
        name: sub.name,                                                                                           // 312
        params: sub.params                                                                                        // 313
      });                                                                                                         // 314
    });                                                                                                           // 315
  };                                                                                                              // 316
                                                                                                                  // 317
  var onDisconnect = function () {                                                                                // 318
    if (self._heartbeat) {                                                                                        // 319
      self._heartbeat.stop();                                                                                     // 320
      self._heartbeat = null;                                                                                     // 321
    }                                                                                                             // 322
  };                                                                                                              // 323
                                                                                                                  // 324
  if (Meteor.isServer) {                                                                                          // 325
    self._stream.on('message', Meteor.bindEnvironment(onMessage, "handling DDP message"));                        // 326
    self._stream.on('reset', Meteor.bindEnvironment(onReset, "handling DDP reset"));                              // 327
    self._stream.on('disconnect', Meteor.bindEnvironment(onDisconnect, "handling DDP disconnect"));               // 328
  } else {                                                                                                        // 329
    self._stream.on('message', onMessage);                                                                        // 330
    self._stream.on('reset', onReset);                                                                            // 331
    self._stream.on('disconnect', onDisconnect);                                                                  // 332
  }                                                                                                               // 333
};                                                                                                                // 334
                                                                                                                  // 335
// A MethodInvoker manages sending a method to the server and calling the user's                                  // 336
// callbacks. On construction, it registers itself in the connection's                                            // 337
// _methodInvokers map; it removes itself once the method is fully finished and                                   // 338
// the callback is invoked. This occurs when it has both received a result,                                       // 339
// and the data written by it is fully visible.                                                                   // 340
var MethodInvoker = function (options) {                                                                          // 341
  var self = this;                                                                                                // 342
                                                                                                                  // 343
  // Public (within this file) fields.                                                                            // 344
  self.methodId = options.methodId;                                                                               // 345
  self.sentMessage = false;                                                                                       // 346
                                                                                                                  // 347
  self._callback = options.callback;                                                                              // 348
  self._connection = options.connection;                                                                          // 349
  self._message = options.message;                                                                                // 350
  self._onResultReceived = options.onResultReceived || function () {};                                            // 351
  self._wait = options.wait;                                                                                      // 352
  self._methodResult = null;                                                                                      // 353
  self._dataVisible = false;                                                                                      // 354
                                                                                                                  // 355
  // Register with the connection.                                                                                // 356
  self._connection._methodInvokers[self.methodId] = self;                                                         // 357
};                                                                                                                // 358
_.extend(MethodInvoker.prototype, {                                                                               // 359
  // Sends the method message to the server. May be called additional times if                                    // 360
  // we lose the connection and reconnect before receiving a result.                                              // 361
  sendMessage: function () {                                                                                      // 362
    var self = this;                                                                                              // 363
    // This function is called before sending a method (including resending on                                    // 364
    // reconnect). We should only (re)send methods where we don't already have a                                  // 365
    // result!                                                                                                    // 366
    if (self.gotResult())                                                                                         // 367
      throw new Error("sendingMethod is called on method with result");                                           // 368
                                                                                                                  // 369
    // If we're re-sending it, it doesn't matter if data was written the first                                    // 370
    // time.                                                                                                      // 371
    self._dataVisible = false;                                                                                    // 372
                                                                                                                  // 373
    self.sentMessage = true;                                                                                      // 374
                                                                                                                  // 375
    // If this is a wait method, make all data messages be buffered until it is                                   // 376
    // done.                                                                                                      // 377
    if (self._wait)                                                                                               // 378
      self._connection._methodsBlockingQuiescence[self.methodId] = true;                                          // 379
                                                                                                                  // 380
    // Actually send the message.                                                                                 // 381
    self._connection._send(self._message);                                                                        // 382
  },                                                                                                              // 383
  // Invoke the callback, if we have both a result and know that all data has                                     // 384
  // been written to the local cache.                                                                             // 385
  _maybeInvokeCallback: function () {                                                                             // 386
    var self = this;                                                                                              // 387
    if (self._methodResult && self._dataVisible) {                                                                // 388
      // Call the callback. (This won't throw: the callback was wrapped with                                      // 389
      // bindEnvironment.)                                                                                        // 390
      self._callback(self._methodResult[0], self._methodResult[1]);                                               // 391
                                                                                                                  // 392
      // Forget about this method.                                                                                // 393
      delete self._connection._methodInvokers[self.methodId];                                                     // 394
                                                                                                                  // 395
      // Let the connection know that this method is finished, so it can try to                                   // 396
      // move on to the next block of methods.                                                                    // 397
      self._connection._outstandingMethodFinished();                                                              // 398
    }                                                                                                             // 399
  },                                                                                                              // 400
  // Call with the result of the method from the server. Only may be called                                       // 401
  // once; once it is called, you should not call sendMessage again.                                              // 402
  // If the user provided an onResultReceived callback, call it immediately.                                      // 403
  // Then invoke the main callback if data is also visible.                                                       // 404
  receiveResult: function (err, result) {                                                                         // 405
    var self = this;                                                                                              // 406
    if (self.gotResult())                                                                                         // 407
      throw new Error("Methods should only receive results once");                                                // 408
    self._methodResult = [err, result];                                                                           // 409
    self._onResultReceived(err, result);                                                                          // 410
    self._maybeInvokeCallback();                                                                                  // 411
  },                                                                                                              // 412
  // Call this when all data written by the method is visible. This means that                                    // 413
  // the method has returns its "data is done" message *AND* all server                                           // 414
  // documents that are buffered at that time have been written to the local                                      // 415
  // cache. Invokes the main callback if the result has been received.                                            // 416
  dataVisible: function () {                                                                                      // 417
    var self = this;                                                                                              // 418
    self._dataVisible = true;                                                                                     // 419
    self._maybeInvokeCallback();                                                                                  // 420
  },                                                                                                              // 421
  // True if receiveResult has been called.                                                                       // 422
  gotResult: function () {                                                                                        // 423
    var self = this;                                                                                              // 424
    return !!self._methodResult;                                                                                  // 425
  }                                                                                                               // 426
});                                                                                                               // 427
                                                                                                                  // 428
_.extend(Connection.prototype, {                                                                                  // 429
  // 'name' is the name of the data on the wire that should go in the                                             // 430
  // store. 'wrappedStore' should be an object with methods beginUpdate, update,                                  // 431
  // endUpdate, saveOriginals, retrieveOriginals. see Collection for an example.                                  // 432
  registerStore: function (name, wrappedStore) {                                                                  // 433
    var self = this;                                                                                              // 434
                                                                                                                  // 435
    if (name in self._stores)                                                                                     // 436
      return false;                                                                                               // 437
                                                                                                                  // 438
    // Wrap the input object in an object which makes any store method not                                        // 439
    // implemented by 'store' into a no-op.                                                                       // 440
    var store = {};                                                                                               // 441
    _.each(['update', 'beginUpdate', 'endUpdate', 'saveOriginals',                                                // 442
            'retrieveOriginals', 'getDoc'], function (method) {                                                   // 443
              store[method] = function () {                                                                       // 444
                return (wrappedStore[method]                                                                      // 445
                        ? wrappedStore[method].apply(wrappedStore, arguments)                                     // 446
                        : undefined);                                                                             // 447
              };                                                                                                  // 448
            });                                                                                                   // 449
                                                                                                                  // 450
    self._stores[name] = store;                                                                                   // 451
                                                                                                                  // 452
    var queued = self._updatesForUnknownStores[name];                                                             // 453
    if (queued) {                                                                                                 // 454
      store.beginUpdate(queued.length, false);                                                                    // 455
      _.each(queued, function (msg) {                                                                             // 456
        store.update(msg);                                                                                        // 457
      });                                                                                                         // 458
      store.endUpdate();                                                                                          // 459
      delete self._updatesForUnknownStores[name];                                                                 // 460
    }                                                                                                             // 461
                                                                                                                  // 462
    return true;                                                                                                  // 463
  },                                                                                                              // 464
                                                                                                                  // 465
  /**                                                                                                             // 466
   * @memberOf Meteor                                                                                             // 467
   * @summary Subscribe to a record set.  Returns a handle that provides                                          // 468
   * `stop()` and `ready()` methods.                                                                              // 469
   * @locus Client                                                                                                // 470
   * @param {String} name Name of the subscription.  Matches the name of the                                      // 471
   * server's `publish()` call.                                                                                   // 472
   * @param {Any} [arg1,arg2...] Optional arguments passed to publisher                                           // 473
   * function on server.                                                                                          // 474
   * @param {Function|Object} [callbacks] Optional. May include `onStop`                                          // 475
   * and `onReady` callbacks. If there is an error, it is passed as an                                            // 476
   * argument to `onStop`. If a function is passed instead of an object, it                                       // 477
   * is interpreted as an `onReady` callback.                                                                     // 478
   */                                                                                                             // 479
  subscribe: function (name /* .. [arguments] .. (callback|callbacks) */) {                                       // 480
    var self = this;                                                                                              // 481
                                                                                                                  // 482
    var params = Array.prototype.slice.call(arguments, 1);                                                        // 483
    var callbacks = {};                                                                                           // 484
    if (params.length) {                                                                                          // 485
      var lastParam = params[params.length - 1];                                                                  // 486
      if (_.isFunction(lastParam)) {                                                                              // 487
        callbacks.onReady = params.pop();                                                                         // 488
      } else if (lastParam &&                                                                                     // 489
        // XXX COMPAT WITH 1.0.3.1 onError used to exist, but now we use                                          // 490
        // onStop with an error callback instead.                                                                 // 491
        _.any([lastParam.onReady, lastParam.onError, lastParam.onStop],                                           // 492
          _.isFunction)) {                                                                                        // 493
        callbacks = params.pop();                                                                                 // 494
      }                                                                                                           // 495
    }                                                                                                             // 496
                                                                                                                  // 497
    // Is there an existing sub with the same name and param, run in an                                           // 498
    // invalidated Computation? This will happen if we are rerunning an                                           // 499
    // existing computation.                                                                                      // 500
    //                                                                                                            // 501
    // For example, consider a rerun of:                                                                          // 502
    //                                                                                                            // 503
    //     Tracker.autorun(function () {                                                                          // 504
    //       Meteor.subscribe("foo", Session.get("foo"));                                                         // 505
    //       Meteor.subscribe("bar", Session.get("bar"));                                                         // 506
    //     });                                                                                                    // 507
    //                                                                                                            // 508
    // If "foo" has changed but "bar" has not, we will match the "bar"                                            // 509
    // subcribe to an existing inactive subscription in order to not                                              // 510
    // unsub and resub the subscription unnecessarily.                                                            // 511
    //                                                                                                            // 512
    // We only look for one such sub; if there are N apparently-identical subs                                    // 513
    // being invalidated, we will require N matching subscribe calls to keep                                      // 514
    // them all active.                                                                                           // 515
    var existing = _.find(self._subscriptions, function (sub) {                                                   // 516
      return sub.inactive && sub.name === name &&                                                                 // 517
        EJSON.equals(sub.params, params);                                                                         // 518
    });                                                                                                           // 519
                                                                                                                  // 520
    var id;                                                                                                       // 521
    if (existing) {                                                                                               // 522
      id = existing.id;                                                                                           // 523
      existing.inactive = false; // reactivate                                                                    // 524
                                                                                                                  // 525
      if (callbacks.onReady) {                                                                                    // 526
        // If the sub is not already ready, replace any ready callback with the                                   // 527
        // one provided now. (It's not really clear what users would expect for                                   // 528
        // an onReady callback inside an autorun; the semantics we provide is                                     // 529
        // that at the time the sub first becomes ready, we call the last                                         // 530
        // onReady callback provided, if any.)                                                                    // 531
        if (!existing.ready)                                                                                      // 532
          existing.readyCallback = callbacks.onReady;                                                             // 533
      }                                                                                                           // 534
                                                                                                                  // 535
      // XXX COMPAT WITH 1.0.3.1 we used to have onError but now we call                                          // 536
      // onStop with an optional error argument                                                                   // 537
      if (callbacks.onError) {                                                                                    // 538
        // Replace existing callback if any, so that errors aren't                                                // 539
        // double-reported.                                                                                       // 540
        existing.errorCallback = callbacks.onError;                                                               // 541
      }                                                                                                           // 542
                                                                                                                  // 543
      if (callbacks.onStop) {                                                                                     // 544
        existing.stopCallback = callbacks.onStop;                                                                 // 545
      }                                                                                                           // 546
    } else {                                                                                                      // 547
      // New sub! Generate an id, save it locally, and send message.                                              // 548
      id = Random.id();                                                                                           // 549
      self._subscriptions[id] = {                                                                                 // 550
        id: id,                                                                                                   // 551
        name: name,                                                                                               // 552
        params: EJSON.clone(params),                                                                              // 553
        inactive: false,                                                                                          // 554
        ready: false,                                                                                             // 555
        readyDeps: new Tracker.Dependency,                                                                        // 556
        readyCallback: callbacks.onReady,                                                                         // 557
        // XXX COMPAT WITH 1.0.3.1 #errorCallback                                                                 // 558
        errorCallback: callbacks.onError,                                                                         // 559
        stopCallback: callbacks.onStop,                                                                           // 560
        connection: self,                                                                                         // 561
        remove: function() {                                                                                      // 562
          delete this.connection._subscriptions[this.id];                                                         // 563
          this.ready && this.readyDeps.changed();                                                                 // 564
        },                                                                                                        // 565
        stop: function() {                                                                                        // 566
          this.connection._send({msg: 'unsub', id: id});                                                          // 567
          this.remove();                                                                                          // 568
                                                                                                                  // 569
          if (callbacks.onStop) {                                                                                 // 570
            callbacks.onStop();                                                                                   // 571
          }                                                                                                       // 572
        }                                                                                                         // 573
      };                                                                                                          // 574
      self._send({msg: 'sub', id: id, name: name, params: params});                                               // 575
    }                                                                                                             // 576
                                                                                                                  // 577
    // return a handle to the application.                                                                        // 578
    var handle = {                                                                                                // 579
      stop: function () {                                                                                         // 580
        if (!_.has(self._subscriptions, id))                                                                      // 581
          return;                                                                                                 // 582
                                                                                                                  // 583
        self._subscriptions[id].stop();                                                                           // 584
      },                                                                                                          // 585
      ready: function () {                                                                                        // 586
        // return false if we've unsubscribed.                                                                    // 587
        if (!_.has(self._subscriptions, id))                                                                      // 588
          return false;                                                                                           // 589
        var record = self._subscriptions[id];                                                                     // 590
        record.readyDeps.depend();                                                                                // 591
        return record.ready;                                                                                      // 592
      },                                                                                                          // 593
      subscriptionId: id                                                                                          // 594
    };                                                                                                            // 595
                                                                                                                  // 596
    if (Tracker.active) {                                                                                         // 597
      // We're in a reactive computation, so we'd like to unsubscribe when the                                    // 598
      // computation is invalidated... but not if the rerun just re-subscribes                                    // 599
      // to the same subscription!  When a rerun happens, we use onInvalidate                                     // 600
      // as a change to mark the subscription "inactive" so that it can                                           // 601
      // be reused from the rerun.  If it isn't reused, it's killed from                                          // 602
      // an afterFlush.                                                                                           // 603
      Tracker.onInvalidate(function (c) {                                                                         // 604
        if (_.has(self._subscriptions, id))                                                                       // 605
          self._subscriptions[id].inactive = true;                                                                // 606
                                                                                                                  // 607
        Tracker.afterFlush(function () {                                                                          // 608
          if (_.has(self._subscriptions, id) &&                                                                   // 609
              self._subscriptions[id].inactive)                                                                   // 610
            handle.stop();                                                                                        // 611
        });                                                                                                       // 612
      });                                                                                                         // 613
    }                                                                                                             // 614
                                                                                                                  // 615
    return handle;                                                                                                // 616
  },                                                                                                              // 617
                                                                                                                  // 618
  // options:                                                                                                     // 619
  // - onLateError {Function(error)} called if an error was received after the ready event.                       // 620
  //     (errors received before ready cause an error to be thrown)                                               // 621
  _subscribeAndWait: function (name, args, options) {                                                             // 622
    var self = this;                                                                                              // 623
    var f = new Future();                                                                                         // 624
    var ready = false;                                                                                            // 625
    var handle;                                                                                                   // 626
    args = args || [];                                                                                            // 627
    args.push({                                                                                                   // 628
      onReady: function () {                                                                                      // 629
        ready = true;                                                                                             // 630
        f['return']();                                                                                            // 631
      },                                                                                                          // 632
      onError: function (e) {                                                                                     // 633
        if (!ready)                                                                                               // 634
          f['throw'](e);                                                                                          // 635
        else                                                                                                      // 636
          options && options.onLateError && options.onLateError(e);                                               // 637
      }                                                                                                           // 638
    });                                                                                                           // 639
                                                                                                                  // 640
    handle = self.subscribe.apply(self, [name].concat(args));                                                     // 641
    f.wait();                                                                                                     // 642
    return handle;                                                                                                // 643
  },                                                                                                              // 644
                                                                                                                  // 645
  methods: function (methods) {                                                                                   // 646
    var self = this;                                                                                              // 647
    _.each(methods, function (func, name) {                                                                       // 648
      if (typeof func !== 'function')                                                                             // 649
        throw new Error("Method '" + name + "' must be a function");                                              // 650
      if (self._methodHandlers[name])                                                                             // 651
        throw new Error("A method named '" + name + "' is already defined");                                      // 652
      self._methodHandlers[name] = func;                                                                          // 653
    });                                                                                                           // 654
  },                                                                                                              // 655
                                                                                                                  // 656
  /**                                                                                                             // 657
   * @memberOf Meteor                                                                                             // 658
   * @summary Invokes a method passing any number of arguments.                                                   // 659
   * @locus Anywhere                                                                                              // 660
   * @param {String} name Name of method to invoke                                                                // 661
   * @param {EJSONable} [arg1,arg2...] Optional method arguments                                                  // 662
   * @param {Function} [asyncCallback] Optional callback, which is called asynchronously with the error or result after the method is complete. If not provided, the method runs synchronously if possible (see below).
   */                                                                                                             // 664
  call: function (name /* .. [arguments] .. callback */) {                                                        // 665
    // if it's a function, the last argument is the result callback,                                              // 666
    // not a parameter to the remote method.                                                                      // 667
    var args = Array.prototype.slice.call(arguments, 1);                                                          // 668
    if (args.length && typeof args[args.length - 1] === "function")                                               // 669
      var callback = args.pop();                                                                                  // 670
    return this.apply(name, args, callback);                                                                      // 671
  },                                                                                                              // 672
                                                                                                                  // 673
  // @param options {Optional Object}                                                                             // 674
  //   wait: Boolean - Should we wait to call this until all current methods                                      // 675
  //                   are fully finished, and block subsequent method calls                                      // 676
  //                   until this method is fully finished?                                                       // 677
  //                   (does not affect methods called from within this method)                                   // 678
  //   onResultReceived: Function - a callback to call as soon as the method                                      // 679
  //                                result is received. the data written by                                       // 680
  //                                the method may not yet be in the cache!                                       // 681
  //   returnStubValue: Boolean - If true then in cases where we would have                                       // 682
  //                              otherwise discarded the stub's return value                                     // 683
  //                              and returned undefined, instead we go ahead                                     // 684
  //                              and return it.  Specifically, this is any                                       // 685
  //                              time other than when (a) we are already                                         // 686
  //                              inside a stub or (b) we are in Node and no                                      // 687
  //                              callback was provided.  Currently we require                                    // 688
  //                              this flag to be explicitly passed to reduce                                     // 689
  //                              the likelihood that stub return values will                                     // 690
  //                              be confused with server return values; we                                       // 691
  //                              may improve this in future.                                                     // 692
  // @param callback {Optional Function}                                                                          // 693
                                                                                                                  // 694
  /**                                                                                                             // 695
   * @memberOf Meteor                                                                                             // 696
   * @summary Invoke a method passing an array of arguments.                                                      // 697
   * @locus Anywhere                                                                                              // 698
   * @param {String} name Name of method to invoke                                                                // 699
   * @param {EJSONable[]} args Method arguments                                                                   // 700
   * @param {Object} [options]                                                                                    // 701
   * @param {Boolean} options.wait (Client only) If true, don't send this method until all previous method calls have completed, and don't send any subsequent method calls until this one is completed.
   * @param {Function} options.onResultReceived (Client only) This callback is invoked with the error or result of the method (just like `asyncCallback`) as soon as the error or result is available. The local cache may not yet reflect the writes performed by the method.
   * @param {Function} [asyncCallback] Optional callback; same semantics as in [`Meteor.call`](#meteor_call).     // 704
   */                                                                                                             // 705
  apply: function (name, args, options, callback) {                                                               // 706
    var self = this;                                                                                              // 707
                                                                                                                  // 708
    // We were passed 3 arguments. They may be either (name, args, options)                                       // 709
    // or (name, args, callback)                                                                                  // 710
    if (!callback && typeof options === 'function') {                                                             // 711
      callback = options;                                                                                         // 712
      options = {};                                                                                               // 713
    }                                                                                                             // 714
    options = options || {};                                                                                      // 715
                                                                                                                  // 716
    if (callback) {                                                                                               // 717
      // XXX would it be better form to do the binding in stream.on,                                              // 718
      // or caller, instead of here?                                                                              // 719
      // XXX improve error message (and how we report it)                                                         // 720
      callback = Meteor.bindEnvironment(                                                                          // 721
        callback,                                                                                                 // 722
        "delivering result of invoking '" + name + "'"                                                            // 723
      );                                                                                                          // 724
    }                                                                                                             // 725
                                                                                                                  // 726
    // Keep our args safe from mutation (eg if we don't send the message for a                                    // 727
    // while because of a wait method).                                                                           // 728
    args = EJSON.clone(args);                                                                                     // 729
                                                                                                                  // 730
    // Lazily allocate method ID once we know that it'll be needed.                                               // 731
    var methodId = (function () {                                                                                 // 732
      var id;                                                                                                     // 733
      return function () {                                                                                        // 734
        if (id === undefined)                                                                                     // 735
          id = '' + (self._nextMethodId++);                                                                       // 736
        return id;                                                                                                // 737
      };                                                                                                          // 738
    })();                                                                                                         // 739
                                                                                                                  // 740
    var enclosing = DDP._CurrentInvocation.get();                                                                 // 741
    var alreadyInSimulation = enclosing && enclosing.isSimulation;                                                // 742
                                                                                                                  // 743
    // Lazily generate a randomSeed, only if it is requested by the stub.                                         // 744
    // The random streams only have utility if they're used on both the client                                    // 745
    // and the server; if the client doesn't generate any 'random' values                                         // 746
    // then we don't expect the server to generate any either.                                                    // 747
    // Less commonly, the server may perform different actions from the client,                                   // 748
    // and may in fact generate values where the client did not, but we don't                                     // 749
    // have any client-side values to match, so even here we may as well just                                     // 750
    // use a random seed on the server.  In that case, we don't pass the                                          // 751
    // randomSeed to save bandwidth, and we don't even generate it to save a                                      // 752
    // bit of CPU and to avoid consuming entropy.                                                                 // 753
    var randomSeed = null;                                                                                        // 754
    var randomSeedGenerator = function () {                                                                       // 755
      if (randomSeed === null) {                                                                                  // 756
        randomSeed = DDPCommon.makeRpcSeed(enclosing, name);                                                      // 757
      }                                                                                                           // 758
      return randomSeed;                                                                                          // 759
    };                                                                                                            // 760
                                                                                                                  // 761
    // Run the stub, if we have one. The stub is supposed to make some                                            // 762
    // temporary writes to the database to give the user a smooth experience                                      // 763
    // until the actual result of executing the method comes back from the                                        // 764
    // server (whereupon the temporary writes to the database will be reversed                                    // 765
    // during the beginUpdate/endUpdate process.)                                                                 // 766
    //                                                                                                            // 767
    // Normally, we ignore the return value of the stub (even if it is an                                         // 768
    // exception), in favor of the real return value from the server. The                                         // 769
    // exception is if the *caller* is a stub. In that case, we're not going                                      // 770
    // to do a RPC, so we use the return value of the stub as our return                                          // 771
    // value.                                                                                                     // 772
                                                                                                                  // 773
    var stub = self._methodHandlers[name];                                                                        // 774
    if (stub) {                                                                                                   // 775
      var setUserId = function(userId) {                                                                          // 776
        self.setUserId(userId);                                                                                   // 777
      };                                                                                                          // 778
                                                                                                                  // 779
      var invocation = new DDPCommon.MethodInvocation({                                                           // 780
        isSimulation: true,                                                                                       // 781
        userId: self.userId(),                                                                                    // 782
        setUserId: setUserId,                                                                                     // 783
        randomSeed: function () { return randomSeedGenerator(); }                                                 // 784
      });                                                                                                         // 785
                                                                                                                  // 786
      if (!alreadyInSimulation)                                                                                   // 787
        self._saveOriginals();                                                                                    // 788
                                                                                                                  // 789
      try {                                                                                                       // 790
        // Note that unlike in the corresponding server code, we never audit                                      // 791
        // that stubs check() their arguments.                                                                    // 792
        var stubReturnValue = DDP._CurrentInvocation.withValue(invocation, function () {                          // 793
          if (Meteor.isServer) {                                                                                  // 794
            // Because saveOriginals and retrieveOriginals aren't reentrant,                                      // 795
            // don't allow stubs to yield.                                                                        // 796
            return Meteor._noYieldsAllowed(function () {                                                          // 797
              // re-clone, so that the stub can't affect our caller's values                                      // 798
              return stub.apply(invocation, EJSON.clone(args));                                                   // 799
            });                                                                                                   // 800
          } else {                                                                                                // 801
            return stub.apply(invocation, EJSON.clone(args));                                                     // 802
          }                                                                                                       // 803
        });                                                                                                       // 804
      }                                                                                                           // 805
      catch (e) {                                                                                                 // 806
        var exception = e;                                                                                        // 807
      }                                                                                                           // 808
                                                                                                                  // 809
      if (!alreadyInSimulation)                                                                                   // 810
        self._retrieveAndStoreOriginals(methodId());                                                              // 811
    }                                                                                                             // 812
                                                                                                                  // 813
    // If we're in a simulation, stop and return the result we have,                                              // 814
    // rather than going on to do an RPC. If there was no stub,                                                   // 815
    // we'll end up returning undefined.                                                                          // 816
    if (alreadyInSimulation) {                                                                                    // 817
      if (callback) {                                                                                             // 818
        callback(exception, stubReturnValue);                                                                     // 819
        return undefined;                                                                                         // 820
      }                                                                                                           // 821
      if (exception)                                                                                              // 822
        throw exception;                                                                                          // 823
      return stubReturnValue;                                                                                     // 824
    }                                                                                                             // 825
                                                                                                                  // 826
    // If an exception occurred in a stub, and we're ignoring it                                                  // 827
    // because we're doing an RPC and want to use what the server                                                 // 828
    // returns instead, log it so the developer knows                                                             // 829
    // (unless they explicitly ask to see the error).                                                             // 830
    //                                                                                                            // 831
    // Tests can set the 'expected' flag on an exception so it won't                                              // 832
    // go to log.                                                                                                 // 833
    if (exception) {                                                                                              // 834
      if (options.throwStubExceptions) {                                                                          // 835
        throw exception;                                                                                          // 836
      } else if (!exception.expected) {                                                                           // 837
        Meteor._debug("Exception while simulating the effect of invoking '" +                                     // 838
          name + "'", exception, exception.stack);                                                                // 839
      }                                                                                                           // 840
    }                                                                                                             // 841
                                                                                                                  // 842
                                                                                                                  // 843
    // At this point we're definitely doing an RPC, and we're going to                                            // 844
    // return the value of the RPC to the caller.                                                                 // 845
                                                                                                                  // 846
    // If the caller didn't give a callback, decide what to do.                                                   // 847
    if (!callback) {                                                                                              // 848
      if (Meteor.isClient) {                                                                                      // 849
        // On the client, we don't have fibers, so we can't block. The                                            // 850
        // only thing we can do is to return undefined and discard the                                            // 851
        // result of the RPC. If an error occurred then print the error                                           // 852
        // to the console.                                                                                        // 853
        callback = function (err) {                                                                               // 854
          err && Meteor._debug("Error invoking Method '" + name + "':",                                           // 855
                               err.message);                                                                      // 856
        };                                                                                                        // 857
      } else {                                                                                                    // 858
        // On the server, make the function synchronous. Throw on                                                 // 859
        // errors, return on success.                                                                             // 860
        var future = new Future;                                                                                  // 861
        callback = future.resolver();                                                                             // 862
      }                                                                                                           // 863
    }                                                                                                             // 864
    // Send the RPC. Note that on the client, it is important that the                                            // 865
    // stub have finished before we send the RPC, so that we know we have                                         // 866
    // a complete list of which local documents the stub wrote.                                                   // 867
    var message = {                                                                                               // 868
      msg: 'method',                                                                                              // 869
      method: name,                                                                                               // 870
      params: args,                                                                                               // 871
      id: methodId()                                                                                              // 872
    };                                                                                                            // 873
                                                                                                                  // 874
    // Send the randomSeed only if we used it                                                                     // 875
    if (randomSeed !== null) {                                                                                    // 876
      message.randomSeed = randomSeed;                                                                            // 877
    }                                                                                                             // 878
                                                                                                                  // 879
    var methodInvoker = new MethodInvoker({                                                                       // 880
      methodId: methodId(),                                                                                       // 881
      callback: callback,                                                                                         // 882
      connection: self,                                                                                           // 883
      onResultReceived: options.onResultReceived,                                                                 // 884
      wait: !!options.wait,                                                                                       // 885
      message: message                                                                                            // 886
    });                                                                                                           // 887
                                                                                                                  // 888
    if (options.wait) {                                                                                           // 889
      // It's a wait method! Wait methods go in their own block.                                                  // 890
      self._outstandingMethodBlocks.push(                                                                         // 891
        {wait: true, methods: [methodInvoker]});                                                                  // 892
    } else {                                                                                                      // 893
      // Not a wait method. Start a new block if the previous block was a wait                                    // 894
      // block, and add it to the last block of methods.                                                          // 895
      if (_.isEmpty(self._outstandingMethodBlocks) ||                                                             // 896
          _.last(self._outstandingMethodBlocks).wait)                                                             // 897
        self._outstandingMethodBlocks.push({wait: false, methods: []});                                           // 898
      _.last(self._outstandingMethodBlocks).methods.push(methodInvoker);                                          // 899
    }                                                                                                             // 900
                                                                                                                  // 901
    // If we added it to the first block, send it out now.                                                        // 902
    if (self._outstandingMethodBlocks.length === 1)                                                               // 903
      methodInvoker.sendMessage();                                                                                // 904
                                                                                                                  // 905
    // If we're using the default callback on the server,                                                         // 906
    // block waiting for the result.                                                                              // 907
    if (future) {                                                                                                 // 908
      return future.wait();                                                                                       // 909
    }                                                                                                             // 910
    return options.returnStubValue ? stubReturnValue : undefined;                                                 // 911
  },                                                                                                              // 912
                                                                                                                  // 913
  // Before calling a method stub, prepare all stores to track changes and allow                                  // 914
  // _retrieveAndStoreOriginals to get the original versions of changed                                           // 915
  // documents.                                                                                                   // 916
  _saveOriginals: function () {                                                                                   // 917
    var self = this;                                                                                              // 918
    _.each(self._stores, function (s) {                                                                           // 919
      s.saveOriginals();                                                                                          // 920
    });                                                                                                           // 921
  },                                                                                                              // 922
  // Retrieves the original versions of all documents modified by the stub for                                    // 923
  // method 'methodId' from all stores and saves them to _serverDocuments (keyed                                  // 924
  // by document) and _documentsWrittenByStub (keyed by method ID).                                               // 925
  _retrieveAndStoreOriginals: function (methodId) {                                                               // 926
    var self = this;                                                                                              // 927
    if (self._documentsWrittenByStub[methodId])                                                                   // 928
      throw new Error("Duplicate methodId in _retrieveAndStoreOriginals");                                        // 929
                                                                                                                  // 930
    var docsWritten = [];                                                                                         // 931
    _.each(self._stores, function (s, collection) {                                                               // 932
      var originals = s.retrieveOriginals();                                                                      // 933
      // not all stores define retrieveOriginals                                                                  // 934
      if (!originals)                                                                                             // 935
        return;                                                                                                   // 936
      originals.forEach(function (doc, id) {                                                                      // 937
        docsWritten.push({collection: collection, id: id});                                                       // 938
        if (!_.has(self._serverDocuments, collection))                                                            // 939
          self._serverDocuments[collection] = new MongoIDMap;                                                     // 940
        var serverDoc = self._serverDocuments[collection].setDefault(id, {});                                     // 941
        if (serverDoc.writtenByStubs) {                                                                           // 942
          // We're not the first stub to write this doc. Just add our method ID                                   // 943
          // to the record.                                                                                       // 944
          serverDoc.writtenByStubs[methodId] = true;                                                              // 945
        } else {                                                                                                  // 946
          // First stub! Save the original value and our method ID.                                               // 947
          serverDoc.document = doc;                                                                               // 948
          serverDoc.flushCallbacks = [];                                                                          // 949
          serverDoc.writtenByStubs = {};                                                                          // 950
          serverDoc.writtenByStubs[methodId] = true;                                                              // 951
        }                                                                                                         // 952
      });                                                                                                         // 953
    });                                                                                                           // 954
    if (!_.isEmpty(docsWritten)) {                                                                                // 955
      self._documentsWrittenByStub[methodId] = docsWritten;                                                       // 956
    }                                                                                                             // 957
  },                                                                                                              // 958
                                                                                                                  // 959
  // This is very much a private function we use to make the tests                                                // 960
  // take up fewer server resources after they complete.                                                          // 961
  _unsubscribeAll: function () {                                                                                  // 962
    var self = this;                                                                                              // 963
    _.each(_.clone(self._subscriptions), function (sub, id) {                                                     // 964
      // Avoid killing the autoupdate subscription so that developers                                             // 965
      // still get hot code pushes when writing tests.                                                            // 966
      //                                                                                                          // 967
      // XXX it's a hack to encode knowledge about autoupdate here,                                               // 968
      // but it doesn't seem worth it yet to have a special API for                                               // 969
      // subscriptions to preserve after unit tests.                                                              // 970
      if (sub.name !== 'meteor_autoupdate_clientVersions') {                                                      // 971
        self._subscriptions[id].stop();                                                                           // 972
      }                                                                                                           // 973
    });                                                                                                           // 974
  },                                                                                                              // 975
                                                                                                                  // 976
  // Sends the DDP stringification of the given message object                                                    // 977
  _send: function (obj) {                                                                                         // 978
    var self = this;                                                                                              // 979
    self._stream.send(DDPCommon.stringifyDDP(obj));                                                               // 980
  },                                                                                                              // 981
                                                                                                                  // 982
  // We detected via DDP-level heartbeats that we've lost the                                                     // 983
  // connection.  Unlike `disconnect` or `close`, a lost connection                                               // 984
  // will be automatically retried.                                                                               // 985
  _lostConnection: function (error) {                                                                             // 986
    var self = this;                                                                                              // 987
    self._stream._lostConnection(error);                                                                          // 988
  },                                                                                                              // 989
                                                                                                                  // 990
  /**                                                                                                             // 991
   * @summary Get the current connection status. A reactive data source.                                          // 992
   * @locus Client                                                                                                // 993
   * @memberOf Meteor                                                                                             // 994
   */                                                                                                             // 995
  status: function (/*passthrough args*/) {                                                                       // 996
    var self = this;                                                                                              // 997
    return self._stream.status.apply(self._stream, arguments);                                                    // 998
  },                                                                                                              // 999
                                                                                                                  // 1000
  /**                                                                                                             // 1001
   * @summary Force an immediate reconnection attempt if the client is not connected to the server.               // 1002
                                                                                                                  // 1003
  This method does nothing if the client is already connected.                                                    // 1004
   * @locus Client                                                                                                // 1005
   * @memberOf Meteor                                                                                             // 1006
   */                                                                                                             // 1007
  reconnect: function (/*passthrough args*/) {                                                                    // 1008
    var self = this;                                                                                              // 1009
    return self._stream.reconnect.apply(self._stream, arguments);                                                 // 1010
  },                                                                                                              // 1011
                                                                                                                  // 1012
  /**                                                                                                             // 1013
   * @summary Disconnect the client from the server.                                                              // 1014
   * @locus Client                                                                                                // 1015
   * @memberOf Meteor                                                                                             // 1016
   */                                                                                                             // 1017
  disconnect: function (/*passthrough args*/) {                                                                   // 1018
    var self = this;                                                                                              // 1019
    return self._stream.disconnect.apply(self._stream, arguments);                                                // 1020
  },                                                                                                              // 1021
                                                                                                                  // 1022
  close: function () {                                                                                            // 1023
    var self = this;                                                                                              // 1024
    return self._stream.disconnect({_permanent: true});                                                           // 1025
  },                                                                                                              // 1026
                                                                                                                  // 1027
  ///                                                                                                             // 1028
  /// Reactive user system                                                                                        // 1029
  ///                                                                                                             // 1030
  userId: function () {                                                                                           // 1031
    var self = this;                                                                                              // 1032
    if (self._userIdDeps)                                                                                         // 1033
      self._userIdDeps.depend();                                                                                  // 1034
    return self._userId;                                                                                          // 1035
  },                                                                                                              // 1036
                                                                                                                  // 1037
  setUserId: function (userId) {                                                                                  // 1038
    var self = this;                                                                                              // 1039
    // Avoid invalidating dependents if setUserId is called with current value.                                   // 1040
    if (self._userId === userId)                                                                                  // 1041
      return;                                                                                                     // 1042
    self._userId = userId;                                                                                        // 1043
    if (self._userIdDeps)                                                                                         // 1044
      self._userIdDeps.changed();                                                                                 // 1045
  },                                                                                                              // 1046
                                                                                                                  // 1047
  // Returns true if we are in a state after reconnect of waiting for subs to be                                  // 1048
  // revived or early methods to finish their data, or we are waiting for a                                       // 1049
  // "wait" method to finish.                                                                                     // 1050
  _waitingForQuiescence: function () {                                                                            // 1051
    var self = this;                                                                                              // 1052
    return (! _.isEmpty(self._subsBeingRevived) ||                                                                // 1053
            ! _.isEmpty(self._methodsBlockingQuiescence));                                                        // 1054
  },                                                                                                              // 1055
                                                                                                                  // 1056
  // Returns true if any method whose message has been sent to the server has                                     // 1057
  // not yet invoked its user callback.                                                                           // 1058
  _anyMethodsAreOutstanding: function () {                                                                        // 1059
    var self = this;                                                                                              // 1060
    return _.any(_.pluck(self._methodInvokers, 'sentMessage'));                                                   // 1061
  },                                                                                                              // 1062
                                                                                                                  // 1063
  _livedata_connected: function (msg) {                                                                           // 1064
    var self = this;                                                                                              // 1065
                                                                                                                  // 1066
    if (self._version !== 'pre1' && self._heartbeatInterval !== 0) {                                              // 1067
      self._heartbeat = new DDPCommon.Heartbeat({                                                                 // 1068
        heartbeatInterval: self._heartbeatInterval,                                                               // 1069
        heartbeatTimeout: self._heartbeatTimeout,                                                                 // 1070
        onTimeout: function () {                                                                                  // 1071
          self._lostConnection(                                                                                   // 1072
            new DDP.ConnectionError("DDP heartbeat timed out"));                                                  // 1073
        },                                                                                                        // 1074
        sendPing: function () {                                                                                   // 1075
          self._send({msg: 'ping'});                                                                              // 1076
        }                                                                                                         // 1077
      });                                                                                                         // 1078
      self._heartbeat.start();                                                                                    // 1079
    }                                                                                                             // 1080
                                                                                                                  // 1081
    // If this is a reconnect, we'll have to reset all stores.                                                    // 1082
    if (self._lastSessionId)                                                                                      // 1083
      self._resetStores = true;                                                                                   // 1084
                                                                                                                  // 1085
    if (typeof (msg.session) === "string") {                                                                      // 1086
      var reconnectedToPreviousSession = (self._lastSessionId === msg.session);                                   // 1087
      self._lastSessionId = msg.session;                                                                          // 1088
    }                                                                                                             // 1089
                                                                                                                  // 1090
    if (reconnectedToPreviousSession) {                                                                           // 1091
      // Successful reconnection -- pick up where we left off.  Note that right                                   // 1092
      // now, this never happens: the server never connects us to a previous                                      // 1093
      // session, because DDP doesn't provide enough data for the server to know                                  // 1094
      // what messages the client has processed. We need to improve DDP to make                                   // 1095
      // this possible, at which point we'll probably need more code here.                                        // 1096
      return;                                                                                                     // 1097
    }                                                                                                             // 1098
                                                                                                                  // 1099
    // Server doesn't have our data any more. Re-sync a new session.                                              // 1100
                                                                                                                  // 1101
    // Forget about messages we were buffering for unknown collections. They'll                                   // 1102
    // be resent if still relevant.                                                                               // 1103
    self._updatesForUnknownStores = {};                                                                           // 1104
                                                                                                                  // 1105
    if (self._resetStores) {                                                                                      // 1106
      // Forget about the effects of stubs. We'll be resetting all collections                                    // 1107
      // anyway.                                                                                                  // 1108
      self._documentsWrittenByStub = {};                                                                          // 1109
      self._serverDocuments = {};                                                                                 // 1110
    }                                                                                                             // 1111
                                                                                                                  // 1112
    // Clear _afterUpdateCallbacks.                                                                               // 1113
    self._afterUpdateCallbacks = [];                                                                              // 1114
                                                                                                                  // 1115
    // Mark all named subscriptions which are ready (ie, we already called the                                    // 1116
    // ready callback) as needing to be revived.                                                                  // 1117
    // XXX We should also block reconnect quiescence until unnamed subscriptions                                  // 1118
    //     (eg, autopublish) are done re-publishing to avoid flicker!                                             // 1119
    self._subsBeingRevived = {};                                                                                  // 1120
    _.each(self._subscriptions, function (sub, id) {                                                              // 1121
      if (sub.ready)                                                                                              // 1122
        self._subsBeingRevived[id] = true;                                                                        // 1123
    });                                                                                                           // 1124
                                                                                                                  // 1125
    // Arrange for "half-finished" methods to have their callbacks run, and                                       // 1126
    // track methods that were sent on this connection so that we don't                                           // 1127
    // quiesce until they are all done.                                                                           // 1128
    //                                                                                                            // 1129
    // Start by clearing _methodsBlockingQuiescence: methods sent before                                          // 1130
    // reconnect don't matter, and any "wait" methods sent on the new connection                                  // 1131
    // that we drop here will be restored by the loop below.                                                      // 1132
    self._methodsBlockingQuiescence = {};                                                                         // 1133
    if (self._resetStores) {                                                                                      // 1134
      _.each(self._methodInvokers, function (invoker) {                                                           // 1135
        if (invoker.gotResult()) {                                                                                // 1136
          // This method already got its result, but it didn't call its callback                                  // 1137
          // because its data didn't become visible. We did not resend the                                        // 1138
          // method RPC. We'll call its callback when we get a full quiesce,                                      // 1139
          // since that's as close as we'll get to "data must be visible".                                        // 1140
          self._afterUpdateCallbacks.push(_.bind(invoker.dataVisible, invoker));                                  // 1141
        } else if (invoker.sentMessage) {                                                                         // 1142
          // This method has been sent on this connection (maybe as a resend                                      // 1143
          // from the last connection, maybe from onReconnect, maybe just very                                    // 1144
          // quickly before processing the connected message).                                                    // 1145
          //                                                                                                      // 1146
          // We don't need to do anything special to ensure its callbacks get                                     // 1147
          // called, but we'll count it as a method which is preventing                                           // 1148
          // reconnect quiescence. (eg, it might be a login method that was run                                   // 1149
          // from onReconnect, and we don't want to see flicker by seeing a                                       // 1150
          // logged-out state.)                                                                                   // 1151
          self._methodsBlockingQuiescence[invoker.methodId] = true;                                               // 1152
        }                                                                                                         // 1153
      });                                                                                                         // 1154
    }                                                                                                             // 1155
                                                                                                                  // 1156
    self._messagesBufferedUntilQuiescence = [];                                                                   // 1157
                                                                                                                  // 1158
    // If we're not waiting on any methods or subs, we can reset the stores and                                   // 1159
    // call the callbacks immediately.                                                                            // 1160
    if (!self._waitingForQuiescence()) {                                                                          // 1161
      if (self._resetStores) {                                                                                    // 1162
        _.each(self._stores, function (s) {                                                                       // 1163
          s.beginUpdate(0, true);                                                                                 // 1164
          s.endUpdate();                                                                                          // 1165
        });                                                                                                       // 1166
        self._resetStores = false;                                                                                // 1167
      }                                                                                                           // 1168
      self._runAfterUpdateCallbacks();                                                                            // 1169
    }                                                                                                             // 1170
  },                                                                                                              // 1171
                                                                                                                  // 1172
                                                                                                                  // 1173
  _processOneDataMessage: function (msg, updates) {                                                               // 1174
    var self = this;                                                                                              // 1175
    // Using underscore here so as not to need to capitalize.                                                     // 1176
    self['_process_' + msg.msg](msg, updates);                                                                    // 1177
  },                                                                                                              // 1178
                                                                                                                  // 1179
                                                                                                                  // 1180
  _livedata_data: function (msg) {                                                                                // 1181
    var self = this;                                                                                              // 1182
                                                                                                                  // 1183
    // collection name -> array of messages                                                                       // 1184
    var updates = {};                                                                                             // 1185
                                                                                                                  // 1186
    if (self._waitingForQuiescence()) {                                                                           // 1187
      self._messagesBufferedUntilQuiescence.push(msg);                                                            // 1188
                                                                                                                  // 1189
      if (msg.msg === "nosub")                                                                                    // 1190
        delete self._subsBeingRevived[msg.id];                                                                    // 1191
                                                                                                                  // 1192
      _.each(msg.subs || [], function (subId) {                                                                   // 1193
        delete self._subsBeingRevived[subId];                                                                     // 1194
      });                                                                                                         // 1195
      _.each(msg.methods || [], function (methodId) {                                                             // 1196
        delete self._methodsBlockingQuiescence[methodId];                                                         // 1197
      });                                                                                                         // 1198
                                                                                                                  // 1199
      if (self._waitingForQuiescence())                                                                           // 1200
        return;                                                                                                   // 1201
                                                                                                                  // 1202
      // No methods or subs are blocking quiescence!                                                              // 1203
      // We'll now process and all of our buffered messages, reset all stores,                                    // 1204
      // and apply them all at once.                                                                              // 1205
      _.each(self._messagesBufferedUntilQuiescence, function (bufferedMsg) {                                      // 1206
        self._processOneDataMessage(bufferedMsg, updates);                                                        // 1207
      });                                                                                                         // 1208
      self._messagesBufferedUntilQuiescence = [];                                                                 // 1209
    } else {                                                                                                      // 1210
      self._processOneDataMessage(msg, updates);                                                                  // 1211
    }                                                                                                             // 1212
                                                                                                                  // 1213
    if (self._resetStores || !_.isEmpty(updates)) {                                                               // 1214
      // Begin a transactional update of each store.                                                              // 1215
      _.each(self._stores, function (s, storeName) {                                                              // 1216
        s.beginUpdate(_.has(updates, storeName) ? updates[storeName].length : 0,                                  // 1217
                      self._resetStores);                                                                         // 1218
      });                                                                                                         // 1219
      self._resetStores = false;                                                                                  // 1220
                                                                                                                  // 1221
      _.each(updates, function (updateMessages, storeName) {                                                      // 1222
        var store = self._stores[storeName];                                                                      // 1223
        if (store) {                                                                                              // 1224
          _.each(updateMessages, function (updateMessage) {                                                       // 1225
            store.update(updateMessage);                                                                          // 1226
          });                                                                                                     // 1227
        } else {                                                                                                  // 1228
          // Nobody's listening for this data. Queue it up until                                                  // 1229
          // someone wants it.                                                                                    // 1230
          // XXX memory use will grow without bound if you forget to                                              // 1231
          // create a collection or just don't care about it... going                                             // 1232
          // to have to do something about that.                                                                  // 1233
          if (!_.has(self._updatesForUnknownStores, storeName))                                                   // 1234
            self._updatesForUnknownStores[storeName] = [];                                                        // 1235
          Array.prototype.push.apply(self._updatesForUnknownStores[storeName],                                    // 1236
                                     updateMessages);                                                             // 1237
        }                                                                                                         // 1238
      });                                                                                                         // 1239
                                                                                                                  // 1240
      // End update transaction.                                                                                  // 1241
      _.each(self._stores, function (s) { s.endUpdate(); });                                                      // 1242
    }                                                                                                             // 1243
                                                                                                                  // 1244
    self._runAfterUpdateCallbacks();                                                                              // 1245
  },                                                                                                              // 1246
                                                                                                                  // 1247
  // Call any callbacks deferred with _runWhenAllServerDocsAreFlushed whose                                       // 1248
  // relevant docs have been flushed, as well as dataVisible callbacks at                                         // 1249
  // reconnect-quiescence time.                                                                                   // 1250
  _runAfterUpdateCallbacks: function () {                                                                         // 1251
    var self = this;                                                                                              // 1252
    var callbacks = self._afterUpdateCallbacks;                                                                   // 1253
    self._afterUpdateCallbacks = [];                                                                              // 1254
    _.each(callbacks, function (c) {                                                                              // 1255
      c();                                                                                                        // 1256
    });                                                                                                           // 1257
  },                                                                                                              // 1258
                                                                                                                  // 1259
  _pushUpdate: function (updates, collection, msg) {                                                              // 1260
    var self = this;                                                                                              // 1261
    if (!_.has(updates, collection)) {                                                                            // 1262
      updates[collection] = [];                                                                                   // 1263
    }                                                                                                             // 1264
    updates[collection].push(msg);                                                                                // 1265
  },                                                                                                              // 1266
                                                                                                                  // 1267
  _getServerDoc: function (collection, id) {                                                                      // 1268
    var self = this;                                                                                              // 1269
    if (!_.has(self._serverDocuments, collection))                                                                // 1270
      return null;                                                                                                // 1271
    var serverDocsForCollection = self._serverDocuments[collection];                                              // 1272
    return serverDocsForCollection.get(id) || null;                                                               // 1273
  },                                                                                                              // 1274
                                                                                                                  // 1275
  _process_added: function (msg, updates) {                                                                       // 1276
    var self = this;                                                                                              // 1277
    var id = MongoID.idParse(msg.id);                                                                             // 1278
    var serverDoc = self._getServerDoc(msg.collection, id);                                                       // 1279
    if (serverDoc) {                                                                                              // 1280
      // Some outstanding stub wrote here.                                                                        // 1281
      var isExisting = (serverDoc.document !== undefined);                                                        // 1282
                                                                                                                  // 1283
      serverDoc.document = msg.fields || {};                                                                      // 1284
      serverDoc.document._id = id;                                                                                // 1285
                                                                                                                  // 1286
      if (self._resetStores) {                                                                                    // 1287
        // During reconnect the server is sending adds for existing ids.                                          // 1288
        // Always push an update so that document stays in the store after                                        // 1289
        // reset. Use current version of the document for this update, so                                         // 1290
        // that stub-written values are preserved.                                                                // 1291
        var currentDoc = self._stores[msg.collection].getDoc(msg.id);                                             // 1292
        if (currentDoc !== undefined)                                                                             // 1293
          msg.fields = currentDoc;                                                                                // 1294
                                                                                                                  // 1295
        self._pushUpdate(updates, msg.collection, msg);                                                           // 1296
      } else if (isExisting) {                                                                                    // 1297
        throw new Error("Server sent add for existing id: " + msg.id);                                            // 1298
      }                                                                                                           // 1299
    } else {                                                                                                      // 1300
      self._pushUpdate(updates, msg.collection, msg);                                                             // 1301
    }                                                                                                             // 1302
  },                                                                                                              // 1303
                                                                                                                  // 1304
  _process_changed: function (msg, updates) {                                                                     // 1305
    var self = this;                                                                                              // 1306
    var serverDoc = self._getServerDoc(                                                                           // 1307
      msg.collection, MongoID.idParse(msg.id));                                                                   // 1308
    if (serverDoc) {                                                                                              // 1309
      if (serverDoc.document === undefined)                                                                       // 1310
        throw new Error("Server sent changed for nonexisting id: " + msg.id);                                     // 1311
      DiffSequence.applyChanges(serverDoc.document, msg.fields);                                                  // 1312
    } else {                                                                                                      // 1313
      self._pushUpdate(updates, msg.collection, msg);                                                             // 1314
    }                                                                                                             // 1315
  },                                                                                                              // 1316
                                                                                                                  // 1317
  _process_removed: function (msg, updates) {                                                                     // 1318
    var self = this;                                                                                              // 1319
    var serverDoc = self._getServerDoc(                                                                           // 1320
      msg.collection, MongoID.idParse(msg.id));                                                                   // 1321
    if (serverDoc) {                                                                                              // 1322
      // Some outstanding stub wrote here.                                                                        // 1323
      if (serverDoc.document === undefined)                                                                       // 1324
        throw new Error("Server sent removed for nonexisting id:" + msg.id);                                      // 1325
      serverDoc.document = undefined;                                                                             // 1326
    } else {                                                                                                      // 1327
      self._pushUpdate(updates, msg.collection, {                                                                 // 1328
        msg: 'removed',                                                                                           // 1329
        collection: msg.collection,                                                                               // 1330
        id: msg.id                                                                                                // 1331
      });                                                                                                         // 1332
    }                                                                                                             // 1333
  },                                                                                                              // 1334
                                                                                                                  // 1335
  _process_updated: function (msg, updates) {                                                                     // 1336
    var self = this;                                                                                              // 1337
    // Process "method done" messages.                                                                            // 1338
    _.each(msg.methods, function (methodId) {                                                                     // 1339
      _.each(self._documentsWrittenByStub[methodId], function (written) {                                         // 1340
        var serverDoc = self._getServerDoc(written.collection, written.id);                                       // 1341
        if (!serverDoc)                                                                                           // 1342
          throw new Error("Lost serverDoc for " + JSON.stringify(written));                                       // 1343
        if (!serverDoc.writtenByStubs[methodId])                                                                  // 1344
          throw new Error("Doc " + JSON.stringify(written) +                                                      // 1345
                          " not written by  method " + methodId);                                                 // 1346
        delete serverDoc.writtenByStubs[methodId];                                                                // 1347
        if (_.isEmpty(serverDoc.writtenByStubs)) {                                                                // 1348
          // All methods whose stubs wrote this method have completed! We can                                     // 1349
          // now copy the saved document to the database (reverting the stub's                                    // 1350
          // change if the server did not write to this object, or applying the                                   // 1351
          // server's writes if it did).                                                                          // 1352
                                                                                                                  // 1353
          // This is a fake ddp 'replace' message.  It's just for talking                                         // 1354
          // between livedata connections and minimongo.  (We have to stringify                                   // 1355
          // the ID because it's supposed to look like a wire message.)                                           // 1356
          self._pushUpdate(updates, written.collection, {                                                         // 1357
            msg: 'replace',                                                                                       // 1358
            id: MongoID.idStringify(written.id),                                                                  // 1359
            replace: serverDoc.document                                                                           // 1360
          });                                                                                                     // 1361
          // Call all flush callbacks.                                                                            // 1362
          _.each(serverDoc.flushCallbacks, function (c) {                                                         // 1363
            c();                                                                                                  // 1364
          });                                                                                                     // 1365
                                                                                                                  // 1366
          // Delete this completed serverDocument. Don't bother to GC empty                                       // 1367
          // IdMaps inside self._serverDocuments, since there probably aren't                                     // 1368
          // many collections and they'll be written repeatedly.                                                  // 1369
          self._serverDocuments[written.collection].remove(written.id);                                           // 1370
        }                                                                                                         // 1371
      });                                                                                                         // 1372
      delete self._documentsWrittenByStub[methodId];                                                              // 1373
                                                                                                                  // 1374
      // We want to call the data-written callback, but we can't do so until all                                  // 1375
      // currently buffered messages are flushed.                                                                 // 1376
      var callbackInvoker = self._methodInvokers[methodId];                                                       // 1377
      if (!callbackInvoker)                                                                                       // 1378
        throw new Error("No callback invoker for method " + methodId);                                            // 1379
      self._runWhenAllServerDocsAreFlushed(                                                                       // 1380
        _.bind(callbackInvoker.dataVisible, callbackInvoker));                                                    // 1381
    });                                                                                                           // 1382
  },                                                                                                              // 1383
                                                                                                                  // 1384
  _process_ready: function (msg, updates) {                                                                       // 1385
    var self = this;                                                                                              // 1386
    // Process "sub ready" messages. "sub ready" messages don't take effect                                       // 1387
    // until all current server documents have been flushed to the local                                          // 1388
    // database. We can use a write fence to implement this.                                                      // 1389
    _.each(msg.subs, function (subId) {                                                                           // 1390
      self._runWhenAllServerDocsAreFlushed(function () {                                                          // 1391
        var subRecord = self._subscriptions[subId];                                                               // 1392
        // Did we already unsubscribe?                                                                            // 1393
        if (!subRecord)                                                                                           // 1394
          return;                                                                                                 // 1395
        // Did we already receive a ready message? (Oops!)                                                        // 1396
        if (subRecord.ready)                                                                                      // 1397
          return;                                                                                                 // 1398
        subRecord.ready = true;                                                                                   // 1399
        subRecord.readyCallback && subRecord.readyCallback();                                                     // 1400
        subRecord.readyDeps.changed();                                                                            // 1401
      });                                                                                                         // 1402
    });                                                                                                           // 1403
  },                                                                                                              // 1404
                                                                                                                  // 1405
  // Ensures that "f" will be called after all documents currently in                                             // 1406
  // _serverDocuments have been written to the local cache. f will not be called                                  // 1407
  // if the connection is lost before then!                                                                       // 1408
  _runWhenAllServerDocsAreFlushed: function (f) {                                                                 // 1409
    var self = this;                                                                                              // 1410
    var runFAfterUpdates = function () {                                                                          // 1411
      self._afterUpdateCallbacks.push(f);                                                                         // 1412
    };                                                                                                            // 1413
    var unflushedServerDocCount = 0;                                                                              // 1414
    var onServerDocFlush = function () {                                                                          // 1415
      --unflushedServerDocCount;                                                                                  // 1416
      if (unflushedServerDocCount === 0) {                                                                        // 1417
        // This was the last doc to flush! Arrange to run f after the updates                                     // 1418
        // have been applied.                                                                                     // 1419
        runFAfterUpdates();                                                                                       // 1420
      }                                                                                                           // 1421
    };                                                                                                            // 1422
    _.each(self._serverDocuments, function (collectionDocs) {                                                     // 1423
      collectionDocs.forEach(function (serverDoc) {                                                               // 1424
        var writtenByStubForAMethodWithSentMessage = _.any(                                                       // 1425
          serverDoc.writtenByStubs, function (dummy, methodId) {                                                  // 1426
            var invoker = self._methodInvokers[methodId];                                                         // 1427
            return invoker && invoker.sentMessage;                                                                // 1428
          });                                                                                                     // 1429
        if (writtenByStubForAMethodWithSentMessage) {                                                             // 1430
          ++unflushedServerDocCount;                                                                              // 1431
          serverDoc.flushCallbacks.push(onServerDocFlush);                                                        // 1432
        }                                                                                                         // 1433
      });                                                                                                         // 1434
    });                                                                                                           // 1435
    if (unflushedServerDocCount === 0) {                                                                          // 1436
      // There aren't any buffered docs --- we can call f as soon as the current                                  // 1437
      // round of updates is applied!                                                                             // 1438
      runFAfterUpdates();                                                                                         // 1439
    }                                                                                                             // 1440
  },                                                                                                              // 1441
                                                                                                                  // 1442
  _livedata_nosub: function (msg) {                                                                               // 1443
    var self = this;                                                                                              // 1444
                                                                                                                  // 1445
    // First pass it through _livedata_data, which only uses it to help get                                       // 1446
    // towards quiescence.                                                                                        // 1447
    self._livedata_data(msg);                                                                                     // 1448
                                                                                                                  // 1449
    // Do the rest of our processing immediately, with no                                                         // 1450
    // buffering-until-quiescence.                                                                                // 1451
                                                                                                                  // 1452
    // we weren't subbed anyway, or we initiated the unsub.                                                       // 1453
    if (!_.has(self._subscriptions, msg.id))                                                                      // 1454
      return;                                                                                                     // 1455
                                                                                                                  // 1456
    // XXX COMPAT WITH 1.0.3.1 #errorCallback                                                                     // 1457
    var errorCallback = self._subscriptions[msg.id].errorCallback;                                                // 1458
    var stopCallback = self._subscriptions[msg.id].stopCallback;                                                  // 1459
                                                                                                                  // 1460
    self._subscriptions[msg.id].remove();                                                                         // 1461
                                                                                                                  // 1462
    var meteorErrorFromMsg = function (msgArg) {                                                                  // 1463
      return msgArg && msgArg.error && new Meteor.Error(                                                          // 1464
        msgArg.error.error, msgArg.error.reason, msgArg.error.details);                                           // 1465
    }                                                                                                             // 1466
                                                                                                                  // 1467
    // XXX COMPAT WITH 1.0.3.1 #errorCallback                                                                     // 1468
    if (errorCallback && msg.error) {                                                                             // 1469
      errorCallback(meteorErrorFromMsg(msg));                                                                     // 1470
    }                                                                                                             // 1471
                                                                                                                  // 1472
    if (stopCallback) {                                                                                           // 1473
      stopCallback(meteorErrorFromMsg(msg));                                                                      // 1474
    }                                                                                                             // 1475
  },                                                                                                              // 1476
                                                                                                                  // 1477
  _process_nosub: function () {                                                                                   // 1478
    // This is called as part of the "buffer until quiescence" process, but                                       // 1479
    // nosub's effect is always immediate. It only goes in the buffer at all                                      // 1480
    // because it's possible for a nosub to be the thing that triggers                                            // 1481
    // quiescence, if we were waiting for a sub to be revived and it dies                                         // 1482
    // instead.                                                                                                   // 1483
  },                                                                                                              // 1484
                                                                                                                  // 1485
  _livedata_result: function (msg) {                                                                              // 1486
    // id, result or error. error has error (code), reason, details                                               // 1487
                                                                                                                  // 1488
    var self = this;                                                                                              // 1489
                                                                                                                  // 1490
    // find the outstanding request                                                                               // 1491
    // should be O(1) in nearly all realistic use cases                                                           // 1492
    if (_.isEmpty(self._outstandingMethodBlocks)) {                                                               // 1493
      Meteor._debug("Received method result but no methods outstanding");                                         // 1494
      return;                                                                                                     // 1495
    }                                                                                                             // 1496
    var currentMethodBlock = self._outstandingMethodBlocks[0].methods;                                            // 1497
    var m;                                                                                                        // 1498
    for (var i = 0; i < currentMethodBlock.length; i++) {                                                         // 1499
      m = currentMethodBlock[i];                                                                                  // 1500
      if (m.methodId === msg.id)                                                                                  // 1501
        break;                                                                                                    // 1502
    }                                                                                                             // 1503
                                                                                                                  // 1504
    if (!m) {                                                                                                     // 1505
      Meteor._debug("Can't match method response to original method call", msg);                                  // 1506
      return;                                                                                                     // 1507
    }                                                                                                             // 1508
                                                                                                                  // 1509
    // Remove from current method block. This may leave the block empty, but we                                   // 1510
    // don't move on to the next block until the callback has been delivered, in                                  // 1511
    // _outstandingMethodFinished.                                                                                // 1512
    currentMethodBlock.splice(i, 1);                                                                              // 1513
                                                                                                                  // 1514
    if (_.has(msg, 'error')) {                                                                                    // 1515
      m.receiveResult(new Meteor.Error(                                                                           // 1516
        msg.error.error, msg.error.reason,                                                                        // 1517
        msg.error.details));                                                                                      // 1518
    } else {                                                                                                      // 1519
      // msg.result may be undefined if the method didn't return a                                                // 1520
      // value                                                                                                    // 1521
      m.receiveResult(undefined, msg.result);                                                                     // 1522
    }                                                                                                             // 1523
  },                                                                                                              // 1524
                                                                                                                  // 1525
  // Called by MethodInvoker after a method's callback is invoked.  If this was                                   // 1526
  // the last outstanding method in the current block, runs the next block. If                                    // 1527
  // there are no more methods, consider accepting a hot code push.                                               // 1528
  _outstandingMethodFinished: function () {                                                                       // 1529
    var self = this;                                                                                              // 1530
    if (self._anyMethodsAreOutstanding())                                                                         // 1531
      return;                                                                                                     // 1532
                                                                                                                  // 1533
    // No methods are outstanding. This should mean that the first block of                                       // 1534
    // methods is empty. (Or it might not exist, if this was a method that                                        // 1535
    // half-finished before disconnect/reconnect.)                                                                // 1536
    if (! _.isEmpty(self._outstandingMethodBlocks)) {                                                             // 1537
      var firstBlock = self._outstandingMethodBlocks.shift();                                                     // 1538
      if (! _.isEmpty(firstBlock.methods))                                                                        // 1539
        throw new Error("No methods outstanding but nonempty block: " +                                           // 1540
                        JSON.stringify(firstBlock));                                                              // 1541
                                                                                                                  // 1542
      // Send the outstanding methods now in the first block.                                                     // 1543
      if (!_.isEmpty(self._outstandingMethodBlocks))                                                              // 1544
        self._sendOutstandingMethods();                                                                           // 1545
    }                                                                                                             // 1546
                                                                                                                  // 1547
    // Maybe accept a hot code push.                                                                              // 1548
    self._maybeMigrate();                                                                                         // 1549
  },                                                                                                              // 1550
                                                                                                                  // 1551
  // Sends messages for all the methods in the first block in                                                     // 1552
  // _outstandingMethodBlocks.                                                                                    // 1553
  _sendOutstandingMethods: function() {                                                                           // 1554
    var self = this;                                                                                              // 1555
    if (_.isEmpty(self._outstandingMethodBlocks))                                                                 // 1556
      return;                                                                                                     // 1557
    _.each(self._outstandingMethodBlocks[0].methods, function (m) {                                               // 1558
      m.sendMessage();                                                                                            // 1559
    });                                                                                                           // 1560
  },                                                                                                              // 1561
                                                                                                                  // 1562
  _livedata_error: function (msg) {                                                                               // 1563
    Meteor._debug("Received error from server: ", msg.reason);                                                    // 1564
    if (msg.offendingMessage)                                                                                     // 1565
      Meteor._debug("For: ", msg.offendingMessage);                                                               // 1566
  },                                                                                                              // 1567
                                                                                                                  // 1568
  _callOnReconnectAndSendAppropriateOutstandingMethods: function() {                                              // 1569
    var self = this;                                                                                              // 1570
    var oldOutstandingMethodBlocks = self._outstandingMethodBlocks;                                               // 1571
    self._outstandingMethodBlocks = [];                                                                           // 1572
                                                                                                                  // 1573
    self.onReconnect();                                                                                           // 1574
                                                                                                                  // 1575
    if (_.isEmpty(oldOutstandingMethodBlocks))                                                                    // 1576
      return;                                                                                                     // 1577
                                                                                                                  // 1578
    // We have at least one block worth of old outstanding methods to try                                         // 1579
    // again. First: did onReconnect actually send anything? If not, we just                                      // 1580
    // restore all outstanding methods and run the first block.                                                   // 1581
    if (_.isEmpty(self._outstandingMethodBlocks)) {                                                               // 1582
      self._outstandingMethodBlocks = oldOutstandingMethodBlocks;                                                 // 1583
      self._sendOutstandingMethods();                                                                             // 1584
      return;                                                                                                     // 1585
    }                                                                                                             // 1586
                                                                                                                  // 1587
    // OK, there are blocks on both sides. Special case: merge the last block of                                  // 1588
    // the reconnect methods with the first block of the original methods, if                                     // 1589
    // neither of them are "wait" blocks.                                                                         // 1590
    if (!_.last(self._outstandingMethodBlocks).wait &&                                                            // 1591
        !oldOutstandingMethodBlocks[0].wait) {                                                                    // 1592
      _.each(oldOutstandingMethodBlocks[0].methods, function (m) {                                                // 1593
        _.last(self._outstandingMethodBlocks).methods.push(m);                                                    // 1594
                                                                                                                  // 1595
        // If this "last block" is also the first block, send the message.                                        // 1596
        if (self._outstandingMethodBlocks.length === 1)                                                           // 1597
          m.sendMessage();                                                                                        // 1598
      });                                                                                                         // 1599
                                                                                                                  // 1600
      oldOutstandingMethodBlocks.shift();                                                                         // 1601
    }                                                                                                             // 1602
                                                                                                                  // 1603
    // Now add the rest of the original blocks on.                                                                // 1604
    _.each(oldOutstandingMethodBlocks, function (block) {                                                         // 1605
      self._outstandingMethodBlocks.push(block);                                                                  // 1606
    });                                                                                                           // 1607
  },                                                                                                              // 1608
                                                                                                                  // 1609
  // We can accept a hot code push if there are no methods in flight.                                             // 1610
  _readyToMigrate: function() {                                                                                   // 1611
    var self = this;                                                                                              // 1612
    return _.isEmpty(self._methodInvokers);                                                                       // 1613
  },                                                                                                              // 1614
                                                                                                                  // 1615
  // If we were blocking a migration, see if it's now possible to continue.                                       // 1616
  // Call whenever the set of outstanding/blocked methods shrinks.                                                // 1617
  _maybeMigrate: function () {                                                                                    // 1618
    var self = this;                                                                                              // 1619
    if (self._retryMigrate && self._readyToMigrate()) {                                                           // 1620
      self._retryMigrate();                                                                                       // 1621
      self._retryMigrate = null;                                                                                  // 1622
    }                                                                                                             // 1623
  }                                                                                                               // 1624
});                                                                                                               // 1625
                                                                                                                  // 1626
LivedataTest.Connection = Connection;                                                                             // 1627
                                                                                                                  // 1628
// @param url {String} URL to Meteor app,                                                                         // 1629
//     e.g.:                                                                                                      // 1630
//     "subdomain.meteor.com",                                                                                    // 1631
//     "http://subdomain.meteor.com",                                                                             // 1632
//     "/",                                                                                                       // 1633
//     "ddp+sockjs://ddp--****-foo.meteor.com/sockjs"                                                             // 1634
                                                                                                                  // 1635
/**                                                                                                               // 1636
 * @summary Connect to the server of a different Meteor application to subscribe to its document sets and invoke its remote methods.
 * @locus Anywhere                                                                                                // 1638
 * @param {String} url The URL of another Meteor application.                                                     // 1639
 */                                                                                                               // 1640
DDP.connect = function (url, options) {                                                                           // 1641
  var ret = new Connection(url, options);                                                                         // 1642
  allConnections.push(ret); // hack. see below.                                                                   // 1643
  return ret;                                                                                                     // 1644
};                                                                                                                // 1645
                                                                                                                  // 1646
// Hack for `spiderable` package: a way to see if the page is done                                                // 1647
// loading all the data it needs.                                                                                 // 1648
//                                                                                                                // 1649
allConnections = [];                                                                                              // 1650
DDP._allSubscriptionsReady = function () {                                                                        // 1651
  return _.all(allConnections, function (conn) {                                                                  // 1652
    return _.all(conn._subscriptions, function (sub) {                                                            // 1653
      return sub.ready;                                                                                           // 1654
    });                                                                                                           // 1655
  });                                                                                                             // 1656
};                                                                                                                // 1657
                                                                                                                  // 1658
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                //
// packages/ddp-client/client_convenience.js                                                                      //
//                                                                                                                //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                  //
// Meteor.refresh can be called on the client (if you're in common code) but it                                   // 1
// only has an effect on the server.                                                                              // 2
Meteor.refresh = function (notification) {                                                                        // 3
};                                                                                                                // 4
                                                                                                                  // 5
if (Meteor.isClient) {                                                                                            // 6
  // By default, try to connect back to the same endpoint as the page                                             // 7
  // was served from.                                                                                             // 8
  //                                                                                                              // 9
  // XXX We should be doing this a different way. Right now we don't                                              // 10
  // include ROOT_URL_PATH_PREFIX when computing ddpUrl. (We don't                                                // 11
  // include it on the server when computing                                                                      // 12
  // DDP_DEFAULT_CONNECTION_URL, and we don't include it in our                                                   // 13
  // default, '/'.) We get by with this because DDP.connect then                                                  // 14
  // forces the URL passed to it to be interpreted relative to the                                                // 15
  // app's deploy path, even if it is absolute. Instead, we should                                                // 16
  // make DDP_DEFAULT_CONNECTION_URL, if set, include the path prefix;                                            // 17
  // make the default ddpUrl be '' rather that '/'; and make                                                      // 18
  // _translateUrl in stream_client_common.js not force absolute paths                                            // 19
  // to be treated like relative paths. See also                                                                  // 20
  // stream_client_common.js #RationalizingRelativeDDPURLs                                                        // 21
  var ddpUrl = '/';                                                                                               // 22
  if (typeof __meteor_runtime_config__ !== "undefined") {                                                         // 23
    if (__meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL)                                                     // 24
      ddpUrl = __meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL;                                              // 25
  }                                                                                                               // 26
                                                                                                                  // 27
  var retry = new Retry();                                                                                        // 28
                                                                                                                  // 29
  var onDDPVersionNegotiationFailure = function (description) {                                                   // 30
    Meteor._debug(description);                                                                                   // 31
    if (Package.reload) {                                                                                         // 32
      var migrationData = Package.reload.Reload._migrationData('livedata') || {};                                 // 33
      var failures = migrationData.DDPVersionNegotiationFailures || 0;                                            // 34
      ++failures;                                                                                                 // 35
      Package.reload.Reload._onMigrate('livedata', function () {                                                  // 36
        return [true, {DDPVersionNegotiationFailures: failures}];                                                 // 37
      });                                                                                                         // 38
      retry.retryLater(failures, function () {                                                                    // 39
        Package.reload.Reload._reload();                                                                          // 40
      });                                                                                                         // 41
    }                                                                                                             // 42
  };                                                                                                              // 43
                                                                                                                  // 44
  Meteor.connection =                                                                                             // 45
    DDP.connect(ddpUrl, {                                                                                         // 46
      onDDPVersionNegotiationFailure: onDDPVersionNegotiationFailure                                              // 47
    });                                                                                                           // 48
                                                                                                                  // 49
  // Proxy the public methods of Meteor.connection so they can                                                    // 50
  // be called directly on Meteor.                                                                                // 51
  _.each(['subscribe', 'methods', 'call', 'apply', 'status', 'reconnect',                                         // 52
          'disconnect'],                                                                                          // 53
         function (name) {                                                                                        // 54
           Meteor[name] = _.bind(Meteor.connection[name], Meteor.connection);                                     // 55
         });                                                                                                      // 56
} else {                                                                                                          // 57
  // Never set up a default connection on the server. Don't even map                                              // 58
  // subscribe/call/etc onto Meteor.                                                                              // 59
  Meteor.connection = null;                                                                                       // 60
}                                                                                                                 // 61
                                                                                                                  // 62
// Meteor.connection used to be called                                                                            // 63
// Meteor.default_connection. Provide backcompat as a courtesy even                                               // 64
// though it was never documented.                                                                                // 65
// XXX COMPAT WITH 0.6.4                                                                                          // 66
Meteor.default_connection = Meteor.connection;                                                                    // 67
                                                                                                                  // 68
// We should transition from Meteor.connect to DDP.connect.                                                       // 69
// XXX COMPAT WITH 0.6.4                                                                                          // 70
Meteor.connect = DDP.connect;                                                                                     // 71
                                                                                                                  // 72
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['ddp-client'] = {
  DDP: DDP,
  LivedataTest: LivedataTest
};

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var DDP = Package['ddp-client'].DDP;

/* Package-scope variables */
var DDP;



/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.ddp = {
  DDP: DDP
};

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var Random = Package.random.Random;
var EJSON = Package.ejson.EJSON;
var _ = Package.underscore._;
var LocalCollection = Package.minimongo.LocalCollection;
var Minimongo = Package.minimongo.Minimongo;
var DDP = Package['ddp-client'].DDP;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var DiffSequence = Package['diff-sequence'].DiffSequence;
var MongoID = Package['mongo-id'].MongoID;
var check = Package.check.check;
var Match = Package.check.Match;

/* Package-scope variables */
var LocalCollectionDriver, Mongo;

(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
// packages/mongo/local_collection_driver.js                                                                          //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                      //
LocalCollectionDriver = function () {                                                                                 // 1
  var self = this;                                                                                                    // 2
  self.noConnCollections = {};                                                                                        // 3
};                                                                                                                    // 4
                                                                                                                      // 5
var ensureCollection = function (name, collections) {                                                                 // 6
  if (!(name in collections))                                                                                         // 7
    collections[name] = new LocalCollection(name);                                                                    // 8
  return collections[name];                                                                                           // 9
};                                                                                                                    // 10
                                                                                                                      // 11
_.extend(LocalCollectionDriver.prototype, {                                                                           // 12
  open: function (name, conn) {                                                                                       // 13
    var self = this;                                                                                                  // 14
    if (!name)                                                                                                        // 15
      return new LocalCollection;                                                                                     // 16
    if (! conn) {                                                                                                     // 17
      return ensureCollection(name, self.noConnCollections);                                                          // 18
    }                                                                                                                 // 19
    if (! conn._mongo_livedata_collections)                                                                           // 20
      conn._mongo_livedata_collections = {};                                                                          // 21
    // XXX is there a way to keep track of a connection's collections without                                         // 22
    // dangling it off the connection object?                                                                         // 23
    return ensureCollection(name, conn._mongo_livedata_collections);                                                  // 24
  }                                                                                                                   // 25
});                                                                                                                   // 26
                                                                                                                      // 27
// singleton                                                                                                          // 28
LocalCollectionDriver = new LocalCollectionDriver;                                                                    // 29
                                                                                                                      // 30
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
// packages/mongo/collection.js                                                                                       //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                      //
// options.connection, if given, is a LivedataClient or LivedataServer                                                // 1
// XXX presently there is no way to destroy/clean up a Collection                                                     // 2
                                                                                                                      // 3
/**                                                                                                                   // 4
 * @summary Namespace for MongoDB-related items                                                                       // 5
 * @namespace                                                                                                         // 6
 */                                                                                                                   // 7
Mongo = {};                                                                                                           // 8
                                                                                                                      // 9
/**                                                                                                                   // 10
 * @summary Constructor for a Collection                                                                              // 11
 * @locus Anywhere                                                                                                    // 12
 * @instancename collection                                                                                           // 13
 * @class                                                                                                             // 14
 * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.
 * @param {Object} [options]                                                                                          // 16
 * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#ddp_connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.
 * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:
                                                                                                                      // 19
 - **`'STRING'`**: random strings                                                                                     // 20
 - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values                                                 // 21
                                                                                                                      // 22
The default id generation technique is `'STRING'`.                                                                    // 23
 * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOne`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.
 */                                                                                                                   // 25
Mongo.Collection = function (name, options) {                                                                         // 26
  var self = this;                                                                                                    // 27
  if (! (self instanceof Mongo.Collection))                                                                           // 28
    throw new Error('use "new" to construct a Mongo.Collection');                                                     // 29
                                                                                                                      // 30
  if (!name && (name !== null)) {                                                                                     // 31
    Meteor._debug("Warning: creating anonymous collection. It will not be " +                                         // 32
                  "saved or synchronized over the network. (Pass null for " +                                         // 33
                  "the collection name to turn off this warning.)");                                                  // 34
    name = null;                                                                                                      // 35
  }                                                                                                                   // 36
                                                                                                                      // 37
  if (name !== null && typeof name !== "string") {                                                                    // 38
    throw new Error(                                                                                                  // 39
      "First argument to new Mongo.Collection must be a string or null");                                             // 40
  }                                                                                                                   // 41
                                                                                                                      // 42
  if (options && options.methods) {                                                                                   // 43
    // Backwards compatibility hack with original signature (which passed                                             // 44
    // "connection" directly instead of in options. (Connections must have a "methods"                                // 45
    // method.)                                                                                                       // 46
    // XXX remove before 1.0                                                                                          // 47
    options = {connection: options};                                                                                  // 48
  }                                                                                                                   // 49
  // Backwards compatibility: "connection" used to be called "manager".                                               // 50
  if (options && options.manager && !options.connection) {                                                            // 51
    options.connection = options.manager;                                                                             // 52
  }                                                                                                                   // 53
  options = _.extend({                                                                                                // 54
    connection: undefined,                                                                                            // 55
    idGeneration: 'STRING',                                                                                           // 56
    transform: null,                                                                                                  // 57
    _driver: undefined,                                                                                               // 58
    _preventAutopublish: false                                                                                        // 59
  }, options);                                                                                                        // 60
                                                                                                                      // 61
  switch (options.idGeneration) {                                                                                     // 62
  case 'MONGO':                                                                                                       // 63
    self._makeNewID = function () {                                                                                   // 64
      var src = name                                                                                                  // 65
            ? DDP.randomStream('/collection/' + name)                                                                 // 66
            : Random.insecure;                                                                                        // 67
      return new Mongo.ObjectID(src.hexString(24));                                                                   // 68
    };                                                                                                                // 69
    break;                                                                                                            // 70
  case 'STRING':                                                                                                      // 71
  default:                                                                                                            // 72
    self._makeNewID = function () {                                                                                   // 73
      var src = name                                                                                                  // 74
            ? DDP.randomStream('/collection/' + name)                                                                 // 75
            : Random.insecure;                                                                                        // 76
      return src.id();                                                                                                // 77
    };                                                                                                                // 78
    break;                                                                                                            // 79
  }                                                                                                                   // 80
                                                                                                                      // 81
  self._transform = LocalCollection.wrapTransform(options.transform);                                                 // 82
                                                                                                                      // 83
  if (! name || options.connection === null)                                                                          // 84
    // note: nameless collections never have a connection                                                             // 85
    self._connection = null;                                                                                          // 86
  else if (options.connection)                                                                                        // 87
    self._connection = options.connection;                                                                            // 88
  else if (Meteor.isClient)                                                                                           // 89
    self._connection = Meteor.connection;                                                                             // 90
  else                                                                                                                // 91
    self._connection = Meteor.server;                                                                                 // 92
                                                                                                                      // 93
  if (!options._driver) {                                                                                             // 94
    // XXX This check assumes that webapp is loaded so that Meteor.server !==                                         // 95
    // null. We should fully support the case of "want to use a Mongo-backed                                          // 96
    // collection from Node code without webapp", but we don't yet.                                                   // 97
    // #MeteorServerNull                                                                                              // 98
    if (name && self._connection === Meteor.server &&                                                                 // 99
        typeof MongoInternals !== "undefined" &&                                                                      // 100
        MongoInternals.defaultRemoteCollectionDriver) {                                                               // 101
      options._driver = MongoInternals.defaultRemoteCollectionDriver();                                               // 102
    } else {                                                                                                          // 103
      options._driver = LocalCollectionDriver;                                                                        // 104
    }                                                                                                                 // 105
  }                                                                                                                   // 106
                                                                                                                      // 107
  self._collection = options._driver.open(name, self._connection);                                                    // 108
  self._name = name;                                                                                                  // 109
  self._driver = options._driver;                                                                                     // 110
                                                                                                                      // 111
  if (self._connection && self._connection.registerStore) {                                                           // 112
    // OK, we're going to be a slave, replicating some remote                                                         // 113
    // database, except possibly with some temporary divergence while                                                 // 114
    // we have unacknowledged RPC's.                                                                                  // 115
    var ok = self._connection.registerStore(name, {                                                                   // 116
      // Called at the beginning of a batch of updates. batchSize is the number                                       // 117
      // of update calls to expect.                                                                                   // 118
      //                                                                                                              // 119
      // XXX This interface is pretty janky. reset probably ought to go back to                                       // 120
      // being its own function, and callers shouldn't have to calculate                                              // 121
      // batchSize. The optimization of not calling pause/remove should be                                            // 122
      // delayed until later: the first call to update() should buffer its                                            // 123
      // message, and then we can either directly apply it at endUpdate time if                                       // 124
      // it was the only update, or do pauseObservers/apply/apply at the next                                         // 125
      // update() if there's another one.                                                                             // 126
      beginUpdate: function (batchSize, reset) {                                                                      // 127
        // pause observers so users don't see flicker when updating several                                           // 128
        // objects at once (including the post-reconnect reset-and-reapply                                            // 129
        // stage), and so that a re-sorting of a query can take advantage of the                                      // 130
        // full _diffQuery moved calculation instead of applying change one at a                                      // 131
        // time.                                                                                                      // 132
        if (batchSize > 1 || reset)                                                                                   // 133
          self._collection.pauseObservers();                                                                          // 134
                                                                                                                      // 135
        if (reset)                                                                                                    // 136
          self._collection.remove({});                                                                                // 137
      },                                                                                                              // 138
                                                                                                                      // 139
      // Apply an update.                                                                                             // 140
      // XXX better specify this interface (not in terms of a wire message)?                                          // 141
      update: function (msg) {                                                                                        // 142
        var mongoId = MongoID.idParse(msg.id);                                                                        // 143
        var doc = self._collection.findOne(mongoId);                                                                  // 144
                                                                                                                      // 145
        // Is this a "replace the whole doc" message coming from the quiescence                                       // 146
        // of method writes to an object? (Note that 'undefined' is a valid                                           // 147
        // value meaning "remove it".)                                                                                // 148
        if (msg.msg === 'replace') {                                                                                  // 149
          var replace = msg.replace;                                                                                  // 150
          if (!replace) {                                                                                             // 151
            if (doc)                                                                                                  // 152
              self._collection.remove(mongoId);                                                                       // 153
          } else if (!doc) {                                                                                          // 154
            self._collection.insert(replace);                                                                         // 155
          } else {                                                                                                    // 156
            // XXX check that replace has no $ ops                                                                    // 157
            self._collection.update(mongoId, replace);                                                                // 158
          }                                                                                                           // 159
          return;                                                                                                     // 160
        } else if (msg.msg === 'added') {                                                                             // 161
          if (doc) {                                                                                                  // 162
            throw new Error("Expected not to find a document already present for an add");                            // 163
          }                                                                                                           // 164
          self._collection.insert(_.extend({_id: mongoId}, msg.fields));                                              // 165
        } else if (msg.msg === 'removed') {                                                                           // 166
          if (!doc)                                                                                                   // 167
            throw new Error("Expected to find a document already present for removed");                               // 168
          self._collection.remove(mongoId);                                                                           // 169
        } else if (msg.msg === 'changed') {                                                                           // 170
          if (!doc)                                                                                                   // 171
            throw new Error("Expected to find a document to change");                                                 // 172
          if (!_.isEmpty(msg.fields)) {                                                                               // 173
            var modifier = {};                                                                                        // 174
            _.each(msg.fields, function (value, key) {                                                                // 175
              if (value === undefined) {                                                                              // 176
                if (!modifier.$unset)                                                                                 // 177
                  modifier.$unset = {};                                                                               // 178
                modifier.$unset[key] = 1;                                                                             // 179
              } else {                                                                                                // 180
                if (!modifier.$set)                                                                                   // 181
                  modifier.$set = {};                                                                                 // 182
                modifier.$set[key] = value;                                                                           // 183
              }                                                                                                       // 184
            });                                                                                                       // 185
            self._collection.update(mongoId, modifier);                                                               // 186
          }                                                                                                           // 187
        } else {                                                                                                      // 188
          throw new Error("I don't know how to deal with this message");                                              // 189
        }                                                                                                             // 190
                                                                                                                      // 191
      },                                                                                                              // 192
                                                                                                                      // 193
      // Called at the end of a batch of updates.                                                                     // 194
      endUpdate: function () {                                                                                        // 195
        self._collection.resumeObservers();                                                                           // 196
      },                                                                                                              // 197
                                                                                                                      // 198
      // Called around method stub invocations to capture the original versions                                       // 199
      // of modified documents.                                                                                       // 200
      saveOriginals: function () {                                                                                    // 201
        self._collection.saveOriginals();                                                                             // 202
      },                                                                                                              // 203
      retrieveOriginals: function () {                                                                                // 204
        return self._collection.retrieveOriginals();                                                                  // 205
      },                                                                                                              // 206
                                                                                                                      // 207
      // Used to preserve current versions of documents across a store reset.                                         // 208
      getDoc: function(id) {                                                                                          // 209
        return self.findOne(id);                                                                                      // 210
      },                                                                                                              // 211
    });                                                                                                               // 212
                                                                                                                      // 213
    if (!ok)                                                                                                          // 214
      throw new Error("There is already a collection named '" + name + "'");                                          // 215
  }                                                                                                                   // 216
                                                                                                                      // 217
  self._defineMutationMethods();                                                                                      // 218
                                                                                                                      // 219
  // autopublish                                                                                                      // 220
  if (Package.autopublish && !options._preventAutopublish && self._connection                                         // 221
      && self._connection.publish) {                                                                                  // 222
    self._connection.publish(null, function () {                                                                      // 223
      return self.find();                                                                                             // 224
    }, {is_auto: true});                                                                                              // 225
  }                                                                                                                   // 226
};                                                                                                                    // 227
                                                                                                                      // 228
///                                                                                                                   // 229
/// Main collection API                                                                                               // 230
///                                                                                                                   // 231
                                                                                                                      // 232
                                                                                                                      // 233
_.extend(Mongo.Collection.prototype, {                                                                                // 234
                                                                                                                      // 235
  _getFindSelector: function (args) {                                                                                 // 236
    if (args.length == 0)                                                                                             // 237
      return {};                                                                                                      // 238
    else                                                                                                              // 239
      return args[0];                                                                                                 // 240
  },                                                                                                                  // 241
                                                                                                                      // 242
  _getFindOptions: function (args) {                                                                                  // 243
    var self = this;                                                                                                  // 244
    if (args.length < 2) {                                                                                            // 245
      return { transform: self._transform };                                                                          // 246
    } else {                                                                                                          // 247
      check(args[1], Match.Optional(Match.ObjectIncluding({                                                           // 248
        fields: Match.Optional(Match.OneOf(Object, undefined)),                                                       // 249
        sort: Match.Optional(Match.OneOf(Object, Array, undefined)),                                                  // 250
        limit: Match.Optional(Match.OneOf(Number, undefined)),                                                        // 251
        skip: Match.Optional(Match.OneOf(Number, undefined))                                                          // 252
     })));                                                                                                            // 253
                                                                                                                      // 254
      return _.extend({                                                                                               // 255
        transform: self._transform                                                                                    // 256
      }, args[1]);                                                                                                    // 257
    }                                                                                                                 // 258
  },                                                                                                                  // 259
                                                                                                                      // 260
  /**                                                                                                                 // 261
   * @summary Find the documents in a collection that match the selector.                                             // 262
   * @locus Anywhere                                                                                                  // 263
   * @method find                                                                                                     // 264
   * @memberOf Mongo.Collection                                                                                       // 265
   * @instance                                                                                                        // 266
   * @param {MongoSelector} [selector] A query describing the documents to find                                       // 267
   * @param {Object} [options]                                                                                        // 268
   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)                                     // 269
   * @param {Number} options.skip Number of results to skip at the beginning                                          // 270
   * @param {Number} options.limit Maximum number of results to return                                                // 271
   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.                           // 272
   * @param {Boolean} options.reactive (Client only) Default `true`; pass `false` to disable reactivity               // 273
   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.
   * @returns {Mongo.Cursor}                                                                                          // 275
   */                                                                                                                 // 276
  find: function (/* selector, options */) {                                                                          // 277
    // Collection.find() (return all docs) behaves differently                                                        // 278
    // from Collection.find(undefined) (return 0 docs).  so be                                                        // 279
    // careful about the length of arguments.                                                                         // 280
    var self = this;                                                                                                  // 281
    var argArray = _.toArray(arguments);                                                                              // 282
    return self._collection.find(self._getFindSelector(argArray),                                                     // 283
                                 self._getFindOptions(argArray));                                                     // 284
  },                                                                                                                  // 285
                                                                                                                      // 286
  /**                                                                                                                 // 287
   * @summary Finds the first document that matches the selector, as ordered by sort and skip options.                // 288
   * @locus Anywhere                                                                                                  // 289
   * @method findOne                                                                                                  // 290
   * @memberOf Mongo.Collection                                                                                       // 291
   * @instance                                                                                                        // 292
   * @param {MongoSelector} [selector] A query describing the documents to find                                       // 293
   * @param {Object} [options]                                                                                        // 294
   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)                                     // 295
   * @param {Number} options.skip Number of results to skip at the beginning                                          // 296
   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.                           // 297
   * @param {Boolean} options.reactive (Client only) Default true; pass false to disable reactivity                   // 298
   * @param {Function} options.transform Overrides `transform` on the [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.
   * @returns {Object}                                                                                                // 300
   */                                                                                                                 // 301
  findOne: function (/* selector, options */) {                                                                       // 302
    var self = this;                                                                                                  // 303
    var argArray = _.toArray(arguments);                                                                              // 304
    return self._collection.findOne(self._getFindSelector(argArray),                                                  // 305
                                    self._getFindOptions(argArray));                                                  // 306
  }                                                                                                                   // 307
                                                                                                                      // 308
});                                                                                                                   // 309
                                                                                                                      // 310
Mongo.Collection._publishCursor = function (cursor, sub, collection) {                                                // 311
  var observeHandle = cursor.observeChanges({                                                                         // 312
    added: function (id, fields) {                                                                                    // 313
      sub.added(collection, id, fields);                                                                              // 314
    },                                                                                                                // 315
    changed: function (id, fields) {                                                                                  // 316
      sub.changed(collection, id, fields);                                                                            // 317
    },                                                                                                                // 318
    removed: function (id) {                                                                                          // 319
      sub.removed(collection, id);                                                                                    // 320
    }                                                                                                                 // 321
  });                                                                                                                 // 322
                                                                                                                      // 323
  // We don't call sub.ready() here: it gets called in livedata_server, after                                         // 324
  // possibly calling _publishCursor on multiple returned cursors.                                                    // 325
                                                                                                                      // 326
  // register stop callback (expects lambda w/ no args).                                                              // 327
  sub.onStop(function () {observeHandle.stop();});                                                                    // 328
};                                                                                                                    // 329
                                                                                                                      // 330
// protect against dangerous selectors.  falsey and {_id: falsey} are both                                            // 331
// likely programmer error, and not what you want, particularly for destructive                                       // 332
// operations.  JS regexps don't serialize over DDP but can be trivially                                              // 333
// replaced by $regex.                                                                                                // 334
Mongo.Collection._rewriteSelector = function (selector) {                                                             // 335
  // shorthand -- scalars match _id                                                                                   // 336
  if (LocalCollection._selectorIsId(selector))                                                                        // 337
    selector = {_id: selector};                                                                                       // 338
                                                                                                                      // 339
  if (_.isArray(selector)) {                                                                                          // 340
    // This is consistent with the Mongo console itself; if we don't do this                                          // 341
    // check passing an empty array ends up selecting all items                                                       // 342
    throw new Error("Mongo selector can't be an array.");                                                             // 343
  }                                                                                                                   // 344
                                                                                                                      // 345
  if (!selector || (('_id' in selector) && !selector._id))                                                            // 346
    // can't match anything                                                                                           // 347
    return {_id: Random.id()};                                                                                        // 348
                                                                                                                      // 349
  var ret = {};                                                                                                       // 350
  _.each(selector, function (value, key) {                                                                            // 351
    // Mongo supports both {field: /foo/} and {field: {$regex: /foo/}}                                                // 352
    if (value instanceof RegExp) {                                                                                    // 353
      ret[key] = convertRegexpToMongoSelector(value);                                                                 // 354
    } else if (value && value.$regex instanceof RegExp) {                                                             // 355
      ret[key] = convertRegexpToMongoSelector(value.$regex);                                                          // 356
      // if value is {$regex: /foo/, $options: ...} then $options                                                     // 357
      // override the ones set on $regex.                                                                             // 358
      if (value.$options !== undefined)                                                                               // 359
        ret[key].$options = value.$options;                                                                           // 360
    }                                                                                                                 // 361
    else if (_.contains(['$or','$and','$nor'], key)) {                                                                // 362
      // Translate lower levels of $and/$or/$nor                                                                      // 363
      ret[key] = _.map(value, function (v) {                                                                          // 364
        return Mongo.Collection._rewriteSelector(v);                                                                  // 365
      });                                                                                                             // 366
    } else {                                                                                                          // 367
      ret[key] = value;                                                                                               // 368
    }                                                                                                                 // 369
  });                                                                                                                 // 370
  return ret;                                                                                                         // 371
};                                                                                                                    // 372
                                                                                                                      // 373
// convert a JS RegExp object to a Mongo {$regex: ..., $options: ...}                                                 // 374
// selector                                                                                                           // 375
var convertRegexpToMongoSelector = function (regexp) {                                                                // 376
  check(regexp, RegExp); // safety belt                                                                               // 377
                                                                                                                      // 378
  var selector = {$regex: regexp.source};                                                                             // 379
  var regexOptions = '';                                                                                              // 380
  // JS RegExp objects support 'i', 'm', and 'g'. Mongo regex $options                                                // 381
  // support 'i', 'm', 'x', and 's'. So we support 'i' and 'm' here.                                                  // 382
  if (regexp.ignoreCase)                                                                                              // 383
    regexOptions += 'i';                                                                                              // 384
  if (regexp.multiline)                                                                                               // 385
    regexOptions += 'm';                                                                                              // 386
  if (regexOptions)                                                                                                   // 387
    selector.$options = regexOptions;                                                                                 // 388
                                                                                                                      // 389
  return selector;                                                                                                    // 390
};                                                                                                                    // 391
                                                                                                                      // 392
var throwIfSelectorIsNotId = function (selector, methodName) {                                                        // 393
  if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) {                                                      // 394
    throw new Meteor.Error(                                                                                           // 395
      403, "Not permitted. Untrusted code may only " + methodName +                                                   // 396
        " documents by ID.");                                                                                         // 397
  }                                                                                                                   // 398
};                                                                                                                    // 399
                                                                                                                      // 400
// 'insert' immediately returns the inserted document's new _id.                                                      // 401
// The others return values immediately if you are in a stub, an in-memory                                            // 402
// unmanaged collection, or a mongo-backed collection and you don't pass a                                            // 403
// callback. 'update' and 'remove' return the number of affected                                                      // 404
// documents. 'upsert' returns an object with keys 'numberAffected' and, if an                                        // 405
// insert happened, 'insertedId'.                                                                                     // 406
//                                                                                                                    // 407
// Otherwise, the semantics are exactly like other methods: they take                                                 // 408
// a callback as an optional last argument; if no callback is                                                         // 409
// provided, they block until the operation is complete, and throw an                                                 // 410
// exception if it fails; if a callback is provided, then they don't                                                  // 411
// necessarily block, and they call the callback when they finish with error and                                      // 412
// result arguments.  (The insert method provides the document ID as its result;                                      // 413
// update and remove provide the number of affected docs as the result; upsert                                        // 414
// provides an object with numberAffected and maybe insertedId.)                                                      // 415
//                                                                                                                    // 416
// On the client, blocking is impossible, so if a callback                                                            // 417
// isn't provided, they just return immediately and any error                                                         // 418
// information is lost.                                                                                               // 419
//                                                                                                                    // 420
// There's one more tweak. On the client, if you don't provide a                                                      // 421
// callback, then if there is an error, a message will be logged with                                                 // 422
// Meteor._debug.                                                                                                     // 423
//                                                                                                                    // 424
// The intent (though this is actually determined by the underlying                                                   // 425
// drivers) is that the operations should be done synchronously, not                                                  // 426
// generating their result until the database has acknowledged                                                        // 427
// them. In the future maybe we should provide a flag to turn this                                                    // 428
// off.                                                                                                               // 429
                                                                                                                      // 430
/**                                                                                                                   // 431
 * @summary Insert a document in the collection.  Returns its unique _id.                                             // 432
 * @locus Anywhere                                                                                                    // 433
 * @method  insert                                                                                                    // 434
 * @memberOf Mongo.Collection                                                                                         // 435
 * @instance                                                                                                          // 436
 * @param {Object} doc The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.
 * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.
 */                                                                                                                   // 439
                                                                                                                      // 440
/**                                                                                                                   // 441
 * @summary Modify one or more documents in the collection. Returns the number of affected documents.                 // 442
 * @locus Anywhere                                                                                                    // 443
 * @method update                                                                                                     // 444
 * @memberOf Mongo.Collection                                                                                         // 445
 * @instance                                                                                                          // 446
 * @param {MongoSelector} selector Specifies which documents to modify                                                // 447
 * @param {MongoModifier} modifier Specifies how to modify the documents                                              // 448
 * @param {Object} [options]                                                                                          // 449
 * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).
 * @param {Boolean} options.upsert True to insert a document if no matching documents are found.                      // 451
 * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.
 */                                                                                                                   // 453
                                                                                                                      // 454
/**                                                                                                                   // 455
 * @summary Remove documents from the collection                                                                      // 456
 * @locus Anywhere                                                                                                    // 457
 * @method remove                                                                                                     // 458
 * @memberOf Mongo.Collection                                                                                         // 459
 * @instance                                                                                                          // 460
 * @param {MongoSelector} selector Specifies which documents to remove                                                // 461
 * @param {Function} [callback] Optional.  If present, called with an error object as its argument.                   // 462
 */                                                                                                                   // 463
                                                                                                                      // 464
_.each(["insert", "update", "remove"], function (name) {                                                              // 465
  Mongo.Collection.prototype[name] = function (/* arguments */) {                                                     // 466
    var self = this;                                                                                                  // 467
    var args = _.toArray(arguments);                                                                                  // 468
    var callback;                                                                                                     // 469
    var insertId;                                                                                                     // 470
    var ret;                                                                                                          // 471
                                                                                                                      // 472
    // Pull off any callback (or perhaps a 'callback' variable that was passed                                        // 473
    // in undefined, like how 'upsert' does it).                                                                      // 474
    if (args.length &&                                                                                                // 475
        (args[args.length - 1] === undefined ||                                                                       // 476
         args[args.length - 1] instanceof Function)) {                                                                // 477
      callback = args.pop();                                                                                          // 478
    }                                                                                                                 // 479
                                                                                                                      // 480
    if (name === "insert") {                                                                                          // 481
      if (!args.length)                                                                                               // 482
        throw new Error("insert requires an argument");                                                               // 483
      // shallow-copy the document and generate an ID                                                                 // 484
      args[0] = _.extend({}, args[0]);                                                                                // 485
      if ('_id' in args[0]) {                                                                                         // 486
        insertId = args[0]._id;                                                                                       // 487
        if (!insertId || !(typeof insertId === 'string'                                                               // 488
              || insertId instanceof Mongo.ObjectID))                                                                 // 489
          throw new Error("Meteor requires document _id fields to be non-empty strings or ObjectIDs");                // 490
      } else {                                                                                                        // 491
        var generateId = true;                                                                                        // 492
        // Don't generate the id if we're the client and the 'outermost' call                                         // 493
        // This optimization saves us passing both the randomSeed and the id                                          // 494
        // Passing both is redundant.                                                                                 // 495
        if (self._connection && self._connection !== Meteor.server) {                                                 // 496
          var enclosing = DDP._CurrentInvocation.get();                                                               // 497
          if (!enclosing) {                                                                                           // 498
            generateId = false;                                                                                       // 499
          }                                                                                                           // 500
        }                                                                                                             // 501
        if (generateId) {                                                                                             // 502
          insertId = args[0]._id = self._makeNewID();                                                                 // 503
        }                                                                                                             // 504
      }                                                                                                               // 505
    } else {                                                                                                          // 506
      args[0] = Mongo.Collection._rewriteSelector(args[0]);                                                           // 507
                                                                                                                      // 508
      if (name === "update") {                                                                                        // 509
        // Mutate args but copy the original options object. We need to add                                           // 510
        // insertedId to options, but don't want to mutate the caller's options                                       // 511
        // object. We need to mutate `args` because we pass `args` into the                                           // 512
        // driver below.                                                                                              // 513
        var options = args[2] = _.clone(args[2]) || {};                                                               // 514
        if (options && typeof options !== "function" && options.upsert) {                                             // 515
          // set `insertedId` if absent.  `insertedId` is a Meteor extension.                                         // 516
          if (options.insertedId) {                                                                                   // 517
            if (!(typeof options.insertedId === 'string'                                                              // 518
                  || options.insertedId instanceof Mongo.ObjectID))                                                   // 519
              throw new Error("insertedId must be string or ObjectID");                                               // 520
          } else if (! args[0]._id) {                                                                                 // 521
            options.insertedId = self._makeNewID();                                                                   // 522
          }                                                                                                           // 523
        }                                                                                                             // 524
      }                                                                                                               // 525
    }                                                                                                                 // 526
                                                                                                                      // 527
    // On inserts, always return the id that we generated; on all other                                               // 528
    // operations, just return the result from the collection.                                                        // 529
    var chooseReturnValueFromCollectionResult = function (result) {                                                   // 530
      if (name === "insert") {                                                                                        // 531
        if (!insertId && result) {                                                                                    // 532
          insertId = result;                                                                                          // 533
        }                                                                                                             // 534
        return insertId;                                                                                              // 535
      } else {                                                                                                        // 536
        return result;                                                                                                // 537
      }                                                                                                               // 538
    };                                                                                                                // 539
                                                                                                                      // 540
    var wrappedCallback;                                                                                              // 541
    if (callback) {                                                                                                   // 542
      wrappedCallback = function (error, result) {                                                                    // 543
        callback(error, ! error && chooseReturnValueFromCollectionResult(result));                                    // 544
      };                                                                                                              // 545
    }                                                                                                                 // 546
                                                                                                                      // 547
    // XXX see #MeteorServerNull                                                                                      // 548
    if (self._connection && self._connection !== Meteor.server) {                                                     // 549
      // just remote to another endpoint, propagate return value or                                                   // 550
      // exception.                                                                                                   // 551
                                                                                                                      // 552
      var enclosing = DDP._CurrentInvocation.get();                                                                   // 553
      var alreadyInSimulation = enclosing && enclosing.isSimulation;                                                  // 554
                                                                                                                      // 555
      if (Meteor.isClient && !wrappedCallback && ! alreadyInSimulation) {                                             // 556
        // Client can't block, so it can't report errors by exception,                                                // 557
        // only by callback. If they forget the callback, give them a                                                 // 558
        // default one that logs the error, so they aren't totally                                                    // 559
        // baffled if their writes don't work because their database is                                               // 560
        // down.                                                                                                      // 561
        // Don't give a default callback in simulation, because inside stubs we                                       // 562
        // want to return the results from the local collection immediately and                                       // 563
        // not force a callback.                                                                                      // 564
        wrappedCallback = function (err) {                                                                            // 565
          if (err)                                                                                                    // 566
            Meteor._debug(name + " failed: " + (err.reason || err.stack));                                            // 567
        };                                                                                                            // 568
      }                                                                                                               // 569
                                                                                                                      // 570
      if (!alreadyInSimulation && name !== "insert") {                                                                // 571
        // If we're about to actually send an RPC, we should throw an error if                                        // 572
        // this is a non-ID selector, because the mutation methods only allow                                         // 573
        // single-ID selectors. (If we don't throw here, we'll see flicker.)                                          // 574
        throwIfSelectorIsNotId(args[0], name);                                                                        // 575
      }                                                                                                               // 576
                                                                                                                      // 577
      ret = chooseReturnValueFromCollectionResult(                                                                    // 578
        self._connection.apply(self._prefix + name, args, {returnStubValue: true}, wrappedCallback)                   // 579
      );                                                                                                              // 580
                                                                                                                      // 581
    } else {                                                                                                          // 582
      // it's my collection.  descend into the collection object                                                      // 583
      // and propagate any exception.                                                                                 // 584
      args.push(wrappedCallback);                                                                                     // 585
      try {                                                                                                           // 586
        // If the user provided a callback and the collection implements this                                         // 587
        // operation asynchronously, then queryRet will be undefined, and the                                         // 588
        // result will be returned through the callback instead.                                                      // 589
        var queryRet = self._collection[name].apply(self._collection, args);                                          // 590
        ret = chooseReturnValueFromCollectionResult(queryRet);                                                        // 591
      } catch (e) {                                                                                                   // 592
        if (callback) {                                                                                               // 593
          callback(e);                                                                                                // 594
          return null;                                                                                                // 595
        }                                                                                                             // 596
        throw e;                                                                                                      // 597
      }                                                                                                               // 598
    }                                                                                                                 // 599
                                                                                                                      // 600
    // both sync and async, unless we threw an exception, return ret                                                  // 601
    // (new document ID for insert, num affected for update/remove, object with                                       // 602
    // numberAffected and maybe insertedId for upsert).                                                               // 603
    return ret;                                                                                                       // 604
  };                                                                                                                  // 605
});                                                                                                                   // 606
                                                                                                                      // 607
/**                                                                                                                   // 608
 * @summary Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any).
 * @locus Anywhere                                                                                                    // 610
 * @param {MongoSelector} selector Specifies which documents to modify                                                // 611
 * @param {MongoModifier} modifier Specifies how to modify the documents                                              // 612
 * @param {Object} [options]                                                                                          // 613
 * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).
 * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.
 */                                                                                                                   // 616
Mongo.Collection.prototype.upsert = function (selector, modifier,                                                     // 617
                                               options, callback) {                                                   // 618
  var self = this;                                                                                                    // 619
  if (! callback && typeof options === "function") {                                                                  // 620
    callback = options;                                                                                               // 621
    options = {};                                                                                                     // 622
  }                                                                                                                   // 623
  return self.update(selector, modifier,                                                                              // 624
              _.extend({}, options, { _returnObject: true, upsert: true }),                                           // 625
              callback);                                                                                              // 626
};                                                                                                                    // 627
                                                                                                                      // 628
// We'll actually design an index API later. For now, we just pass through to                                         // 629
// Mongo's, but make it synchronous.                                                                                  // 630
Mongo.Collection.prototype._ensureIndex = function (index, options) {                                                 // 631
  var self = this;                                                                                                    // 632
  if (!self._collection._ensureIndex)                                                                                 // 633
    throw new Error("Can only call _ensureIndex on server collections");                                              // 634
  self._collection._ensureIndex(index, options);                                                                      // 635
};                                                                                                                    // 636
Mongo.Collection.prototype._dropIndex = function (index) {                                                            // 637
  var self = this;                                                                                                    // 638
  if (!self._collection._dropIndex)                                                                                   // 639
    throw new Error("Can only call _dropIndex on server collections");                                                // 640
  self._collection._dropIndex(index);                                                                                 // 641
};                                                                                                                    // 642
Mongo.Collection.prototype._dropCollection = function () {                                                            // 643
  var self = this;                                                                                                    // 644
  if (!self._collection.dropCollection)                                                                               // 645
    throw new Error("Can only call _dropCollection on server collections");                                           // 646
  self._collection.dropCollection();                                                                                  // 647
};                                                                                                                    // 648
Mongo.Collection.prototype._createCappedCollection = function (byteSize, maxDocuments) {                              // 649
  var self = this;                                                                                                    // 650
  if (!self._collection._createCappedCollection)                                                                      // 651
    throw new Error("Can only call _createCappedCollection on server collections");                                   // 652
  self._collection._createCappedCollection(byteSize, maxDocuments);                                                   // 653
};                                                                                                                    // 654
                                                                                                                      // 655
/**                                                                                                                   // 656
 * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/1.4/api-generated/collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.
 * @locus Server                                                                                                      // 658
 */                                                                                                                   // 659
Mongo.Collection.prototype.rawCollection = function () {                                                              // 660
  var self = this;                                                                                                    // 661
  if (! self._collection.rawCollection) {                                                                             // 662
    throw new Error("Can only call rawCollection on server collections");                                             // 663
  }                                                                                                                   // 664
  return self._collection.rawCollection();                                                                            // 665
};                                                                                                                    // 666
                                                                                                                      // 667
/**                                                                                                                   // 668
 * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/1.4/api-generated/db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.
 * @locus Server                                                                                                      // 670
 */                                                                                                                   // 671
Mongo.Collection.prototype.rawDatabase = function () {                                                                // 672
  var self = this;                                                                                                    // 673
  if (! (self._driver.mongo && self._driver.mongo.db)) {                                                              // 674
    throw new Error("Can only call rawDatabase on server collections");                                               // 675
  }                                                                                                                   // 676
  return self._driver.mongo.db;                                                                                       // 677
};                                                                                                                    // 678
                                                                                                                      // 679
                                                                                                                      // 680
/**                                                                                                                   // 681
 * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules).
 * @locus Anywhere                                                                                                    // 683
 * @class                                                                                                             // 684
 * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create             // 685
 */                                                                                                                   // 686
Mongo.ObjectID = MongoID.ObjectID;                                                                                    // 687
                                                                                                                      // 688
/**                                                                                                                   // 689
 * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.            // 690
 * @class                                                                                                             // 691
 * @instanceName cursor                                                                                               // 692
 */                                                                                                                   // 693
Mongo.Cursor = LocalCollection.Cursor;                                                                                // 694
                                                                                                                      // 695
/**                                                                                                                   // 696
 * @deprecated in 0.9.1                                                                                               // 697
 */                                                                                                                   // 698
Mongo.Collection.Cursor = Mongo.Cursor;                                                                               // 699
                                                                                                                      // 700
/**                                                                                                                   // 701
 * @deprecated in 0.9.1                                                                                               // 702
 */                                                                                                                   // 703
Mongo.Collection.ObjectID = Mongo.ObjectID;                                                                           // 704
                                                                                                                      // 705
///                                                                                                                   // 706
/// Remote methods and access control.                                                                                // 707
///                                                                                                                   // 708
                                                                                                                      // 709
// Restrict default mutators on collection. allow() and deny() take the                                               // 710
// same options:                                                                                                      // 711
//                                                                                                                    // 712
// options.insert {Function(userId, doc)}                                                                             // 713
//   return true to allow/deny adding this document                                                                   // 714
//                                                                                                                    // 715
// options.update {Function(userId, docs, fields, modifier)}                                                          // 716
//   return true to allow/deny updating these documents.                                                              // 717
//   `fields` is passed as an array of fields that are to be modified                                                 // 718
//                                                                                                                    // 719
// options.remove {Function(userId, docs)}                                                                            // 720
//   return true to allow/deny removing these documents                                                               // 721
//                                                                                                                    // 722
// options.fetch {Array}                                                                                              // 723
//   Fields to fetch for these validators. If any call to allow or deny                                               // 724
//   does not have this option then all fields are loaded.                                                            // 725
//                                                                                                                    // 726
// allow and deny can be called multiple times. The validators are                                                    // 727
// evaluated as follows:                                                                                              // 728
// - If neither deny() nor allow() has been called on the collection,                                                 // 729
//   then the request is allowed if and only if the "insecure" smart                                                  // 730
//   package is in use.                                                                                               // 731
// - Otherwise, if any deny() function returns true, the request is denied.                                           // 732
// - Otherwise, if any allow() function returns true, the request is allowed.                                         // 733
// - Otherwise, the request is denied.                                                                                // 734
//                                                                                                                    // 735
// Meteor may call your deny() and allow() functions in any order, and may not                                        // 736
// call all of them if it is able to make a decision without calling them all                                         // 737
// (so don't include side effects).                                                                                   // 738
                                                                                                                      // 739
(function () {                                                                                                        // 740
  var addValidator = function(allowOrDeny, options) {                                                                 // 741
    // validate keys                                                                                                  // 742
    var VALID_KEYS = ['insert', 'update', 'remove', 'fetch', 'transform'];                                            // 743
    _.each(_.keys(options), function (key) {                                                                          // 744
      if (!_.contains(VALID_KEYS, key))                                                                               // 745
        throw new Error(allowOrDeny + ": Invalid key: " + key);                                                       // 746
    });                                                                                                               // 747
                                                                                                                      // 748
    var self = this;                                                                                                  // 749
    self._restricted = true;                                                                                          // 750
                                                                                                                      // 751
    _.each(['insert', 'update', 'remove'], function (name) {                                                          // 752
      if (options.hasOwnProperty(name)) {                                                                             // 753
        if (!(options[name] instanceof Function)) {                                                                   // 754
          throw new Error(allowOrDeny + ": Value for `" + name + "` must be a function");                             // 755
        }                                                                                                             // 756
                                                                                                                      // 757
        // If the transform is specified at all (including as 'null') in this                                         // 758
        // call, then take that; otherwise, take the transform from the                                               // 759
        // collection.                                                                                                // 760
        if (options.transform === undefined) {                                                                        // 761
          options[name].transform = self._transform;  // already wrapped                                              // 762
        } else {                                                                                                      // 763
          options[name].transform = LocalCollection.wrapTransform(                                                    // 764
            options.transform);                                                                                       // 765
        }                                                                                                             // 766
                                                                                                                      // 767
        self._validators[name][allowOrDeny].push(options[name]);                                                      // 768
      }                                                                                                               // 769
    });                                                                                                               // 770
                                                                                                                      // 771
    // Only update the fetch fields if we're passed things that affect                                                // 772
    // fetching. This way allow({}) and allow({insert: f}) don't result in                                            // 773
    // setting fetchAllFields                                                                                         // 774
    if (options.update || options.remove || options.fetch) {                                                          // 775
      if (options.fetch && !(options.fetch instanceof Array)) {                                                       // 776
        throw new Error(allowOrDeny + ": Value for `fetch` must be an array");                                        // 777
      }                                                                                                               // 778
      self._updateFetch(options.fetch);                                                                               // 779
    }                                                                                                                 // 780
  };                                                                                                                  // 781
                                                                                                                      // 782
  /**                                                                                                                 // 783
   * @summary Allow users to write directly to this collection from client code, subject to limitations you define.   // 784
   * @locus Server                                                                                                    // 785
   * @param {Object} options                                                                                          // 786
   * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be allowed.
   * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.
   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.
   */                                                                                                                 // 790
  Mongo.Collection.prototype.allow = function(options) {                                                              // 791
    addValidator.call(this, 'allow', options);                                                                        // 792
  };                                                                                                                  // 793
                                                                                                                      // 794
  /**                                                                                                                 // 795
   * @summary Override `allow` rules.                                                                                 // 796
   * @locus Server                                                                                                    // 797
   * @param {Object} options                                                                                          // 798
   * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be denied, even if an [allow](#allow) rule says otherwise.
   * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.
   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.
   */                                                                                                                 // 802
  Mongo.Collection.prototype.deny = function(options) {                                                               // 803
    addValidator.call(this, 'deny', options);                                                                         // 804
  };                                                                                                                  // 805
})();                                                                                                                 // 806
                                                                                                                      // 807
                                                                                                                      // 808
Mongo.Collection.prototype._defineMutationMethods = function() {                                                      // 809
  var self = this;                                                                                                    // 810
                                                                                                                      // 811
  // set to true once we call any allow or deny methods. If true, use                                                 // 812
  // allow/deny semantics. If false, use insecure mode semantics.                                                     // 813
  self._restricted = false;                                                                                           // 814
                                                                                                                      // 815
  // Insecure mode (default to allowing writes). Defaults to 'undefined' which                                        // 816
  // means insecure iff the insecure package is loaded. This property can be                                          // 817
  // overriden by tests or packages wishing to change insecure mode behavior of                                       // 818
  // their collections.                                                                                               // 819
  self._insecure = undefined;                                                                                         // 820
                                                                                                                      // 821
  self._validators = {                                                                                                // 822
    insert: {allow: [], deny: []},                                                                                    // 823
    update: {allow: [], deny: []},                                                                                    // 824
    remove: {allow: [], deny: []},                                                                                    // 825
    upsert: {allow: [], deny: []}, // dummy arrays; can't set these!                                                  // 826
    fetch: [],                                                                                                        // 827
    fetchAllFields: false                                                                                             // 828
  };                                                                                                                  // 829
                                                                                                                      // 830
  if (!self._name)                                                                                                    // 831
    return; // anonymous collection                                                                                   // 832
                                                                                                                      // 833
  // XXX Think about method namespacing. Maybe methods should be                                                      // 834
  // "Meteor:Mongo:insert/NAME"?                                                                                      // 835
  self._prefix = '/' + self._name + '/';                                                                              // 836
                                                                                                                      // 837
  // mutation methods                                                                                                 // 838
  if (self._connection) {                                                                                             // 839
    var m = {};                                                                                                       // 840
                                                                                                                      // 841
    _.each(['insert', 'update', 'remove'], function (method) {                                                        // 842
      m[self._prefix + method] = function (/* ... */) {                                                               // 843
        // All the methods do their own validation, instead of using check().                                         // 844
        check(arguments, [Match.Any]);                                                                                // 845
        var args = _.toArray(arguments);                                                                              // 846
        try {                                                                                                         // 847
          // For an insert, if the client didn't specify an _id, generate one                                         // 848
          // now; because this uses DDP.randomStream, it will be consistent with                                      // 849
          // what the client generated. We generate it now rather than later so                                       // 850
          // that if (eg) an allow/deny rule does an insert to the same                                               // 851
          // collection (not that it really should), the generated _id will                                           // 852
          // still be the first use of the stream and will be consistent.                                             // 853
          //                                                                                                          // 854
          // However, we don't actually stick the _id onto the document yet,                                          // 855
          // because we want allow/deny rules to be able to differentiate                                             // 856
          // between arbitrary client-specified _id fields and merely                                                 // 857
          // client-controlled-via-randomSeed fields.                                                                 // 858
          var generatedId = null;                                                                                     // 859
          if (method === "insert" && !_.has(args[0], '_id')) {                                                        // 860
            generatedId = self._makeNewID();                                                                          // 861
          }                                                                                                           // 862
                                                                                                                      // 863
          if (this.isSimulation) {                                                                                    // 864
            // In a client simulation, you can do any mutation (even with a                                           // 865
            // complex selector).                                                                                     // 866
            if (generatedId !== null)                                                                                 // 867
              args[0]._id = generatedId;                                                                              // 868
            return self._collection[method].apply(                                                                    // 869
              self._collection, args);                                                                                // 870
          }                                                                                                           // 871
                                                                                                                      // 872
          // This is the server receiving a method call from the client.                                              // 873
                                                                                                                      // 874
          // We don't allow arbitrary selectors in mutations from the client: only                                    // 875
          // single-ID selectors.                                                                                     // 876
          if (method !== 'insert')                                                                                    // 877
            throwIfSelectorIsNotId(args[0], method);                                                                  // 878
                                                                                                                      // 879
          if (self._restricted) {                                                                                     // 880
            // short circuit if there is no way it will pass.                                                         // 881
            if (self._validators[method].allow.length === 0) {                                                        // 882
              throw new Meteor.Error(                                                                                 // 883
                403, "Access denied. No allow validators set on restricted " +                                        // 884
                  "collection for method '" + method + "'.");                                                         // 885
            }                                                                                                         // 886
                                                                                                                      // 887
            var validatedMethodName =                                                                                 // 888
                  '_validated' + method.charAt(0).toUpperCase() + method.slice(1);                                    // 889
            args.unshift(this.userId);                                                                                // 890
            method === 'insert' && args.push(generatedId);                                                            // 891
            return self[validatedMethodName].apply(self, args);                                                       // 892
          } else if (self._isInsecure()) {                                                                            // 893
            if (generatedId !== null)                                                                                 // 894
              args[0]._id = generatedId;                                                                              // 895
            // In insecure mode, allow any mutation (with a simple selector).                                         // 896
            // XXX This is kind of bogus.  Instead of blindly passing whatever                                        // 897
            //     we get from the network to this function, we should actually                                       // 898
            //     know the correct arguments for the function and pass just                                          // 899
            //     them.  For example, if you have an extraneous extra null                                           // 900
            //     argument and this is Mongo on the server, the .wrapAsync'd                                         // 901
            //     functions like update will get confused and pass the                                               // 902
            //     "fut.resolver()" in the wrong slot, where _update will never                                       // 903
            //     invoke it. Bam, broken DDP connection.  Probably should just                                       // 904
            //     take this whole method and write it three times, invoking                                          // 905
            //     helpers for the common code.                                                                       // 906
            return self._collection[method].apply(self._collection, args);                                            // 907
          } else {                                                                                                    // 908
            // In secure mode, if we haven't called allow or deny, then nothing                                       // 909
            // is permitted.                                                                                          // 910
            throw new Meteor.Error(403, "Access denied");                                                             // 911
          }                                                                                                           // 912
        } catch (e) {                                                                                                 // 913
          if (e.name === 'MongoError' || e.name === 'MinimongoError') {                                               // 914
            throw new Meteor.Error(409, e.toString());                                                                // 915
          } else {                                                                                                    // 916
            throw e;                                                                                                  // 917
          }                                                                                                           // 918
        }                                                                                                             // 919
      };                                                                                                              // 920
    });                                                                                                               // 921
    // Minimongo on the server gets no stubs; instead, by default                                                     // 922
    // it wait()s until its result is ready, yielding.                                                                // 923
    // This matches the behavior of macromongo on the server better.                                                  // 924
    // XXX see #MeteorServerNull                                                                                      // 925
    if (Meteor.isClient || self._connection === Meteor.server)                                                        // 926
      self._connection.methods(m);                                                                                    // 927
  }                                                                                                                   // 928
};                                                                                                                    // 929
                                                                                                                      // 930
                                                                                                                      // 931
Mongo.Collection.prototype._updateFetch = function (fields) {                                                         // 932
  var self = this;                                                                                                    // 933
                                                                                                                      // 934
  if (!self._validators.fetchAllFields) {                                                                             // 935
    if (fields) {                                                                                                     // 936
      self._validators.fetch = _.union(self._validators.fetch, fields);                                               // 937
    } else {                                                                                                          // 938
      self._validators.fetchAllFields = true;                                                                         // 939
      // clear fetch just to make sure we don't accidentally read it                                                  // 940
      self._validators.fetch = null;                                                                                  // 941
    }                                                                                                                 // 942
  }                                                                                                                   // 943
};                                                                                                                    // 944
                                                                                                                      // 945
Mongo.Collection.prototype._isInsecure = function () {                                                                // 946
  var self = this;                                                                                                    // 947
  if (self._insecure === undefined)                                                                                   // 948
    return !!Package.insecure;                                                                                        // 949
  return self._insecure;                                                                                              // 950
};                                                                                                                    // 951
                                                                                                                      // 952
var docToValidate = function (validator, doc, generatedId) {                                                          // 953
  var ret = doc;                                                                                                      // 954
  if (validator.transform) {                                                                                          // 955
    ret = EJSON.clone(doc);                                                                                           // 956
    // If you set a server-side transform on your collection, then you don't get                                      // 957
    // to tell the difference between "client specified the ID" and "server                                           // 958
    // generated the ID", because transforms expect to get _id.  If you want to                                       // 959
    // do that check, you can do it with a specific                                                                   // 960
    // `C.allow({insert: f, transform: null})` validator.                                                             // 961
    if (generatedId !== null) {                                                                                       // 962
      ret._id = generatedId;                                                                                          // 963
    }                                                                                                                 // 964
    ret = validator.transform(ret);                                                                                   // 965
  }                                                                                                                   // 966
  return ret;                                                                                                         // 967
};                                                                                                                    // 968
                                                                                                                      // 969
Mongo.Collection.prototype._validatedInsert = function (userId, doc,                                                  // 970
                                                         generatedId) {                                               // 971
  var self = this;                                                                                                    // 972
                                                                                                                      // 973
  // call user validators.                                                                                            // 974
  // Any deny returns true means denied.                                                                              // 975
  if (_.any(self._validators.insert.deny, function(validator) {                                                       // 976
    return validator(userId, docToValidate(validator, doc, generatedId));                                             // 977
  })) {                                                                                                               // 978
    throw new Meteor.Error(403, "Access denied");                                                                     // 979
  }                                                                                                                   // 980
  // Any allow returns true means proceed. Throw error if they all fail.                                              // 981
  if (_.all(self._validators.insert.allow, function(validator) {                                                      // 982
    return !validator(userId, docToValidate(validator, doc, generatedId));                                            // 983
  })) {                                                                                                               // 984
    throw new Meteor.Error(403, "Access denied");                                                                     // 985
  }                                                                                                                   // 986
                                                                                                                      // 987
  // If we generated an ID above, insert it now: after the validation, but                                            // 988
  // before actually inserting.                                                                                       // 989
  if (generatedId !== null)                                                                                           // 990
    doc._id = generatedId;                                                                                            // 991
                                                                                                                      // 992
  self._collection.insert.call(self._collection, doc);                                                                // 993
};                                                                                                                    // 994
                                                                                                                      // 995
var transformDoc = function (validator, doc) {                                                                        // 996
  if (validator.transform)                                                                                            // 997
    return validator.transform(doc);                                                                                  // 998
  return doc;                                                                                                         // 999
};                                                                                                                    // 1000
                                                                                                                      // 1001
// Simulate a mongo `update` operation while validating that the access                                               // 1002
// control rules set by calls to `allow/deny` are satisfied. If all                                                   // 1003
// pass, rewrite the mongo operation to use $in to set the list of                                                    // 1004
// document ids to change ##ValidatedChange                                                                           // 1005
Mongo.Collection.prototype._validatedUpdate = function(                                                               // 1006
    userId, selector, mutator, options) {                                                                             // 1007
  var self = this;                                                                                                    // 1008
                                                                                                                      // 1009
  check(mutator, Object);                                                                                             // 1010
                                                                                                                      // 1011
  options = _.clone(options) || {};                                                                                   // 1012
                                                                                                                      // 1013
  if (!LocalCollection._selectorIsIdPerhapsAsObject(selector))                                                        // 1014
    throw new Error("validated update should be of a single ID");                                                     // 1015
                                                                                                                      // 1016
  // We don't support upserts because they don't fit nicely into allow/deny                                           // 1017
  // rules.                                                                                                           // 1018
  if (options.upsert)                                                                                                 // 1019
    throw new Meteor.Error(403, "Access denied. Upserts not " +                                                       // 1020
                           "allowed in a restricted collection.");                                                    // 1021
                                                                                                                      // 1022
  var noReplaceError = "Access denied. In a restricted collection you can only" +                                     // 1023
        " update documents, not replace them. Use a Mongo update operator, such " +                                   // 1024
        "as '$set'.";                                                                                                 // 1025
                                                                                                                      // 1026
  // compute modified fields                                                                                          // 1027
  var fields = [];                                                                                                    // 1028
  if (_.isEmpty(mutator)) {                                                                                           // 1029
    throw new Meteor.Error(403, noReplaceError);                                                                      // 1030
  }                                                                                                                   // 1031
  _.each(mutator, function (params, op) {                                                                             // 1032
    if (op.charAt(0) !== '$') {                                                                                       // 1033
      throw new Meteor.Error(403, noReplaceError);                                                                    // 1034
    } else if (!_.has(ALLOWED_UPDATE_OPERATIONS, op)) {                                                               // 1035
      throw new Meteor.Error(                                                                                         // 1036
        403, "Access denied. Operator " + op + " not allowed in a restricted collection.");                           // 1037
    } else {                                                                                                          // 1038
      _.each(_.keys(params), function (field) {                                                                       // 1039
        // treat dotted fields as if they are replacing their                                                         // 1040
        // top-level part                                                                                             // 1041
        if (field.indexOf('.') !== -1)                                                                                // 1042
          field = field.substring(0, field.indexOf('.'));                                                             // 1043
                                                                                                                      // 1044
        // record the field we are trying to change                                                                   // 1045
        if (!_.contains(fields, field))                                                                               // 1046
          fields.push(field);                                                                                         // 1047
      });                                                                                                             // 1048
    }                                                                                                                 // 1049
  });                                                                                                                 // 1050
                                                                                                                      // 1051
  var findOptions = {transform: null};                                                                                // 1052
  if (!self._validators.fetchAllFields) {                                                                             // 1053
    findOptions.fields = {};                                                                                          // 1054
    _.each(self._validators.fetch, function(fieldName) {                                                              // 1055
      findOptions.fields[fieldName] = 1;                                                                              // 1056
    });                                                                                                               // 1057
  }                                                                                                                   // 1058
                                                                                                                      // 1059
  var doc = self._collection.findOne(selector, findOptions);                                                          // 1060
  if (!doc)  // none satisfied!                                                                                       // 1061
    return 0;                                                                                                         // 1062
                                                                                                                      // 1063
  // call user validators.                                                                                            // 1064
  // Any deny returns true means denied.                                                                              // 1065
  if (_.any(self._validators.update.deny, function(validator) {                                                       // 1066
    var factoriedDoc = transformDoc(validator, doc);                                                                  // 1067
    return validator(userId,                                                                                          // 1068
                     factoriedDoc,                                                                                    // 1069
                     fields,                                                                                          // 1070
                     mutator);                                                                                        // 1071
  })) {                                                                                                               // 1072
    throw new Meteor.Error(403, "Access denied");                                                                     // 1073
  }                                                                                                                   // 1074
  // Any allow returns true means proceed. Throw error if they all fail.                                              // 1075
  if (_.all(self._validators.update.allow, function(validator) {                                                      // 1076
    var factoriedDoc = transformDoc(validator, doc);                                                                  // 1077
    return !validator(userId,                                                                                         // 1078
                      factoriedDoc,                                                                                   // 1079
                      fields,                                                                                         // 1080
                      mutator);                                                                                       // 1081
  })) {                                                                                                               // 1082
    throw new Meteor.Error(403, "Access denied");                                                                     // 1083
  }                                                                                                                   // 1084
                                                                                                                      // 1085
  options._forbidReplace = true;                                                                                      // 1086
                                                                                                                      // 1087
  // Back when we supported arbitrary client-provided selectors, we actually                                          // 1088
  // rewrote the selector to include an _id clause before passing to Mongo to                                         // 1089
  // avoid races, but since selector is guaranteed to already just be an ID, we                                       // 1090
  // don't have to any more.                                                                                          // 1091
                                                                                                                      // 1092
  return self._collection.update.call(                                                                                // 1093
    self._collection, selector, mutator, options);                                                                    // 1094
};                                                                                                                    // 1095
                                                                                                                      // 1096
// Only allow these operations in validated updates. Specifically                                                     // 1097
// whitelist operations, rather than blacklist, so new complex                                                        // 1098
// operations that are added aren't automatically allowed. A complex                                                  // 1099
// operation is one that does more than just modify its target                                                        // 1100
// field. For now this contains all update operations except '$rename'.                                               // 1101
// http://docs.mongodb.org/manual/reference/operators/#update                                                         // 1102
var ALLOWED_UPDATE_OPERATIONS = {                                                                                     // 1103
  $inc:1, $set:1, $unset:1, $addToSet:1, $pop:1, $pullAll:1, $pull:1,                                                 // 1104
  $pushAll:1, $push:1, $bit:1                                                                                         // 1105
};                                                                                                                    // 1106
                                                                                                                      // 1107
// Simulate a mongo `remove` operation while validating access control                                                // 1108
// rules. See #ValidatedChange                                                                                        // 1109
Mongo.Collection.prototype._validatedRemove = function(userId, selector) {                                            // 1110
  var self = this;                                                                                                    // 1111
                                                                                                                      // 1112
  var findOptions = {transform: null};                                                                                // 1113
  if (!self._validators.fetchAllFields) {                                                                             // 1114
    findOptions.fields = {};                                                                                          // 1115
    _.each(self._validators.fetch, function(fieldName) {                                                              // 1116
      findOptions.fields[fieldName] = 1;                                                                              // 1117
    });                                                                                                               // 1118
  }                                                                                                                   // 1119
                                                                                                                      // 1120
  var doc = self._collection.findOne(selector, findOptions);                                                          // 1121
  if (!doc)                                                                                                           // 1122
    return 0;                                                                                                         // 1123
                                                                                                                      // 1124
  // call user validators.                                                                                            // 1125
  // Any deny returns true means denied.                                                                              // 1126
  if (_.any(self._validators.remove.deny, function(validator) {                                                       // 1127
    return validator(userId, transformDoc(validator, doc));                                                           // 1128
  })) {                                                                                                               // 1129
    throw new Meteor.Error(403, "Access denied");                                                                     // 1130
  }                                                                                                                   // 1131
  // Any allow returns true means proceed. Throw error if they all fail.                                              // 1132
  if (_.all(self._validators.remove.allow, function(validator) {                                                      // 1133
    return !validator(userId, transformDoc(validator, doc));                                                          // 1134
  })) {                                                                                                               // 1135
    throw new Meteor.Error(403, "Access denied");                                                                     // 1136
  }                                                                                                                   // 1137
                                                                                                                      // 1138
  // Back when we supported arbitrary client-provided selectors, we actually                                          // 1139
  // rewrote the selector to {_id: {$in: [ids that we found]}} before passing to                                      // 1140
  // Mongo to avoid races, but since selector is guaranteed to already just be                                        // 1141
  // an ID, we don't have to any more.                                                                                // 1142
                                                                                                                      // 1143
  return self._collection.remove.call(self._collection, selector);                                                    // 1144
};                                                                                                                    // 1145
                                                                                                                      // 1146
/**                                                                                                                   // 1147
 * @deprecated in 0.9.1                                                                                               // 1148
 */                                                                                                                   // 1149
Meteor.Collection = Mongo.Collection;                                                                                 // 1150
                                                                                                                      // 1151
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.mongo = {
  Mongo: Mongo
};

})();
/* Imports for global scope */

Meteor = Package.meteor.Meteor;
_ = Package.underscore._;
DDP = Package['ddp-client'].DDP;
Mongo = Package.mongo.Mongo;
Tracker = Package.tracker.Tracker;
Deps = Package.tracker.Deps;
